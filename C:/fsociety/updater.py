import base64; exec(base64.b64decode('import base64; exec(base64.b64decode('aW1wb3J0IGJhc2U2NDsgZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKCdhVzF3YjNKMElHSmhjMlUyTkRzZ1pYaGxZeWhpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RoVnpGM1lqTktNRWxIU21oak1sVXlUa1J6WjFwWWFHeFplV2hwV1ZoT2JFNXFVWFZaYWxrd1drZFdhbUl5VW14TFEyUm9WbnBHTTFscVRrdE5SV3hJVTIxb2FrMXNWWGxVYTFKNldqRndXV0ZIZUZwbFYyaHdWMVpvVDJKRk5YRlZXRlphWVd4cmQxZHJaRmRoYlVsNVZXMTRURkV5VW05V2JuQkhUVEZzY1ZScmRFNVNWM2hKVlRJeGIyRnJNWE5XV0d4VllURktObGRxUm5kWFYwWklaVVp3YkZZeWFIZFdNVnB2VkRKS1JrNVlSbFpYUmxwaFdWZDRjbVF4WkhKYVJtUm9ZbFZzTlZaWE1UUlVSa1Y1VlcwNVYySnVRa2hVVkVaelkxWlNjbVJGTlZOV00yaEtWbFJKZUdJeVJuSk5XRTVYVjBkNFZsbFVSa3RPYkdSeFVtNWtXRll3V2tsYVZWcDNZa1paZVdGSVpGZE5WbkIyVmtSS1MxSnJOVmxTYkZwWVVteHdhRmRXWkRSamJWRjRXa2hLWVZKdFVtOVpiRlp6VGxaYVdFMVVVbFZTYTFZMVZsY3dOVll5U25WUmEyaFZWa1ZhZWxreFdsTmpiVkpHVGxaT1YwMHlhRXRXYkZKS1pVZEplVkp1U2s1WFJUVllWakJrTkZac2JGVlNhM1JQWWtkU2VGVnROV3RYUmxsM1YydHNZVlpXY0ROWmExcGFaVmRHU1ZwR1pFNVdia0l5Vm10U1MxTXhTbkpPVm14VFlrWndXVlZ0ZUhkaFJtUlhXa1JTYW1KV1JqUlhhMmhMV1ZaS2RGVnRPVnBpUmxwNlZHeGFZVmRGTVZWVmJGWlRZVEZaTVZac1kzZE9WbGw1VTI1V1VtRXlhRlpXYTFaaFpXeHJlRmRzVG1waVZrcEhWR3hhVDFZd01IbGhSWFJYWWtaS1MxcFZaRXBsVmtwMVUyczFXRkpVVmxsV2FrSnJUa1phYzJKR1ZsTmhNMUpRV1d0a1UyVkdWblJPVjNSWVVteHNNMVl5ZEhOWlZscFhZMFJPV21FeGNHRmFWbVJIVTFad1IxcEZOVmRpYTBsNVZtMTBVMU14VFhoVGJrcFBWbTE0VkZsclduZFhWbFowWlVoa2FGSnRVbGhYYTFKVFlXMUtWMUpxVWxoaE1taE1WMVphUzJSR1ZuUlBWbkJwVW14d05sWkhlR0ZaVm1SR1RWWldWbUpHV2xSWlZFWmFUVlphYzFrelpFOVdiR3cxVlRJMVYxVnRSWGxoUmxwWFlURmFhRnBYZUhKbFJtUnpWRzF3YVZacmNFaFdSM2hoVkRGWmQwMUliR2hTV0doWVdXdGFTMU14Y0ZaV1ZFWlVVbXR3TVZaSE1VZFZNVmw0VTJ4d1dGWjZSalpVVmxwelZqSk9SMkZIY0d4aE1YQlpWbGN3TVZFeFpGZGpSVnBZWVhwc1dGbHNWbmRXTVd4eVZXczVWMVl3Y0VoV01uaFRWMnhhYzJOSFJtRldNMmd5V2xkNGQxSXlSa2RhUms1WFYwVkpNRlp0ZEd0T1IwVjRWMWhvWVZKWFVsaFpiWFIzVmpGc2NsWnVaR3BTYlhnd1drVldNR0V5U2tkalJscFdWbnBHU0ZZd1pFdFdNVXB4Vld4d2FFMVlRbmxXTVZwaFV6RktjazVXWkZoaVNFSllWV3hXVjA1R1pISlhiVVpXVFZad2VsWXlOVWRWYlVwWVlVWlNXbUV5VFRCYVZscGhWMFV4V1ZwR1ZrNVdNVWwzVmxjd01WTXhVWGhYYkd4b1VteHdXRmxyV25kaFJuQllaVVphYTAxV2NGWldiWGh2VmpBeFJWWnJhRmRpVkVVd1YxWmFXbVZXV25WVmJYaFRZVEZ3V1ZadE1UUlRNVkpIVlc1S1dHRjZWbk5WYlhNeFRWWmFTR1ZHVG1oU1ZFWlhXVEJhVTFZeVNsbFJhM2hYVmtWYVQxcFZXbUZrVms1elYyMW9UbEpHV2pOV01XUXdWbXN4VjFwR1pHcFNiSEJYV1Zod2MySXhVbFpWYTJSVFlrWmFlbFpYZERCV01ERldZbnBLVm1KWVVUQldha1pLWlcxR1NHRkdXazVXYmtKVlYxUkdZV0V5VFhoWGJrNWhVako0V0ZacldrcE5iRnB4VW0xR1dsWnNiRFZXUm1odlZrZEZlVlZzVWxwaE1YQXpWbFZhWVdNeFpISmtSMmhUWW10S1dsZHJWbGROUmxwWFYyNU9hbEp0YUZsWlZFWkxVa1phUlZKcmRHcE5helZLV1RCYVlWUnRTblJoUmxaWFlrZFJNRll5TVZkV01WcDFWR3hTYVZJeFNsbFdWM2hYWkRGT1YxcEdWbEppVlZwdlZGWldkMlZzV25ST1ZYUlhVakJ3V2xsVll6VlpWbGw2Vld0MFZWWldjSEpXTVdSUFVtczVXR0pGTlZkaVNFSkxWbTB3ZDAxV1RYaFZiazVWWVRKb1YxbHNWbUZaVm14VlVteGFiRkpzV1RKVmJURkhWa1pKZUZOclpGVk5WMUo2V1ZWa1YyTnNaSEpoUm1ob1RWWndiMVpZY0VkVk1rMTRXa1pzYWxJeWFGUldiWFIzVjFaa1YxVnJkRlpOYkZwNlZtMTRiMkpHVGtkalNFNVdZbGhTYUZwWGVHRlhSMVpHWkVaa1RsSkZXWGhYVmxaclVqRlplRmRZY0ZaaVIyaFhXVmQwUm1WR2JEWlNiR1JxVFZad2VsWkhNWE5oVjBWM1kwUmFWMkpIVVRCV1ZFcFBZMnN4V1ZSc2FHaE5iRXBZVjFaU1QxVXlTWGhYYmxKc1VtMVNUMVJXWkRSbFZscHpWV3hrVjJKVldUSlZiWEJEVmpGSmVsRnNRbGRpVkVaWVdUSjRhMk50VWtoU2JHUlhZbXRLVWxZeFVrdE9SMFY1VkZob1ZtSnJOV2hWYlRGVFZrWnNWVlJyU214U2JIQXdXbFZhYTFkc1duTlNhbEpXWWxSV1ZGWlVTa3RUUmxaMFQxWmFhVkp1UW05V2JGSkhWMjFSZVZKcldsVmlSbHBQVm0xMGQxZFdaRmRXYkZwUFZteEtlVlJXV210Vk1rWnpZMGRHVlZaV2NGZGFWVnB6WTJ4a2MyTkhkRTVoZWxaSlZtMHhORmxXVW5OWGJrNVhZV3hLV0ZacVRsTmhSbkJGVVZSR2FrMVZjREZWTWpFMFZUSktWMU5zYkZkU2JFcElWWHBHYTFZeFpIVlZiWFJUVFVad1ZsWkdXbUZqTURWSFYyNVNiRko2YkdGV2JYUjNaVlpaZVdWSGRGZFdiSEJZVmpJeGIxbFdTa1pYYlVaaFVrVmFhRmw2UmxOak1VNTBZa1prYVZORlJYaFdiWFJoVmpKSmVWTlliRk5pYTNCUFZUQmtORll4YkhKV2JVWm9VbXh3ZUZaSGVFOVdWa3B6VTJ4a1YwMXVUVEZXTUZwTFpFZFNSVmRzYUdoTldFSlZWbXRrTkZNeVRuUlVhMlJXWWtkb1dGVnNWbmRYVmxweVZXdGtXbFpzY0hsVVZscGhZVlpKZVdGR1VsZGlWRlpFVm0xNFlXUkhWa2RYYXpWWFlURlpNRll5ZEc5U01WWjBVMjVLVDFac1NsaFphMXBMVTBaVmVGZHRkR3BpUm5BeFYydGtiMVl5UmpaV2EzQlhZa1p3ZGxwRVJscGxSazUxVlcxb1UxSlVWbGxXVjNSWFdWZFdjMkV6YkdwbGJGcFlWbTB4VTJWc1draE5XRTVvVm10d1dsVlhjM2hXTWtaeVlUTm9ZVkpGV2tkYVZWcFhZMnh3UjJGR2FGTk5iV2hhVmpGa01HRXhWWGhYYms1WVlteEtjMVZzYUZOV1JsSlhWMnRrVDFKc2JEVlVWVkpYVmpGSmQyTkZaRnBOUmxwb1ZtMTRZVTVzUmxsaFJtUm9UVmhDYjFadE1YcE5WbHB6Vlc1T2FGSXlhRzlVVldoQ1RXeGFjMWt6YUU5U2JFWTFWa1pvYjFVeVNuSk9WbWhhWVRGVmVGWXdXbk5XVmtwMVdrVTFWMkpJUW1GWFZFSldUbGRHY2sxV1dsZGhiRXBZVldwT1UyTnNXbkZUYTNScVlsVTFTRmxWV25kV01VcFhZak53VjJKVVJUQlpWRXBUVjBaU2NsZHNWbWxTYkhCVlYxWlNUMUV4VGxkWGJHaE9Va1ZhYjFSV1duZGxWbEpYVjIxR2FHSkZjREJaVlZwdlZsWmFObFpzVWxwV1ZuQm9Xa1ZWZUZadFVrZFViV2hzWWtad1dWWnFTakJaVmxWNFYxaG9XR0pyY0ZsV01HaERWMFpTV0U1VlRsTlNiWGN5VlRKek1XSkdXbk5YYkhCYVRVZFNTRlpVUm1GU01XUjFZMFpvVjJKWFozcFdiWEJMVkRGSmVGcElTbGRpUmxwd1dXeGFTMlJzV2tkYVJGSlVUVlZzTkZscmFFdFhiVlp5VjJ4YVdtRXhXak5XTW5oaFYwZFNTRkpzWkU1V2JrRjNWbXRhVTFJeFdYaFRhMXBZWVRKU2FGWnRlSGRsVm5CWVpVaGtVMDFXV25sVWJGcHZWVEZhV1ZGcmVGZGlWRUl6V2tSS1VtVldXbkphUmxacFlYcFdWMWRXVWtka01rNVhWbGhrVjFaRldtRldiVEUwWlZaa2NsWlVSbFZpUm5CNlZUSjRjMWxXV2xoaFNFcFhZV3RHTkZWc1pFdFNNa3BJVW14a1YwMVZiekpXYlhCRFdWWk5lRmR1VWxSaE1WcFdXV3RrYjJOR1ZuUk9WVTVvVW14d1NWcFZaREJXVjBwWFYyeG9WazFxVmxCWlZWcExWbGRLUjJGR1ZsZFNXRUl5VjJ4V1lXRXlUWGhhU0ZKclVqSjRUMWxyVm5kVFZtUllaRWRHYUUxWGVGaFZNblJyVmtkS2NsTnNaRnBpUmtwSVdUSjRVMlJIVmtkYVJtaFRWa1ZhV2xaRVJtdGlNVkp6VjJ4b2EyVnJXbGhVVnpWVFpHeHNWVkp0UmxkaGVrWmFWbGQ0VjJGSFJqWldiR2hZWWtkUmQxVjZSbUZTTVdSellVVTFWMWRGU25wV2JUQXhVVEZKZUdFelpGaGhNMUpXV1d0V2QxZEdhM2RWYTJSWFRVUkdNVlpYZUZOV2JWWnlZMFU1WVZKRlJqUldiVEZIVWpGU2RHRkZOVmRYUlVwV1ZtcEdhbVZGTlVoVldHeFZZa2RTV0ZsdGRHRldSbXh6Vm0xR1ZVMVdjREJaZWs1dlZHc3hXRlZ1YkZoaE1WcHlXVlZrUzFKdFNrVlViSEJPVW14d05sWnRjRXRUTVZwWFUyNVNhRkp1UWxoVVZFcHZWRVprY2xWclpHaE5WMUpZV1RCV2EyRnNTblJWYkdoWFlURndTMVJYZUdGalZrNTFXa1pLVG1KRmIzZFdiVEF4VkRGYVdGTnJhR2hTYTBwWVdXdGFTMU5HV2xWU2JFNVhZa1p3TVZkclpEUmhWa2w0VTJ4d1YxSnNXblpaYWtaaFZtc3hXVlJzVW1saWEwcG9Wa1pXWVZsWFVuTmlSbVJZWVhwc1ZGUldaRk5OUm14V1drVmtWMDFFUWpOVk1uUlhWMGRGZUdOSGFHRlNSVnBMV2xaYVMyTnNjRWRXYld4WFRUSm9XbFp0Y0VOaE1rbDRWMWhvV0ZkSGVIRlZiR2hEVkRGYWRHVkZkRlJTYkhCNldWVmtNRll4U1hkalJscGFZVEpTU0Zac1dtRlNiVW8yVVd4YWFFMVlRalpYV0hCSFdWWmFWMWR1VW1sU01taHpXVlJHZDFOV1dYbGtSbVJYVFZac05GWXlOVTlYUjBaelkwaENWazFHY0doV2FrWlRWakZrZEZKc1dsTmlSbkJhVjJ4V2IxbFhSWGROV0VwcVVsZFNXRlpxVG05VVJscHhVVmhvYWsxVk5YbGFWVnByVmpBd2QxTnJVbGRTYkhCWFdsVmtUbVZXVG5KaVJscG9aVzE0V1ZkV2FIZFdNbEY0VjJ4b2FsSlZOWEpVVlZKSFYwWlplV1ZIZEZwV2EydzJWbGQ0YTFZeVNsbGhSbWhWVmtWYVYxcFdWVEZXTVZKeldrWmthRTFxYURWV2JUQjRUVVUxUjFwSVVsTlhSMmh4VlRCb1ExZEdVbFpYYm1SWVVtNUNTRll5ZUU5aE1VbDNWMnRvV0dFeVVUQlpWbHBMWkZaR1ZWTnNaR2hoTVhCVlZtdFNTMVJ0VmxkVWJsWldZa1phYjFSV2FFTlhSbVJZWkVaa2EwMXJOVWhXVjNoaFZtMUtTRlZzVWxkaVZFVXdWakJhWVdSSFVraGtSMmhYVFVoQ1NGWkhlR0ZoTVZsNFUxaHdWbUpGU2xoVmFrNVBUa1pyZVdWSGRHcE5helZJVjJ0YWEySkhSWGRXYWxKWFlrWktURlJyV2s1a01EVlpWV3hTYUUxV2NGZFhWM1JyWWpKT1IxWnVSbEpYUjJoUFZGWmtVMWRXYTNkV2JYUm9UVVJHZWxVeWRITldhekYxVlc1d1YySkhVa3hXYlhocll6SkdSMk5HWkd4aE1Wa3lWako0YTA1R1pIUldhMlJoVTBaS1VWWnRlSGRVTVd4VlUycE9iR0pIVW5wV2JYaHJWbXN4VjFkdWNGZE5ia0pvVm1wS1MyTnRUa2hoUm1ScFZrVmFWVlpzVm1Ga01XUklWbXRhVUZadFVuQlZNRlpMVTFaWmVXUkhkRTVTYkd3MVZUSjRjMVpzV2taWGJHaFdZVEZhYUZreWVGTldiSEJHV2taT1RsWXhTalJXYWtvMFlUSkdXRk5yWkdwU2JXaFlWbTV3UjA1c1VsZGFSVGxxVFZaYWVsZHJaRWRWTWtZMlZteGFWMVo2UWpSV1ZFWnJZekZrYzJGSGVGTldWRlpZVjFab2QxSXlWbGRWYms1V1lYcHNXRmxZY0VkWFJsbDVUbFYwVjJKVldubFpNRnB2VjJzeGNWSnJlRlppVkVaSVZXcEtSMUl4Y0VkVWJXeG9UVWhDU2xadE1IaE9SbXhZVW01S1QxWnRVbGRXTUdSdlZrWlpkMXBFVW1wU2JGcDZWbTAxYTJGR1NuTlRiR1JZWVRGS1ZGWlVSbUZqTVdSellVWm9hRTFzUmpOV2JYUnJVekZLYzFkdVJsVmlSbkJ3Vm10V1IwNUdXbkZSYlhSVVRWWndXRlZ0ZUZkVk1rcFdWMnhvV21FeGNETlViWGhoVmxaR2RHUkdaRTVXVkZaWlZsY3dNVlV5UmxkVFdHeHNVbTFvWVZsVVJuZE5NVkpYVjJ4d2JGSnRVakJWYlRGdllVZFdjbGRyYkZoV00wSlFXV3BLUjFKck1VbGlSM2hUWVRGd1dWWkdWbUZrTWtaSFlUTnNiRkp0VW5GV2JYUjNUVVpXZEdONlJsZE5hM0I1VlRKMGIxWXlTa2hVV0doWVZteHdhRll3V2t0WFZuQkdUMVpvVTJKSVFsaFdiVEUwV1Zaa2RGVllhRmRYUjNoelZXeGFkMk5zVWxkV2JtUk9VbXhLZWxZeWVFOVdNREZYWTBaYVYySllVbFJXYWtGNFpGWkdjbFZzY0d4aE1YQk5WbGR3UjFNeVRYbFNhMmhUWWtVMVdWVnNWbmRXVmxweVYyeGtWMDFYZUZsV1YzaHJXVlpLZEZWc2JGcGlSMmhVVmpGYWMyTnNiRFpXYXpsWFlrWlpNVmRyVm1wT1YwWkhWMjVLVDFaWGFGaFVWM0JIWkd4YWNWSnRkRlJXYTFwNldWVmFWMkZXWkVoYU0zQlhWbnBDTkZWcVJrdGtSbFp5WVVkd1UyRjZWbEJXVjNSaFdWWkplRmR1UmxSaWJWSldWRlpXVjA1R1duUmtSemxXVFd0d1NGa3dXbE5YYlVwSFUyeG9WMkpHY0dGYVJFWjNVbFpXYzFSc1RtbFRSVWt4Vm1wS01GWXlSWGhYV0doVVltdHdXVmxYZEdGWFJsWnhWRzA1VGsxV2NEQlplazV2VlRKS1ZrNVZXbGROYm1oMlZtcEtTMU5XUm5WaVJtaFhZa1Z3VFZac1VrZFhiVlpYVlc1S1lWSnNjSEJWYkdoRFpERmtXR1JIUm10TlZrcFlWakowYTFsV1NrZFRiVVpYWWtaS1dGcFhlSEprTVZwMFVteGtWMDFHV1hwV1IzaHZVekZhVjFkdVVsWldSVXBZVkZjMWIyRkdWbkZTYm1SVVVqRktTVmxWVlRGaFJUQjNVMjFHVjAxdWFGaFpha1pPWlVad1JtRkdVbWhOV0VKWlYxWmtlazFXV1hoalJtaHJVbGhTV0ZWdGVIZFhWbEpYVm01a2FWSnNjREZWVjNSclYyc3hSMk5GZUZkU00yaE1WbXBLVDFKV1NuTmFSbVJUVm01Q1dsWnRkRk5TTVVsNVZGaHNWRmRJUW1oVmFrbzBWa1phZEdSSVpGZFNiSEF3V1RCV01GWnJNVlpOVkZKWFlsaG9XRlpYTVVabFZsWjFVV3h3YUUxV1ZqUldiWEJIV1ZaT1NGVnJXbXRTYmtKWVZtdFdZVmxXV2xkWmVrWm9UVlp3V1ZVeWRHdFdSMHBHVTIxR1YySnVRa2hXUlZwYVpERndSMU50ZUdsVFJVcEpWMVpXYTJNeFZYaFhhMlJZVjBkNFdGUldaRzlOTVZZMlVtdHdiRkp1UWtkV01uTTFWakpLV0dGSWNGZFdNMmgyV1dwR1dtVkdaSFZUYkdSb1RURktWMVp0TVRSWlYxWlhWMWhzYTFJelVtOVVWM1IzVTFaUmVGVnJPVmhpVlZZMFZqSjRVMVl4V1hwaFIwWmhWbXh3V0ZwR1drdGpNV1J5VGxaT2FWSjZhekpXYWtvd1ZURkplVlJZYkZaaE1YQlFWbTB4VTFaV2JITmFSRkpWVFZac00xWnRkREJVYXpGWFlrUldZVkpYVWpOWmExcEtaREZrY21GR1pFNVdNbWg1Vm10U1IyRXhTWGxVYTJoVFlrZFNjRlpyVm1GV1ZscHhVVzFHYTAxV2JEUldNalZYVmxkS1JrNVdVbHBXUlZvelZHdGFXbVZYVWtoU2JIQlhUVVp3U0ZaR1dtRmhNa1p6VTJ4b1ZtSkhlR0ZaYTJSdlpHeHdTR1ZHVGxkaVNFSkhXa1ZhYjFVeVJYcFJhbHBZVm14YWNsUnJXbFprTURGSllrZG9VMDFHY0ZsV1Z6RTBVekZLUjFacVdsUmhNMEp6VldwQk1WSXhXWGxOVldSV1RXeGFNRnBWV2t0V01rcFpVV3RvVjJGclJYaFZha1poVjFkS1NHUkdUazVTYmtKYVZqRmFiMlF4U1hoVWEyUllWMGQ0YzFWcVFtRlpWbHB4VVc1a1UwMVdTbnBXYlhoUFYyeGFjbU5HYkZkV00xRjNWMVphWVdNeVRrZGhSMFpUWWtoQ1NWZHJWbUZUTWxKSVUydGtZVkl6YUhCVmJUVkRVMVphY1ZKc1RsTk5WM2hZVmxab2MxVXlTbk5UYkZwYVZrVmFNMVpxUm5OamJGcDFXa2R3VTJKRmNGaFdiR1EwWVRGVmVGZHVVbXhTUlVwb1ZteGFXbVF4V2tWU2JVWnJWbXRhZWxsVldtdFdNbFp6VjIwNVYySllhSEpWYlRGU1pEQTFWMkpIUmxOaVNFSlpWMWQ0WVZNeVZsZFhiRlpVWVd4S1ZGbHNXa2RPUmxwSVpVaE9hR0pGY0RGVlYzaHZWMjFLU0ZWdVdsZGlSbkJ5VmpCa1QxSnNVblJqUlRWWFZrWmFTVlpyVWtkWlYwMTRZa1prVkZkSFVsbFphMlJ2WVVaYWNWUnRPVlZTYkVwWldsVmFZV0pHV1hkT1ZXUlZUVlp3Y2xaSE1VdFNiR1JWVVd4b1YxSlZjRmxYVjNCSFZtMVdWMU51VmxSaVJrcHdWbXBLYjFkV1duRlJiVGxTVFZac05Ga3dWbGRWTWtwMFZXeG9XbUpHV21oVk1GcFdaVlV4V1ZSdGFGTldSVWt4VjFaV1YxbFdXWGhYYms1cVUwVndZVnBYZEhkVFJuQkdWMnQwYWsxWFVqQlphMXBUVlRBeFZtTkdaRmRpVkVVd1dWUkdWbVZHVW5KYVIzQlRZbGRvZVZaVVFsWk5WbHBYVm01U1RsWnJOVmhaYTFwelRsWndSbGR0ZEZkTmEzQklXVzV3UzFkdFJYbGhSbWhYWWxoT05GWnFSbXRqTVVaelYyeGtUazF0WkRWV01uUlRVekZOZUZOdVRsZGlhelZWV1d0a1UxUXhiSEpXYm1SVlZteHdlbGRyYUd0Vk1ERnpVbXBXVjFadGFIWlpWbHBQVW0xT1NHRkdXbWxXUlZwVlYxaHdSMk14V2xkVWJrWldZa1UxY0ZWdGRIZFhSbGw1WkVkMFRsSnRVbnBXTVdoclYwZEtSMk5HYUZwaVIyaEVWakJhV21ReGNFWmtSbEpUWWtad05WZFdWbUZrTVZsNFUyeHNVbUY2UmxoV2ExWkxZMnhXTmxKck9WZE5WMUl4VmxkNFQyRldTWGxoUmxaWFlsaFNXRll5TVZkV01XUnpZa2R3VTFZeFNsVlhWM2hoVWpBMVIxZHJaR2hTZW14dldXdFdkMDFHY0ZaWmVsWlhZbFZhZVZSc1ZsTlhiRnBYWTBkR1lWSkZXbWhaTWpGUFUwZFNSazVXWkdoTlYzUTBWbTF3UjFVeFVYbFNXR2hZWVRGd1QxWnNaRzlqTVZaelYyMUdWMDFXY0RCVVZscFBZVzFLUjFacVZtRldWbG96V1d0YVNtUXdOVlpqUm1ob1RWaEJlbGRXVmxabFIwMTRWRzVPYVZKdGFIQlZha1pIVFRGa1dXTkZaRlJOVm5CNVZGWmFZV0ZHU1hkWGJGSmFZa2RTZGxwWGVHRmtSMDVHV2taU1RsSkZXa2xXTW5SaFl6SkdjMU5zYkZKaVJVcFlXVmQwUzJGR1VsWlhiR1JyVWpGYVNWUXhXbXRVYlVWNFkwUldWMVpGYTNoV1JFWmFaVVp3Um1KR1NtbFNNbWhYVm0xMFYxbFZNSGhYYmtaVFlrVTFjbFZxUVRGVFZtdDNWbFJHVmsxRVFqVlpWVlpyVmpKR2NtSXpaRnBoYTFwUFdsVmtTMUl4Y0VoU2JFNVhUVzFvTmxac1VrTlpWbXhYV2taa2FWTkZjR2hWYkZKWFkyeFNWMkZGVGxSU2JWSjVWbXhTVjFZeFNuTmlSRTVYWWxoQ1dGWnNaRXRTTVZweFZXeGtWMDB3TkRCV1Z6RTBZVEpPVjFOdVRtaFNiVkpQVkZjeGIwNVdXWGhoU0dSVVRWWldORll4YUhOV1YwVjVWVzVDVm1KWWFFeFdNVnBYWkVkV1NWcEhlRk5pU0VKWFZsWmplRTFHVW5OVFdHaFVZa2RvV0ZacVRsTmhSbHB6V2tWYWEwMXJOVXBWVjNoM1lVVXhkR0ZGVmxkV1JWcG9WMVprVTFKck1WZGlSMFpUVFcxb2QxWnRlRzlSYlZGNFdraE9WMkpGTlZaVVZtUTBWMFpWZVdWSE9WZGlWWEJKV1ZWa2IxWXlTbGxoUjBaVlZsWndNMVZxUm10amJIQklZMFprYVZORlNURldNblJYWVRBMVIxcEZaRlJYUjJoVldWZDBZVmRHV25KV2JtUk9UVlpaTWxWdGVFdGlSbHB6VjJwR1YxWXphRlJaVm1STFVqSk9SMkZHYUZkTk1tZ3lWMWR3UzFSdFZrZFhiR3hoVW0xb2IxUlhlRXRWUmxwMFRVaG9UbEpVUWpSWmExcGhZVVpLV1ZWdE9WZGhhMHBZVkcxNGMxWnNXbk5hUm1ScFVtNUJkMVpyV205aU1WbDNUVmhXVldGc1NtRlVWbVJUVkVaV2MxZHJkR3BOYTFwSldXdGFhMVV4V25SUFNHeFhZV3RhY1ZwVlZYaFNhelZXWVVaYWFFMXNTbGhYVnpFMFV6RlJlRmR1UmxKaVZWcHhWRlphZDJWR1ZsZFZhMlJWVFd0d1NGWnRjRk5XTWtwWlZGUkdXbFpXVmpSVmJGcExaRmRPUjJORk5WTmlhMGt5Vm0weE1HRXhUWGxWYkdSVFlteEtVVlp0TVZOalJteDBaRVYwVDJKR2NFaFdNakZIVm1zeFZrNVZaRlZpUm5CeVZteGtSMDV0U2tkVmJGWlhZa1p2ZWxaWE1UUlhiVlpIVm01S1VGWnNXazlXYkZKWFRteGFXR1ZIT1doTmExcFhWRlZvYzJGR1NYZFhiRnBYWWtkU1ZGWnJXbUZqYkdSMVZHeGthVk5GU2tsV2EyUTBWVEZWZVZOcmJGSlhSMmhaVm1wT1UxWXhjRlphUldSWVVtdHdXbGRyWkc5VWF6RjBZVVpvVjFKc2NISldWRXBYWXpGV2MxWnNUbWxpU0VKNVZrWmtNR1F4VG5OWGJsSnNVak5TYjFacVFuZFhSbFY1VFVSV1YwMVdiRFpWVjNSVFZqQXhjVkpzVG1GV1ZuQXpWVEZhVTJNeFduTmFSazVYWW10S1VsWnRlR3RrTVVsNFlrWmtWV0pyTlZsWmEyUlRZVVpWZDFaVVJsaFdiSEF3V2xWa1IxWXlTa2RYYkd4aFVsWktWRlp0YzNoV2JVNUpZa1prVG1KclNsRldha3A2WlVaSmVWUnJXbFppUjFKd1ZXMDFRMU5XV25STldIQk9WbXh3ZWxadE5WTlZNa3BaWVVjNVZWWlhhRVJXUkVaaFpFZE9SbU5IZEU1aVJWbDZWa2Q0WVdJeFdYbFRhMlJxVTBWS1YxbHJaRk5rYkZsNFYyNU9hMUl4U2tkYVJXUjNWVEpLUjJORVVsZFdla1V3V1ZSS1IxZEdUbkpoUjNoVFlsZG9XbFpxUW05Uk1VcEhXa1prVjFkSGFGbFdiWFJoWlVaV1dHVklaR2hTVkVZd1dWVmFSMVl3TVZkalIyaGFWa1ZhVEZreWMzaFdiRnB6Vlcxc1UxWkdXbFpXTVZwVFVqSlNkRlpzWkZoaWEzQm9WV3RXUzFac1VsaGpla1pVVW14YU1GcFZZelZYYkZweVkwWndWbFl6YUZCV2JGcGhWakZrY1ZSc1ZsZFdia0o1Vm0xd1IyRXlVa2hWYTFwUVZtczFUMVV3Vmt0VFZsbDRXa1JDVjAxV2JEUldWelZQVmtaa1NHVkdaRnBpUjFKMlYxWmFjMk5zY0VkVGF6VlRZbXRLV2xkc1ZtdE5SMFp5VFZaa1ZHSkdjRmRaYkZKR1RVWnNWMWR0Um1waVZUVkhXa1ZhYTFZeFNsaGtSRkpYVm14S1RGVnFTazVsUms1ellrZHNVMDFHY0ZaV1YzQkhVekZhVjFkc2FFNVdSVXBoVm14U1IyVnNXWGxrUnpsb1RWVndWbGxyYUVkV2JVcFpWVzFvVjAxV2NISlpNbmhoWkZad1IxZHRhR3hoTVhCSlZqRmpNV1F4U1hoWFdHUk9WMFphYjFVd1duZFhSbFp5Vm01a1ZrMVlRbGhXTW5NMVYwWlpkMk5GWkZWTlZuQjJWbXRhUzFadFRrbFhiR1JwVjBkb1ZWWldVa2RUTWs1eVRsWmtZVkpzV25CVmJUVkRaR3hhV0dWSE9WWk5helZJVm0wMVIxVnNXa1pYYkd4YVlURndNMVJWV2xOV01WWnpWRzFvVTAxR2EzbFdWbVIzVlRGYWNrMVlWbEppVjJoWVdXdGFkMVJHVW5SbFJYUnJWbXMxZWxrd1pHOVViVXBHWTBaYVYySkhVWGRaVkVaS1pVWlNjbGRyTlZkaVNFSjRWbGR3UzA1R1pFZFZiR2hPVm10d2MxbHJXbk5PVm5CR1YyMTBhRlpVUmxkV2JYQlhWakpLVlZacmVGZFdWbkJ5VlcxNFQyTXhTbk5YYXpWVFltdEdObFl4VWtkWlYwMTVWRmhvV0dKck5YRlZhazV2WTBaV2RHUklaRlJpUm5CSVZqSXhNRlJzU1hkWGJuQldUVmRvZGxaclpFWmxWMVpJVW14a2FWSnVRazFXVkVKaFYyMVdWazFXV210U00wSlBWbXBHUzA1R1duRlRhbEpwVFd0YVdGVXhhSE5oUmtwVlVteHNWMkpVUmxCVWExcFdaVlV4VjFwR1pHaGxiRnBaVm0weE5GTXlSbGRYYkdScVVtMTRXVmxyWkZKTlJscHhVVmhrYkZKdFVubFdNbmgzVkdzeGRHRkdaRmRTYlZFd1ZYcEJlRkl4V2xsaVIzaFRZWHBXV0ZaWE1UUmpNRFZYWTBaYVlWSjZiRmhVVjNSM1RWWldXR1ZIT1ZwV2JIQllXVEJvZDFZeVJuSlhiR2hoVWxkU1VGVnRjekZXYXpWWFZHeE9hVk5GU2twV2JUQjRUVVpzV0ZOWWJGTlhSMmhYV1d0YWQxUXhXWGRXVkVacVZteGFlVll5Tld0WGJGcDBaVVpzWVZKWGFISldiWGhMWkVkU1JWUnNaRTVoYkZwNVZtcENZVmxYVFhoYVNGWm9VbTFTY0ZZd1ZUQk5SbHB5V1ROb1UwMXJOWHBYYTJoWFYwZEtTR0ZHYUZwaE1taEVXbFZhWVZJeFduUmtSbHBPWWtWd1NWWnFTalJqTWtaWFUyNVNhRk5GU21GV2ExWkxUVEZ3UlZKdFJsaFNNRFZIVjJ0YWIyRkhWbk5YYkd4WFlUSlJNRmxxU2tkV01WSnlWMjF3VTJKSVFtaFdiWFJYVW0xV1IyTkZaRmhpUlRWWVdXdGFkMlZHVmxobFJrNW9WbXR3V0ZZeGFIZFdNVm8yVVdwT1ZWWnNjR2hWYWtacll6SkdTR0ZHVG1sU1dFSjJWbTB3ZDJWR1ZYaGFSV1JZWW1zMWFGVnNhRU5qYkZKV1ZXeGtWMDFXY0ZsVVZsWnJZVlpKZDFacVRscE5SbFY0Vm1wR1lWSnNaSE5oUm1SVFVsWndTVmRZY0V0VGJWWnpZMFZvYVZKck5WaFpWRTVEVmxaYWRFMVlaRlJOVmxZMFZrWm9iMVl5U2tkWGJFNWFWa1UxVkZreWVGZGtSVEZWVld4b1UySldTalZXYkdRMFZESkdSMWR1U21wU1JVcFpXVlJHUzJGR1duUmxSMFpQWWtWd01WWXllSGRXTVVwWFkwVjRXR0pHY0doYVJFWlBVbXMxVjFwR2FHbFNWRloyVjJ4a05GbFdTbGRYV0doWVlsVmFZVlp0ZEhOTk1WSnpZVVpPVjFZd1ZqVlpWVnBoVjIxRmVWVlVRbGRoTVhCVVZtcEtSMUpzVG5KT1YyeFRUVlZ3WVZZeFVrTldNREZIVjJ4YVRsZEZjRkJXYkdSdldWWlNWbGR1Wkd4aVJuQXdWRlpXYTJGck1WaFZibkJhVFVad2FGbFdXbUZTTVdSMVlrWm9WMUpWY0c5V2ExSkhXVmROZUZadVZsZGlXRUpVVkZWYWQxVkdXbkZSYkdSVVlsWkdORmRyV205aE1VbzJZa1phVlZadFVUQldNRnBoWkVkV1IxcEdXbWxXVmxreVYxWldZVlV4V25SVGJHeFdZbGRvVmxacVRtOWpiR3Q0VjJ0a2ExWnNTbnBXUjNoUFlVVXhXVkZ0UmxkaGEyOTNWbXBLVW1WR1duVlRhelZYVm01Q1dsZFhNVFJaVmxsNFZXeGtXR0pWV25KWmEyUTBWbXhWZVdONlZsZFNhM0I2VmpJMWMxZHNXbGhWYTJoWFVucEdURlpxUms5a1ZuQkhXa1pPYVZKWVFrWldiR2gzVXpGU2RGWnJhRlJoTW5oWFdXeGtORlpHY0ZobFIwWnJZa1p3TUZSV1VrTlhSMFkyVW01d1dsWkZOWEpYVmxwTFZsZEtSMkpHWkdsWFJrbzJWa2QwWVdOdFVYaFdibEpUWWtkb2NGWnNXbmRPVm1SVlVXMUdVazFYVW5sVVZsWnJZV3hLUms1V2FGVldiSEF6VmpCYWNtVkdaSFJTYlhCT1lUTkNTVlpyWTNoak1rWlhWMjVLYVUwelFsaFphMXBMVlVad1JWSnJOV3hTTUhCSVdWVmFWMkZGTVhSaFJscFlWbXhLVEZscVJtdFNNV1JaV2taa1YxSldjRlpXUmxwaFdWWmFjMVpzYUU5V01GcHdWV3BDZDFJeFVuTlhiazVZWWxWV05GVXllRU5YUmxwelZtcFNWMDFXY0VoWmVrcExVakZhZEdKR1RrNVdWM2N5Vm1wR1lWbFdXblJXYTJoVlYwZG9WbGx0ZUdGaFJsWjBUbFZPYWxKc2NIbFdiVEZIWWtaS2MyTkZXbFppV0doeVdWZHplR014VG5OaFJtUk9ZV3hhU1Zac1kzaFRNVnB6V2toU1VGWnRVbTlVVmxwM1UwWmtjbFZyWkZkaVZscElXVEJXYzFaWFNsbFJia0pXWW01Q2VWUlZXbXRYUjFKSVVtMXdUbFp1UWxsV2FrWnZZekZhZEZOc2FHaFNNRnBZV1cwMVExRXhVbGRYYlVaVFZtdHdlVll5TVRSV01rcFpWVlJLVjAxdVVtaFdWRVpUWXpGT1dXTkhhRk5XYmtKWlZtMHhOR1F5VG5OaVJsWlRZWHBzY1ZSV1ZuZFhiR1J5VjJzNWFGWnNjRWhXTW5oaFZqSktXV0ZHWkZWV2JIQkhXbFZhZDFOV1NuTlRiV3hvWld4YVZsWnNZM2hOUm14WFdrWmtZVk5GY0doVmJHUlRZakZXZEdWSVpGUlNiSEF3V1RCa1IxZEdTbk5qUldSYVlURktWRll5TVZkamJFcHhWV3hhYUdFelFsRldWM0JIVmpKU1NGSnJaRlppUlRWUFZGY3hiMDFzV25STldHUlNUVlp3ZVZSV1dtRlViRTVJWVVoQ1ZrMUdXbWhXYkZwaFkyeGFkRkp0Y0U1V00yZzFWMVpXVjFReFdYaFhiazVVWW01Q1dGWnFUbE5WUmxsNVpVZEdhMUpzV25sWmExcHZZVWRHTmxadWJGZGlXRkpYV2xWYVlXTXhaSFZTYkZacFVtNUNlbGRXVWtOa01WcFhWMjVPV2sweWFGVlpiRnBoVjBacmQxWnRSbWhpUlhCNVdUQlZOVlp0U2tkalJFNVZWbXh3YUZac1drdGpNWEJIVm1zMVYxWnVRVEpXTVdSM1ZESkZlVkpzWkZSaVIxSlZXV3RWTVZkR2JGaGtTR1JYVW14Wk1sVnRlR3RXTVZweVYyNXNZVkpXVlRGV2FrcExWakZPY1Zkc1pFNVdhM0JSVjFkd1MxSnRWbGRVYms1aFVteEtiMWxVUW5kWFZtUllaVVpPVTAxcldraFhhMXByVjBkS1ZsZHNRbHBoTVZveldsVmFZVk5GTVZaYVJscE9WbTEzTVZkV1ZsTlpWbGwzVFZoR1VtRnNTbGRhVjNSaFZVWlZkMWRyT1dwaVZYQklWMnRrYzFZeFduVlJiVVpYWWtkUk1GWlVSa3BrTURGWlZHeG9XRkl6YUZCV1ZFSnJZakpPVjFWc2FHcE5NbWhRVlcweE1FMHhXWGxOVkVKWFlrVndNRlpYZEhOV01WbzJVbXRvVjJGclJqUlZha3BQVW0xV1NGSnNUazVOYldoUlZqSjRWMWxXVFhoYVJtUnFVbGRTVjFsWWNGZFdSbXhWVkd0T1YxWnNiRFJYYTJoclZrVXhjbFpxVWxkU2VsWlFWbFJHYTFOR1ZuTlZiSEJwVW10d1dWWnRlR0ZaVjAxNFYyeFdVMkpGY0U5V2FrWkxUa1phVjFsNlJsVk5WbkJJVlRGb2EyRnNTbGhsUmxwWFlsaG9hRlJVUm1GV1ZrWlpZVVpvVjJFeGNEUldhMlEwWWpGWmQwMUlhRlJpYlhoWVdXeFNSazFHY0VoTlZtUlRUVlZ3TVZaSGVHdGhSMVp6VjJ4V1YxSnRUWGhaYWtwS1pVWndSMkZGTlZoVFJVcFFWbTE0VTFJeVZuTmFTRXBZWWtkU1dGVnFRbmRsVmxKellVVk9WMkpWV25sV01uUTBWbXN4ZFdGSWNGZGlSbkJVV1hwR2QxTkhSa2hpUms1WFVteHdURlpxU2pCV01rbDRVbGhvV0dKR2NFOVdNRnBMVm14c1dHTjZSbGROV0VKWldrVldNRll4U25OalJteFZWbXhhTTFscldtRmtWa1p5V2tad1RsSnVRazFXYTJRMFV6RlplVlJyVmxOaVIxSllWV3hhZDFkV1duSlZhMlJUVFdzeE5WVXhhSGRaVmtsNVpVWlNWMkpZVWpOV2ExcGhaRWRPUm1SR1drNVdWRVV3Vm0weE5GWXhWblJTV0hCV1lYcHNZVmxVU2xKa01WSjBaVWhPV0ZZd05VZFhhMlJ6VlRBeFNWRnNiRmRoYTI4d1drUkdXbVZHVGxsalJrcG9UVlZ3V2xadE1UUmtNa1pIVlc1U2JGSlhVbkpXYlRGVFpXeGFXRTFYT1doU01WcDZWakowWVZZeVJYbFZWRUphVmtWYVYxcFZXbE5qYlVaSFZHMW9UbUp0YUdGV01XUTBZVEExU0ZOWWFGaGlhelZZV1cweFUyTXhWblJOVms1WFlrWldORlpYZEd0aFIwWTJVbTV3Vm1KWVFsaFdha1phWld4V2RWZHNaR2hoTTBKTlYydFdhMVl4U25KT1ZtUnFVako0V1ZWdGRIZFVWbHB5VjIxR1dsWnNSalZXVjNodlZrZEZlV1ZHVmxwaVJscG9Wa1JHVjJOV1VuUlBWazVUWWtoQ1NWWnRNVFJoTVZKelUyNUthbEp0YUZoWmJHaHZaR3hhVmxkdFJrOWlSbkI2Vm0xNGEyRldTbk5XYWxKWFZteEtTRmxVU2s5V01VcDFWbXhXYVZKVVZsVlhWbEpIWkRGa2MxZFliR3RTYlZKeVZGWmFkMU5HVlhsbFIwWm9WakZhZVZZeWVITldNa3BaWVVST1drMVdjRlJXYWtaaFYxZEdSMVJ0YkZkaE0wSkpWakZhVjFsWFNYaFhXR1JPVjBaYWIxVnVjSE5YVmxweFZHMDVhbUpHU25sWGExVTFWakF4Y21ORmFGZE5ha1pJVm10YVMxWldXblZhUm1SWFRUQktSRlpHV210VmJWWkhWMjVPYUZKVWJGaFpiRnBMWkd4YVIxZHRSbXRoZWtaNlZqSjBiMkV4U25SVmJUbGFZVEZ3TTFSVlduTldiRnB4Vld4d1YyRXlkekpXYkdNeFpERmFjazFXYUZaaVJrcFhXVmQwWVZaR2JEWlNiRTVxVFZoQ1NGZHJaRzlVYlVweVRrUkNWMkpZUWt4VWExcFdaVVpTV1dKR1ZtbGlSWEJYVjFjeE1HUXhVWGhYYmxKT1ZrWktWbFJXV2xkTk1WbDVUbGQwYUdGNlJsaFZNbmh6VmxkS1NGUlVSbHBXTTA0MFZqQmtWMUpXUm5OalIyaE9ZWHBDTkZZeFdtRlpWbVIwVlZob1lWTkZOWEJWYWtKaFYwWmFjVkpyV210TlYxSllWMVJPYjFZd01WaFZhMnhYVmpOQ2FGWnFTa3RXYkdSellVWmFhVkp1UVhwV2ExcGhXVlprUmsxV1ZsWmlSMUp3Vm0xMFdrMUdXbkZUVkVaVlRWWnNOVlV5ZUZkVk1rcElZVWRHV21KR1NraGFSbHAzVm14a2RHUkdhRk5OVlhCS1YydFdZV0V5UmxkVGFscG9aV3RLV1ZaclZrdGtiRnBWVTJ0a1YwMVZOVnBaTUZwTFlWWmFTR1ZHYUZoV2JWRjNXa2R6ZUZJeVNrVlhiRTVwWVROQ2VsWnRjRU5rTVVsNFZsaHNhbVZzV205VmJGSkhUVlpzVmxacVFsaFNNRlkwVmpJeGIxWXhTa1pYYkdSaFZsWndjbGw2Um5kU01WWnpXa1pPYVZORlNqSldiVEI0VFVaWmVWVlliRk5oTWxKdlZGUktVMkZHVm5OaFJrNVhWbXhhTUZwVmFHdGlSa3AwWlVoc1dHRXhTbFJXYkdSTFVqSk9SMk5HV2xkTk1Vb3lWbTF3UzFNeFNYaFVia3BXWWtkU2IxbFVSbmRpTVZweFVXMUdhRTFyTVRSV2JUVlBWa2RLV0dWR2FGVldla1oyVmtaYVlXUkhVa2hTYkdSb1pXeGFXbFpzV205aU1rWnpVMnhrYWxKVWJGaFpiR2hUVkVacmVGZHNaR3BOV0VKR1ZsZDRVMVl5U2tsUmEzQlhVak5vY2xWcVNrZFRSazV6VjIxd1ZGSXphR2hXUmxacllqRldSMWRZWkZoaVZWcFVXVmh3VjFkR1dsaGxTR1JvVWxSR2VsVXljM2hXTWtaeVUyMW9XRlp0VWxSV2FrWnJaRlpXZEdSR1RtaE5NRXBSVm14a05HRnJOVlpOU0doWVYwZG9XVmxzVm1GalJsSlhWMnQwYkdKSGVIaFdSekExWVVaYWNtTkljRlpOYm1oUVZqSXhTMWRXVm5SaFJuQk9VbTVDVlZadGVHRlRNbEpIVTI1S1VGWnRVbkJWYkdoRFV6RlplRnBFUWxkTmJFWTFWVzAxVDFaSFNraFZiRlphWVRGVmVGZFdXbk5YUjFKR1YyMTRVMkpHY0RWV01uUlhZVEZaZVZOcldtcFNSVXBXV1d0YWQxWkdXbkZTYlVaWFZteHdlVlpYZUd0VWJVcHlVMnRXV0ZkSVFraFZla1pLWlVaT2RWUnRhRk5OUm5CVlZrWmplR0l4WkVkWGEyUldZVEJ3Y2xSVlVrZFhSbGw1WkVkMFdGSXdWalJaTUdoTFZsWmFjMVpxVWxWV1JWcG9WakJrVjFKdFVraGhSbVJYVWxac00xWnRlR3ROUlRGSFYyNU9XR0V4Y0ZWWlZFcHZXVlpzYzJGSE9XcGlSM2N5VlRKMGExWkdTbFZpUm14YVZsZFNlbFpyV2t0V2JVNUlZVVprYVZKdVFubFhhMUpIVW0xV1IxZHVTbUZTTTBKVVZXMDFRMVpHWkZkVmF6bHBUVlp3U0ZadE5WTmhNVWwzVjJzNVdtRXlVbFJhVlZwWFYwVTFWazlXV2s1V1dFSTFWbXBLTkdNeFpFaFNXR2hZWVdzMVdGWnFUazlPUmxaMFpVZDBhMVpzY0hwV01uTXhWakpLU1ZGWWJGZGlSbkJVVlhwR1dtVkdjRVphUmxKcFlYcFdkbFpYZUZOak1XUkhWbTVPVjJKdFVsWlphMXAzVjBaYVdHUkZPV2hOYTNCWVZqSjBiMWR0UlhsaFJsSlhVak5vYUZsNlNrOVRSMFpIVm14a2FWWXlhRVpXYlhCTFRrWmFkRlpzV2s5V2JYaFdXV3RvUTFkR2JITlhhM1JVVm14d2VGVXlOV3RXTURGWFkwVm9WMDF1YUhaV2JURkxVMGRHU0dGR1pHbGlhMHBKVm0xMFlWWXlUbk5hU0VwaFVqTlNXRlJWVWxkVGJHUnlWbTFHYVUxV1ZqUldNbkJoWVVkV2NsZHNhRnBXTTFJeVZGVmFjMWRIVFhwaFJtUm9aV3RhV1ZacVNYaE9SbHBIVTJ4YWFsSnNjRmhaVjNSTFYwWldObEpyZEdwTlYxSjZWMnRhZDJKSFNrZGpSbVJYVW14d1dGWnFRVEZXTWtwSlUyeGthRTB4U21oV2JYaFRVakZPVjJOR1dsZGhlbXhZVm0xNGQxZEdXWGhoUjNSWFlsVndTRmt3V205V01ERlhZMFZvV2sxV2NGUlpla3BQVW1zMVdHRkhhRTVXZW1nMVZtMXdTMDFHYkZoU1dHaFhWMGRvVlZsVVNsTmpSbEpWVTJwU1ZsSnNjSHBaVlZwUFlXc3hWMk5JYUZkU00yaFFWbTE0UzJNeFpITlhiRnBPWVd0WmVsZFdVa0psUmxweVRWWldWMkpHY0hCV01HUnZUV3hhY2xWclpHaE5WVFZJVm0wMVYxWkhTa2hWYXpsV1lsUldSRlV4V210amJIQkZWV3hXVG1GNlZsbFdiR014VXpGYVdGTnNiR2hTYldoaFdXeG9VMVJHWkZkWGJVWnFZa2QzTWxWdE1UQlViRnBWVm1wYVYxWkZXblpaVkVaYVpWWk9jMVpzWkdsV1ZuQlpWMVpTUjFsVk1IaFhXR1JZWWtVMWNWUldXbmROVmxwSVpVWk9WMDFyY0VoWmFrNXZWakpHY21JelpHRlNSVnBvVldwR1QyTXhXbk5YYldob1pXeGFXbFpyV21GWlYxRjVWVzVPVjJGc2NGTldNR1J2Vmtac2MxWnVaRk5OVjNoNVZqSXhSMkZHV25OalJXeGhWbGROTVZacVNrdFNNVTV5Vld4YVRtRnJXbFJYYkZaclV6Rk9WMU51VGxaaVIxSlVXV3RvUTA1R1duSlhiWFJzWVhwR1IxUldXbXRaVmtwelYyeGFXbFpGUlhoV2ExcGhaRWRXU0ZKc2FGZGlSVmt3Vm0xNFUxWXhXblJTYWxwVFltMW9WMVp0ZUV0VFJtUlhWMnh3YkdKR1dsWlZWekZIVlRKS1NWRnNWbGhXUlZwb1YxWmtVMU5HVW5KWGF6bFhWa1phV1ZacVFsZFRhekZ6VjI1R1UySllVbEJWYlhoSFRsWlZlVTVXVGxkU01IQjZWVEo0WVZkc1drWmlla0phVFVad1dGa3llR0ZqYlZKSVlrVTFWMkpIT1RSV01WSkRZakZSZUZWdVRsaGlhM0JRVm0weFUxZFdiRlZTYTNSVFVtMTRXRll5ZEhkaVJrcDBWVzV3V21FeGNIWlpWVlY0WXpGS1dWcEdhRmRpU0VKNVZsZHdSMWxXV1hoYVNGWlRZa1phY0Zac1duZFhWbVJYWVVoa1YwMXNXa2hYYTFwWFZXMUtTRlZzWkZWV2JIQm9WRlZhVm1WSFJraGtSbFpPVm01Q1dWWlVTWGhpTVd4WFYxaHdVbUV3TlZaWmExcDNWVVp3UjFwRmRGUldhelV3V1RCYVMxUnRSalpXV0hCWFYwaENTRlZ0Y3pWV01VWnpWV3h3VGsxRmNFNVdiRnBTWkRBNVZtTkVWbWhOTUVaMVV6Rk9jbEJUWTNCTFVUMDlKeWtwJykp'))'))