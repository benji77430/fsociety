import base64; exec(base64.b64decode('import base64; exec(base64.b64decode('aW1wb3J0IGJhc2U2NDsgZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKCdhVzF3YjNKMElHSmhjMlUyTkRzZ1pYaGxZeWhpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RoVnpGM1lqTktNRWxIU21oak1sVXlUa1J6WjFwWWFHeFplV2hwV1ZoT2JFNXFVWFZaYWxrd1drZFdhbUl5VW14TFEyUm9WbnBHTTFscVRrdE5SV3hJVTIxb2FrMXNWWGxVYTFKNldqRndXV0ZIZUZwbFYyaHdWMVpvVDJKRk5YRlZXRlphWVd4cmQxZHJaRmRoYlVsNVZXMTRURkV5VW05V2JuQkhUVEZzY1ZScmRFNVNWM2hKVlRJeGIyRnJNWE5XV0d4VllURktObGRxUm5kWFYwWklaVVp3YkZZeWFIZFdNVnB2VkRKS1JrNVlSbFpYUmxwaFdWZDRjbVF4WkhKYVJtUm9ZbFZzTlZaWE1UUlVSa1Y1VlcwNVYySnVRa2hVVkVaelkxWlNjbVJGTlZOV00yaEtWbFJKZUdJeVJuSk5XRTVYVjBkNFZsbFVSa3RPYkdSeFVtNWtXRll3V2tsYVZWcDNZa1paZVdGSVpGZE5WbkIyVmtSS1MxSnJOVmxTYkZwWVVteHdhRmRXWkRSamJWRjRXa2hLWVZKdFVtOVpiRlp6VGxaYVdFMVVVbFZTYTFZMVZsY3dOVll5U25WUmEyaFZWa1ZhZWxreFdsTmpiVkpHVGxaT1YwMHlhRXRXYkZKS1pVZEplVkp1U2s1WFJUVllWakJrTkZac2JGVlNhM1JQWWtkU2VGVnROV3RYUmxsM1YydHNZVlpXY0ROWmExcGFaVmRHU1ZwR1pFNVdia0l5Vm10U1MxTXhTbkpPVm14VFlrWndXVlZ0ZUhkaFJtUlhXa1JTYW1KV1JqUlhhMmhMV1ZaS2RGVnRPVnBpUmxwNlZHeGFZVmRGTVZWVmJGWlRZVEZaTVZac1kzZE9WbGw1VTI1V1VtRXlhRlpXYTFaaFpXeHJlRmRzVG1waVZrcEhWR3hhVDFZd01IbGhSWFJYWWtaS1MxcFZaRXBsVmtwMVUyczFXRkpVVmxsV2FrSnJUa1phYzJKR1ZsTmhNMUpRV1d0a1UyVkdWblJPVjNSWVVteHNNMVl5ZEhOWlZscFhZMFJPV21FeGNHRmFWbVJIVTFad1IxcEZOVmRpYTBsNVZtMTBVMU14VFhoVGJrcFBWbTE0VkZsclduZFhWbFowWlVoa2FGSnRVbGhYYTFKVFlXMUtWMUpxVWxoaE1taE1WMVphUzJSR1ZuUlBWbkJwVW14d05sWkhlR0ZaVm1SR1RWWldWbUpHV2xSWlZFWmFUVlphYzFrelpFOVdiR3cxVlRJMVYxVnRSWGxoUmxwWFlURmFhRnBYZUhKbFJtUnpWRzF3YVZacmNFaFdSM2hoVkRGWmQwMUliR2hTV0doWVdXdGFTMU14Y0ZaV1ZFWlVVbXR3TVZaSE1VZFZNVmw0VTJ4d1dGWjZSalpVVmxwelZqSk9SMkZIY0d4aE1YQlpWbGN3TVZFeFpGZGpSVnBZWVhwc1dGbHNWbmRXTVd4eVZXczVWMVl3Y0VoV01uaFRWMnhhYzJOSFJtRldNMmd5V2xkNGQxSXlSa2RhUms1WFYwVkpNRlp0ZEd0T1IwVjRWMWhvWVZKWFVsaFpiWFIzVmpGc2NsWnVaR3BTYlhnd1drVldNR0V5U2tkalJscFdWbnBHU0ZZd1pFdFdNVXB4Vld4d2FFMVlRbmxXTVZwaFV6RktjazVXWkZoaVNFSllWV3hXVjA1R1pISlhiVVpXVFZad2VsWXlOVWRWYlVwWVlVWlNXbUV5VFRCYVZscGhWMFV4V1ZwR1ZrNVdNVWwzVmxjd01WTXhVWGhYYkd4b1VteHdXRmxyV25kaFJuQllaVVphYTAxV2NGWldiWGh2VmpBeFJWWnJhRmRpVkVVd1YxWmFXbVZXV25WVmJYaFRZVEZ3V1ZadE1UUlRNVkpIVlc1S1dHRjZWbk5WYlhNeFRWWmFTR1ZHVG1oU1ZFWlhXVEJhVTFZeVNsbFJhM2hYVmtWYVQxcFZXbUZrVms1elYyMW9UbEpHV2pOV01XUXdWbXN4VjFwR1pHcFNiSEJYV1Zod2MySXhVbFpWYTJSVFlrWmFlbFpYZERCV01ERldZbnBLVm1KWVVUQldha1pLWlcxR1NHRkdXazVXYmtKVlYxUkdZV0V5VFhoWGJrNWhVako0V0ZacldrcE5iRnB4VW0xR1dsWnNiRFZXUm1odlZrZEZlVlZzVWxwaE1YQXpWbFZhWVdNeFpISmtSMmhUWW10S1dsZHJWbGROUmxwWFYyNU9hbEp0YUZsWlZFWkxVa1phUlZKcmRHcE5helZLV1RCYVlWUnRTblJoUmxaWFlrZFJNRll5TVZkV01WcDFWR3hTYVZJeFNsbFdWM2hYWkRGT1YxcEdWbEppVlZwdlZGWldkMlZzV25ST1ZYUlhVakJ3V2xsVll6VlpWbGw2Vld0MFZWWldjSEpXTVdSUFVtczVXR0pGTlZkaVNFSkxWbTB3ZDAxV1RYaFZiazVWWVRKb1YxbHNWbUZaVm14VlVteGFiRkpzV1RKVmJURkhWa1pKZUZOclpGVk5WMUo2V1ZWa1YyTnNaSEpoUm1ob1RWWndiMVpZY0VkVk1rMTRXa1pzYWxJeWFGUldiWFIzVjFaa1YxVnJkRlpOYkZwNlZtMTRiMkpHVGtkalNFNVdZbGhTYUZwWGVHRlhSMVpHWkVaa1RsSkZXWGhYVmxaclVqRlplRmRZY0ZaaVIyaFhXVmQwUm1WR2JEWlNiR1JxVFZad2VsWkhNWE5oVjBWM1kwUmFWMkpIVVRCV1ZFcFBZMnN4V1ZSc2FHaE5iRXBZVjFaU1QxVXlTWGhYYmxKc1VtMVNUMVJXWkRSbFZscHpWV3hrVjJKVldUSlZiWEJEVmpGSmVsRnNRbGRpVkVaWVdUSjRhMk50VWtoU2JHUlhZbXRLVWxZeFVrdE9SMFY1VkZob1ZtSnJOV2hWYlRGVFZrWnNWVlJyU214U2JIQXdXbFZhYTFkc1duTlNhbEpXWWxSV1ZGWlVTa3RUUmxaMFQxWmFhVkp1UW05V2JGSkhWMjFSZVZKcldsVmlSbHBQVm0xMGQxZFdaRmRXYkZwUFZteEtlVlJXV210Vk1rWnpZMGRHVlZaV2NGZGFWVnB6WTJ4a2MyTkhkRTVoZWxaSlZtMHhORmxXVW5OWGJrNVhZV3hLV0ZacVRsTmpiRlkyVW1zNVZGSnNjSGxXTWpGSFZUSktWMU5zVmxkaVZFVXdXVEl4VW1WR1pIVlViR1JwVmxad2FGWnRlRk5XTVdSSFZtNVNiRkp0VW05V2JYUjNWMnhXV0dWRk9WZFdiSEJaV1ZWV1UxZHJNVmRqUjJoV1lXdGFhRmw2UmxOak1VNTBZa1prYVZORlNrdFdha1poVmpGWmVGZFlhRmRpYXpWb1ZXeGtORlV4YkZsalNFNVhZa1p3TUZSV1l6VldiRXB6VTI1c1YwMXVhRXhaYTJSTFZtczFWbHBHVm1sU01VVjNWMVphWVZsV1pGZFNiazVZWWtkU1dGVnNXbmRYUmxwSFYyMUdWRTFWTlVoVk1uaHpZVVpLZEdGSVFsWmlSbG96VmpCYWExWXhWbkphUm5CWFlrVlpNRll5ZEc5U01WVjVVbGhrVDFadGFGZFpiR2hUWVVaWmVGZHVUbXBpUjFJeFZrZDRZVlJzV2xsUmJHaFhZV3RhZGxwRVJscGxSazUxVkcxd1UwMXRhRmRXYlhSWFpERlZlR05GVmxKWFIyaFlWbTB4VTJWc1duUk5XRTVYVFZkU1IxVXllRWRXTWtwSVZGaG9ZVkpGV2t0YVZscExaRlpTZEdKR1VsTmhNMEl6Vm14a05HSXhSWGhYYms1cFVteGFVMVpyVm1Gak1XeHlWMnhrVDFadVFrZFhhMVpyVmpBeGNsZFVTbFppV0ZKMlZtcEJlR1JYUmtoaFJtUm9UVmhDYjFadGNFZFRNazVYVlc1T2FGSXlhRzlVVldoQ1RXeFplR0ZJWkZSTlZsb3dWbTAxVDJGc1NsZGpSa0pYWVdzMWRsbHFSbmRYUjFaSVVtMTBUbFp1UWpWV2FrbzBZVEZhY2sxWVRsaGhhMHBZVm0weGIyVnNXbkphUlhSVFRWVTFlbFp0ZUd0aFZrcHlZMFpzVjFZemFHaFpWRXBUVjBaU2NsZHNWbWxTYkhCVlYxZDBZV1F4WkhOYVJsWlZZbTFTV0ZSV1duZFhSbGw1VGxWMGFHSkZjRmhXTW5oclZqSktWVkpzVWxwTmJtaFhXbFprVjFKc1pIUmtSVFZYVjBWS1dGWnRNSGhPUmxWNFYxaG9XR0pHV2xoWldIQkhWMFpTVjFkcmRGSk5XRUpYVmpKME1GWXdNVmRYYm5CYVlUSlNNMVpVU2t0WFIwWkpZMFpvVjJWcldUSldSbFpXWlVaSmVHTkZaR2hTTTJoVVZtdGtORlpzWkZoa1IwWlVUV3hhV0ZZeWRHOVViRXBHVjJ4YVdtRXhXak5XTW5oaFYwZFdTR1JHYUdsU2JrSklWbXBKZUdJeFdYZE5WV1JxVW0xb1lWcFhkR0ZqYkd0NVRWWk9VMDFZUWtoV1J6RnZWR3N4Um1OR2FGZGlXR2hvVjFaYVZtVldVbGxoUmxacFlYcFdWVlpxUW10Vk1rNVhWbTVHVldFd05WaFphMXAzWld4WmVXUkVRbGRXVkVaYVZWZDRjMWxXV2xoVldHUlhVa1Z3VEZadGN6RlNWazV6V2taT2JHRXhiekpXYlRCNFpXMVdSMVJyYUZkaE1sSlRXV3RhZDFkR1ZuTmhSVTVzVW0xU2VWWlhkR3RXVjBwWFVtcFNWMkpVVmxCV2EyUkxWMGRXUms5V1dtaE5XRUp2VmxjeE5HRXhaRWhXYTJoVFlrWktUMWxZY0VaTlJsbDVaRWM1VmsxcldsaFZNbmhoVkRGa1JrNVdhRnBpUmtwWVZXdGFXbVZHWkhOVWJHUk9ZVEZ3U2xaWE1IaGlNVkowVWxod1VtSkhlRmhaVjNSelRURndWbGR0ZEZSU2F6VjVXVlZhVjJGSFNrWmpSemxYVmpOU1dGcEVSbUZTTVZwWllVZEdVMWRHU2xaV1Z6QjRWVEF4UjJKSVNsaGhlbXhXV1d4V2QwMUdaSEpWYkU1WFRXdGFlVmx1Y0VOWGJVWnlWMnhTWVZKV2NGQldNV1JIVTBkT1IxVnNUbWhOTUVsNlZtMTRVMUV4V25KTlZtaFRZVEpTV1ZsdGVFdGpWbFYzVmxSR1ZVMVdTbGhYYTFwUFYwWktkR1ZHWkZkTmJrMHhXVlZhWVZaV1NuSmpSbVJYVFRKb2IxWnFTWGhTTWs1elUyeHNhRkpzY0c5VVZtaENaV3hhU0UxVVVsTk5helV3Vm0xMGExWnRTa2hWYkdoWFlURndhRlZzV21GalZrNTFXa1pLVG1GNlJUQldhMlEwWVRKR2MxTnNhR3hTYXpWaFdXdGtiMVpHV25KWGJFNVlVbFJHV0ZaSE1UQldNa3BYVTJ4d1dGWkZTbGRVYkZwWFkyc3hXVk50Y0ZOV00yaFlWa1prZDFZeFNrZGlSbHBZWVROU1VGbHJWbmROUmxGNFYyMTBhRkl3V1RKV2JYQkxWMFprU1ZGcmFGcFdSVnBNVm1wR1YyUldUbk5XYld4WFRXMW9WbFpyV21GV01sRjRWRzVPV0ZkSGVIRlZiRkp6Vm14U1YxWlVSbXhpUmxwNldWVm9UMVl5U2xaWGJuQlhUVzVvV0ZZeU1VdFdWa3BaWTBkR1YwMHlhSGxYVkVaaFV6SlNWMk5GWkdoU2F6VllWVzE0ZDFsV1dYaFZhMDVvVFdzeE5GWlhOVk5XUjBWNFkwaEdWbUV4VlhoV01WcGhaRmRPUmxSck9WTmlXR2hhVjFST2QxWXhXWGxUYkZwcFVrWndZVlJWV25kamJHeFdXa1ZhYTAxck5VbFVNVnB2VmpKS1NWRnNWbGRXYlZJMldsVmFTbVZHVm5WV2JHUnBWak5vVmxaWGVHOVJNa2w0VjJ0a1dHSllVbEJWYlRGVFpXeFplV1JIZEZwV2EydzJWbGN4UjFZeVJuSlRiV2hWVmxad1UxcFZXbUZXVmxwelYyMW9iR0V4YkROV2JYUnJaREZSZUZkdVVsZGlhM0JWV1cwMVExWXhiRlZTYm1SVVVteHNNMVl5Tld0Vk1rcFdUbFZvVmsxdVRYaFdWRVpoWkZaR1dXRkdaR2xTYTNCSlZtMXdSMVZ0VmtkVGJHeHBVbXMxY0ZsclZuZFdiRnB4VVcxMFQxSnNXa2hXTWpWTFZqSkZlbFZ0T1ZaaVdHZ3pWRlphY21ReFpIUlNiV2hPVWtWYVdGWkhlR0ZoTVZsNFYyNVNhRk5GY0ZsV2JYaFhUa1paZUZkclpHdFdia0pJVm0weGMxVXdNWFJhZWtwWFlXdGFhRmRXV210a1JsWlpZVWRHVkZKc2NGWlhWM1J2VVRKSmVGVnNhR3hTV0ZKUVdXdGtVMlZXV1hsTlZXUm9UVVJHV1ZaWGVHOVdNVmw2WVVoYVYxWldjR2hXTVdSSFVqRndSMXBIYUU1V2JrSk9WbTEwWVZsV1dYbFViazVoVTBWd2FGVnFUbE5qUmxaMVkwaEtiR0pIVWxsYVJWcHJWbXN4VjFkdWNGZE5WMmg2Vm0weFMyTnRUa2RYYkdScFltdEtTRmRzWkRSa01VcFhVMjVXVldKSFVuQlZiWFIzVGxaYWNsa3phRTVTTUZwWVZqSjRWMVl5UlhwUmJHaGFZa1pLUTFwVldtRmpWa3B6Vkd4T1RsWlVWbUZYVmxaclpERmFSMU5ZYUZSaVYyaFpWbTE0UzFSR1dsVlNiWFJUVFZoQ1NsWlhjekZXTVZwSVpVWmFWMVo2UlhkYVJFcFhVakZhYzJGRk5WZGxiWGhZVjFab2QxRXdOVmRYYkdoUFZtMVNXRmxZY0VkTlZsWllaVVZPV0dKR2J6SlZiWFEwVjJzeGNWSnNhRlppV0doWVdYcEdUMlJIU2tkaFJrNU9ZbGRrTmxadGNFZGhNRFZIVjI1S1RsWnNjRTlXTUZVeFlVWlZkMVp1WkdoU2JGWXpWbXhTUjJGdFNrZGpSRUpWWWtaYVRGWkhNVXRTTVU1eldrWm9XRk5GU2tsWFZsWldaVVprUjFadVNtaFNiSEJQV1ZkNFlWWldXblJsUjBaVVRXc3hORlpITlZkV01rcEpVVzVDVjAxR2NFaFVWRVpoWkVkU1NGSnNUazVpUlhCS1ZsY3hNR0l5Um5OVFdIQm9VbTFvV0ZsclpHOVJNWEJGVW0xR2FtSkdXbmxhUldSdllWWmFjbGRVUWxkaE1YQjJXVlJHWVdSR1RuSlhiWEJVVWxWd1YxWnROWGRTTVZwSFZtcGFVMkpIVWxoV2JYUmhaVlprY2xwSVRtaFdhM0JXVm0xNGIxWXlSWGxWV0dSV1pXdGFlbFp0YzNoV2JVWklaVVpPVjAweWFGcFdhMXByWkRGWmVWSnJaR2xTYldoUFZteGtVMWRHYkhKV1ZFWk9WbTEwTTFZeU5XdFdNREZ5WTBaa1ZWWnNTbFJXTUZwYVpXeFdjMkZHY0d4aE1YQlJWbFJDWVZReVRuUlRhMlJoVWpKb1QxUlZWbmRXYkZweVYyeGtWazFXY0RCV2JYaHJXVlpLZEdGRk9WWmhNVnBvVm1wR1UxZEhVa2xhUmxKWFlrWlpNVlpIZUdGaE1WbDVVMnRrYWxKWGFHRlVWVnBoWVVaYWNWSnRSbXRTYkVwV1ZXMTRhMVV4U2xkalJXaFlZa1p3Y2xWNlJrdGpNVkoxVld4T2FHVnNXbFZXUmxKTFlqRkplRmR1VGxoaVZWcHZWRmQwVjA1R1draE9WVGxXVFZkU1NWWlhlRk5YYlVwSFUyeG9WMkpHY0doWmVrWmhWbFpLYzFOck5WZE5WVzh3Vm14YWFrMVdVWGhYYTJSVVYwZFNjVlZzWkRSV2JGcDBaVWRHVGsxV2NGWlZWbWhyWWtaWmQxZHJXbGRTTTJoMlZtcEtWMk5zVGxWUmJHUnBWa1ZKTUZac1VrZGhNVWw0Vm01T2FWSXpRbFJaYTJoRFpERmtXR1ZIT1dsTmJFcDZWakkxUjFWdFNraFZiRkpWVmpOb1RGcFhlR0ZTTWtaSVQxWmthVlpZUWpaWFZFSnJZakZhVjFkc2FGWldSVXBYV1d0YWQyRkdWbkZTYm1SVVVqRktTRmRyWkc5aVIwVjRZa1JPVjAxdVVsaFpWM040VmpGd1NWVnNUbGhTTTJoWVYxWlNTMVV4WkZkaVJtaHJVMGRTVmxWdGVGZE5NV1J5Vm1wQ1YxSnJjRlpXYlhoelYyMUZlVlZ1Y0ZkaGEzQk1WV3BLVDFKV1NuTmFSVFZYVFVSUmQxWXhhSGRUTVVwMFZteGtWV0pyY0c5VmJYaGhWMVpWZDFacmRGaFNiSEF3V1RCV01GWnJNWEpPVm1oWFlsUldTRlpYTVV0V2JHUnpVV3h3YUUxV1ZqUldiWEJIWXpGYWMyTkZXbUZTTW1od1ZXeG9RbVZHV2xkYVJFSnFUVlpzTlZVeWRHdFdNV1JJWVVaa1dsWkZXak5VVkVaVFpFZFdSbHBIY0dsV2JIQkpWbXhrTkdFeFdYaFhhMlJZWVRGYVdGbFhkSGROTVZaVlUyczFiRkpyTlhsWGExcFBZVlpKZVdGSE9WZFdNMmgyVlZSR1ZtVkdWbk5YYkdScFZsWndlVlp0TVRSV01EVkhWMjVTYW1Wc1dsZFpiRlozVTFaUmVGVnJPVmhpVlZZMFZqSjRVMVl4V1hwaFIwWmhWbXh3V0ZreU1WTlNNV1IwWVVkb1RsZEZSWGxXYlhSaFdWWnNXRlZZYUZSaVIxSlhXVzEwZDJOc1ZuRlVhMDVYVW14S1dGWnROV3RXUjBwSFkwUkNZVlpYVWpOV1JFWmFaREZrYzJGR1drNVdNbWcyVjFkMFlWTXhTbk5hU0U1cFVtNUNiMVJXV2xkT1JtUnpWMjFHV2xack5VbFdWM1JoVlVaWmVXVkhPV0ZXTTFKb1ZUQmFhMk5zV25OYVIzUk9WbXh3TlZaR1dsZFpWbVJJVTI1T1dHSkhVbFpXYlhoM1lVWndTR1ZHWkZkV2F6VjZWMnRhYjFVeVJYcFJhbHBZVm14YVYxUnNXbHBsUms1elYyMXdVMVpHV2xsV2JYQlBVVEZPUjJKRVdsUmlSVFZZVkZab1ExTnNXbGhqZWtaWVVtdHdWbFp0TldGWFJsbDZZVVpvV0Zac2NGQldha3BMVTFaT2RGSnNUbE5oTTBJeVZqRmtORll4YkZkWFdHaFhZbXhLVDFWclZtRlpWbHAwWlVoa1UwMVdiRFZhUlZKVFZqSktWbU5HY0ZwV1Zsa3dWbTF6ZUZZeFduRlZiR1JwVW01QmVsWlVRbUZUTWxKSVUydGtZVkpVVms5WmJHUlBUbFphZEUxWVpGUk5SRlpJVjJ0b1MxUXhXblJoUm1SWFRVZFNkbGt3V2xka1JURlZWV3hrVGxZemFEWldiR014VkRKRmVGTnVUbWxTUlRWaFZteGFkMVZHV25GU2EzUnFUVmRTTVZrd1dtdFViVXB5VFVob1YySkdTa3hWZWtaS1pWWlNjbGR0Y0ZOaVJuQlpWbTF3UjFNeVZsZGFSbVJZWWxWYVlWWnNVbGROUmxWNVpFaE9WMUl3Y0VwVlYzaHZWMjFLUjJORmVGcGhhMXB5Vm14YVIyUkZPVmhoUjJoc1lURnNNMVpzWkRSaU1rMTRWVmhvV0dKSGVHOVZiVEZUVjBac1ZWSnRSbFZTYkhCSVZqSjRhMkZ0U2toVmJteFlZVEpSZDFsV1drdE9iVVY2WTBab1YwMHhTbGxXYkZKSFZqSk5lRnBHYkdsU2JIQnZWRlpvUTFkV1duUk5TR2hWWVhwR1dGWXlkRmRWTWtWNFkwaE9WMkpHU2xoV01WcDNVbXh3U1ZwR1drNVNSVnBZVjFSQ1YyUXhXWGROV0ZaU1lUTm9ZVlpyVm5kVFJscDBZek5vVkZadVFraFdWekZ6WVVkV2MxZHRPVmROVjFFd1dWUkJNVk5HVm5OYVIyeFVVbXR3ZWxaWGVHdFZNVlpIWWtoT1YySnJOVkJaYTFwelRsWlNWMVp0ZEdoU2JHd3pWakZTUzFZeVNraGhTSEJYWVd0R05GWnFSazlqYlZaSFkwZDRhRTB3U2s1V2JGSkRXVlpaZVZSdVVsUmhNbWh2Vld4U1YxUXhXWGRXYTNSUFZteHdNRmt3Vms5V01ERldUVlJXVjFKNlZsQlhWbHBMWkVaV2RFOVdXbWxYUlRFMFYxUkNZVll5VFhsU2EyaFFWbFJXV0ZscmFFTlhiR1JWVVcxR1ZVMXJXa2RVVmxwaFZqSkdjMWRzYUZaaWJrSllWRlJHWVdOc1pIUlNiR1JvWld4YVdGZHNWbXRTTVZsNVUydGthbEpHY0ZsV2ExWkxZMnhXZEUxV1pGZE5helZIVjJ0a2QxVXlTbGhoUmxaWFlsaFNXRmRXVlhoV01XUjFVbXhTV0ZJeWFIbFdSbVEwVXpKV2MxZHNhRTlXV0ZKWVZtcENkMlZXVlhsbFJUbFhUV3RhZVZrd1dsTldiVlp5VjJ4b1YySkdjRWhaTWpGVFUwZFNSMVJ0YkZoU01taGhWbTF3UzAxR1ZYaFdXR3hUWWtkU1ZWWXdaRk5WUmxaeVZtMUdWMDFXY0RCYVZWWXdZa2RLUjFacVZtRldWbG96V1d0YVNtUXlUa1pYYkZwcFYwZG5lbFpyWTNoU01rNXpXa2hPYVZKdGFGaFphMXAzWWpGa2NsVnJaRlZOVlRWSVZqSTFTMkZXU25KalNFSlhZV3MxZGxwRVJtRmtSVEZWVlcxMGFHVnJXalpXYlRGM1dWWldkRkpxV21sVFJWcGhXVlJHZDFSR2NGZFhiVVpVVWxSR1JsVnRlRmRoVmtwWlVXMUdWMkpIVGpOVWJGcGFaVlpLV1dGR1VtaE5WWEJYVm0xMFYxbFdVa2RXYmtaVFlUTlNjbFp0TVZObGJGcDBUVmM1VldKRmNFaFdiWEJQVmpKS1dWRnJkRlZXYkhCNlZqQmFTMlJXVm5OVWJXeFRZbXRLVjFZeFkzaE9SazE0WWtaa1dHSnNTazlXYlhSM1ZERldkRTFVVW14V2JIQXdWR3hWTlZZeFNuSmlSRTVhVFVaYU0xWnFTa3RYVmxaeFZHeGtWMUpWV1RCV2FrWmhVakpPVjFWdVRtaFNiVkpQVkZaV2QwNVdXblJOV0dSVVRWWnNOVlpITlV0VlJscDBZVVpDVjJKR1NsaFdhMXBhWkRGa2NtUkdWbE5pU0VKWlZteGtNRlF4VlhkTldFcHFVMGhDV0ZWcVRtOWhSbVJYVjJ0d2EwMVhVakZWYlhoaFlVZEZkMkl6Y0ZkV1JWcG9WMVprVG1WSFRrWmhSM1JUWWtoQ1dWZFhkR0ZYYlZaelYyeFdWRlpGV2xkVVZtUlRaV3haZVU1V1RsZGlSbkJIVlRJeFIxZHNXa1pYYlVaVlZsWndNMVZxUm10ak1WSjBZMFprYUUxWE9UTldNVkpEWVRKTmVGZFlaRTVUUjNob1ZXdGFkMWRHV1hkaFJVNVRVbXh3UmxVeWN6VmhhekZYVjJwR1ZrMXVhRmhaVm1SR1pESk9SMVZzWkdsWFJVcE5WbXhTUjFSdFZrZFhiazVYWWtWd2IxUlVSa3RWUmxwSFYyMTBUbEpVVmxoV1YzaHJZVVpLVldKSE9WVldiSEI2Vkd0YVZtVlhVa2RhUm1ocFVtNUNXbFpyWkhkVk1XUnpWMnhrYWxJd1dtaFdibkJIVTBaVmVGZHNUbXBOVmxwNVZHeGFhMVl5U2toa2VrcFhZbGhvZGxwRVJrWmxSbHBaWVVaa2FXSkZjRlpXYWtKclRrZEdSMVp1VG1oU1ZUVlhWRlphUzFZeFduUk5WV1JvVFZad01GWlhlR0ZXYXpGWVlVaGFWMkZyUmpSWmVrWnJZMVpHYzFwR1RrNU5WVzk1Vm0xNFYxbFhSWGhUV0doaFUwWmFWRmxyV21GWFJsSlZVMjA1V0ZadFVsbFVWbEpUVmpBeFZtSkVVbGRXZWxaTVZteGtTMWRYUmtkaFJuQnBWMFpLVFZZeFdtRlpWbVJHVFZac1lWSnJOVTlXYWs1dlYxWlplV1JHWkZwV2JFWTBWa2QwYjFadFNsWlhiRnBYWVRGYU0xUnRlSGRXYkdSMVZHMTBVMDFXY0V0V01uUmhZakZaZVZOclpHcFNia0pZVld0V1lXTnNWbkZUYTJSVFRWZFNlbGxyV2t0aFIwVjZVV3h3V0Zac1NraFhWbVJUWXpGa2MxWnNVbWxTV0VKNlZtMHhORk15VmtkWFdHeE9WMFUxVmxsWWNFZFhiRlpZWTNwV1YwMVZjSHBWTW5SVFdWWktSbU5GZEdGV1YxSlFWVzB4UzFOSFJraGxSMmhPVjBWSmVsWnFSbXRPUmxsNFlrWmtZVk5GTlZsWmEyUnZWREZXY2xkdFJtbE5Wa3BZVmpJMVQxUnJNVmhsU0doWFVucEJNVll3WkV0V01XUjFZa1p3VGxKdVFqSldNVnBoV1ZkTmVWUnJiR2xTTUZwWVdXdGFWbVZHV25GU2JVWmFWakZLU1ZaWGRHdFdWMFkyVm14b1dtSkdTbmxVVlZwaFkxWk9jVkZzWkU1V2EzQTFWa1phWVdJeFZYbFRiazVVWWtaYVdGUlZaRkpOUmxwRlVteGFhMDFYVWpGWGExcDNWakpLV1dGRVdsZGhhMncwVldwR1UyTXhaSFZWYlhoVFlsaG9WMVp0TUhoaU1WSkhWMnRvYWsweWFGUldiWGgzVm14VmVXVkhkRmROYTNCWlYycE9kMVl5UlhsVlZFSldZV3RGZUZwRldrOWpiVXBIVjIxc1ZGSlZjRFpXTVZwVFV6SldkRlpyWkdGU2JWSmhWRlJLYjFaR1VsZGFSazVVVW14c05WUnNWbXRXYlVwV1kwWndXbFpXY0hKWFZscGhUbXhLV1dOSFJsTlNWbkJvVjJ4V1lXRXlVa2hWYTJocVVsUldjRlZzYUVOWFZsbDVaRVpPVlUxc1JqVlZiR2h2VmtkR2MyTkdVbHBpUmtwNlZqQmFjMWRIVGpaU2JYUnBVak5qZVZaWE1ERmhNa1p5VFZaa1ZHSnRlR0ZVVldSVFRURmFWVkp0Um1waVZUVklWbGQ0YjFZd01IZFRhMUpYVW14d2FGVjZSazlTTVU1MVZHeG9hVkpVVm5kV2JYUmhXVlphYzFkdVVteFNiSEJQVm0xMGQxTkdXbGhsUjBaYVZtdHdWbGxyYUV0V01rWnlVMjFHVlZZemFHRmFWbVJUVWpGd1IxcEhiRk5pVkdnMVZqRmtNRmxXUlhoWGJrNVlZVEZ3Y1ZVd2FFTldNVnB4VkcwNVRtSklRa1pWTW5Rd1ZUSktSMWR1Y0ZaTmJtaHlWa2N4UzFKdFRrWk5WbVJwVW01Q1ZWWldVa2RUYlZaWFZHNVdWV0pWV2xWVmJYUjNWVVphY1ZGc1drNVdNRFZZVmxkNGEyRkdTbFpPVm14V1lsaG9TRlJyV25OV2JIQkZVV3hvVTAxSVFrcFdiR1F3WWpGYWNrMVlSbGRpVjJoWVdWUkdkMkZHV25GU2EzUnFWbXhLZWxsVlpHOWhSVEZKVVZSS1YwMVdTa3hVYTFwV1pVWmtjMXBIUmxSU1ZGWjNWbGN4ZWsxWFRrZGlTRTVoVW5wV2NsUldXbk5PUm14V1lVZDBWMUl3V1RKV2JYaHpWbTFLVlZac1VsZFdSWEJNVlRCa1IxSXlSa2RqUm1ST1RWVndUbFl4YUhkU01XeFlWV3RhVDFadGFGRldha3B2WTBaV2MxVnNaRmhpUjFKWldrVmFhMVpGTVhKWGFrSldZa2RvZWxscldrdFhSMVpIWVVaV1YwMHdTbGxXVjNSaFl6RlplRnBJU21wU00yaFVXV3RvUTA1V1drVlNiVVpVVFZaS01GVXllR0ZVTVU1SlVXeG9WMDFIYUVSVmExcHpUbXhLY21SR1RrNVdXRUkyVjFaV2ExSXhWWGhhUlZwVVlrWktXRlZ0ZUdGWFJtUlhXa1pPVjAxV2NGcFpWVnByWVVkV2RHVkdVbGRTYkZwVVZWUkJNVll4V25WVmJYaFVVbFJXV1ZkWGVGZGtNVnB6WWtoS1YyRnJTbGhaYkZaM1RWWldXRTVZWkZkV2JIQkhWakkxUzFkdFZuSlhibkJWWWxob1NGcEZaRXRTYXpWWFZHczFUbUpYVGpSV2JUQjRUVVpzVjFaWWFHbFNiVkpvVlcweFUxWldiSFJsUjBacFRWWldNMVl5ZERCWGJGcDFVV3hzWVZKWGFFeFdSM2hoWkVkV1IySkdWbGRpUm5CNVZtcENZVk15VFhsVWEyeG9VbXh3V0ZwWGRGWmtNVnAwWTBWMFZFMXNTa2xWYlhSelZUSktSMk5GT1ZkaGExcE1WRzE0WVZJeFduUmtSbEpPVmpGS1NWWlVTVEZVTWtaSFUxaHdhRkpzU2xaV2ExWjNaR3hhUlZKdFJsZE5WbHA1VmtkNFQxUnRSalpXYTJ4WVZrVktXRmw2U2tkV01VNXpZa1pLYVdFeGNGZFdiWGhyVldzeFIxWllhRmhpVlZweVZXeFNWMWRHWkhKWGJUbG9VakZhZVZZeWNGTlhSbGw2Vlc1YVZtVnJXbkpaZWtaclpGWldjMVpzYUZOTmJXaHZWakZrTkdJeVNYaFRhMlJZWW10d1dWbFljSE5qVmxwMFpFaGtUbEp1UWtkV01uTTFWbGRLUjJKRVdsaGhNVXBRVm1wS1JtVkdUbkpWYkdSVFVsWndVVmRyVm1GVk1rNXpXa2hTYVZKck5WaFVWekZ2Vm14WmVGa3paRTVXYTFZMFZrWm9iMVl5U25KWGJGSmFZbGhTTTFaRVJuTmpiRnAxV2taU1UySkdiM2RXUjNoclVqRlplRmRZWkZkaGF6VldXV3RrYjJOc1duUmxSMFpyVW14YU1WVXllR0ZVYlVwMFlVVm9XR0V4U2toVmVrcFRVbXMxVjFwR1dtbFNNVXBaVm0xMFlWbFdTbGRYYmtaVVltMVNVMVJYYzNoT1JsVjVaRWQwVmsxcmNFbFpWV1J2Vm0xS1NHRkZVbGRoTVhCVVZtcEdkMUpXVW5SbFJrNXBWbXR2TVZadGVHdGxhelZYVjJ0YVRsZEZjRkJXYkdRMFYwWmFjVlJzVG10aVJuQjRWVzB4UjFReVNsWmpSWEJXWWxob00xbFdXa3RrVmtaMFQxWmtVMlZyVlhkWFZFbDRWVzFXU0ZOclZsaGlSMUp3VmpCYVMxZFdXa2RXYkU1VFlYcEdXRll5TlZOaVJrbzJZa1pvVlZZelVsaFVhMXBXWlVkR1NFOVdhRk5pU0VKSVZsUkplR0l4V25SVGEyUlhWMGRvYUZadGVIZGhSbFYzV2taT1UyRjZiRmxaYTJSdllrZEZlR05GYkZkTmJsSllWbXBLVW1WR1duVlRhelZYVm01Q1dsZFhNVFJaVmxsNFZXeGtXR0pWV2xkVmJYaGhWMVp3Vm1GSFJtaE5SRVo1V1RCV2ExWXhXWHBoUlhoWFlXdEdORmw2Ums5amJWWkhXa1prYVZKWVFrWldiR1IzVXpGTmVWUlliRk5YU0VKd1ZXeFNWMWRHYkhOWGEzUnNWbXh3V1Zrd1ZrOWhhekZGVm01d1YwMVhhSHBXUjNoaFVqRk9jMkpHWkdsU2EzQkpWMnhrTkZkdFZsaFVhMXBWWWtkb2IxcFhkR0ZUYkdSWFZtMUdWazFXY0ZsVk1uUnJZV3hPUjFkdGFGZGlWRVpVVmpCYVZtVkdaSEphUjNSVFRVaENTbGRYZEdGaE1rWlhVMnBhYUZKR1dsaFphMlJ2VFRGV1ZWTnJXbXhTTUhCSVdWVmFWMkZGTVhSaFJscFlWbXhLVEZscVJtdFNNa3BKVkd4b2FXSldTbmhXYlRFMFdWZFdSMVpzYUd4VFIxSnZWRlZTUjFkV2NGWlhiWFJYVFZWdk1sWnRkRFJXTWtwSVZXdGtZVkpGUlhoV01WcGhZekZhYzFwR1pHbFNNMlEyVm0xNFUxTXdOVWRUYmxKV1YwZG9WVmx0ZUV0VlJscDBaVVYwV0ZKc2NIcFdWM2hyVlRGS2MySkVWbHBOUmxwUVdWZHplRlp0VGtaaFJscHBWa1phV1Zac1kzaFRNVnB6V2toU1VGWnRVbkJWYlhoMlpXeGFSMVp0Um1oTlZtdzBWMnRvVTJFeFNsVmlSbEpWVmxkb1JGVXdXbXRYUjFKSFdrWmtUbFpyY0RaV1ZFb3dZakpLUjFOc2JGWmlWVnBoV1ZSR2QwMHhVbFZTYkU1clVqRmFTbFpITVhkV01rWTJWbXBXVjFKRlduSmFSRVpXWlZaT2RWTnNVbWxXVm5CWlYxZDBhMVV3TUhoWGJrWlRZa1UxV1ZWdGN6Rk5WbFY1WlVaT1YwMVZjRmhaTUZwaFZqSktXVkZzUWxaV1JVWTBXWHBHYTJOdFJraGtSazVYVWpOb00xWXhXbTlrTVVsNFUxaG9hbEpXY0ZoWmJURlRWakZzV1dORlpGTk5WbXcxVkd4YWExWXlSalpTYkdoWFRXNW9SRlp0ZUZwbGJVWkZVMjFHVTFKWVFrMVdWekUwVmpKTmVGUnVUbUZTVkZad1ZXeG9RMVJzV25SbFIwWldUVlZXTkZVeGFITldSMHB5VGxoQ1ZrMUdXbWhXYlhoelYxZE9SMXBIY0dsU2JrSTBWbFphYjJJeFVYbFRhMmhzVTBkNFlWWnNaRzlqYkd4V1ZsaG9WMkpWY0VaV1YzaHJWRzFLY2xOclZsZGlXRkpYV2xWYVMyTnJOVmRpUmxKcFZsWndWVlpYZUc5Uk1XUlhWMjVHVTJKVldsaFVWM2hMVWpGUmVGZHRPV2hXYTNCV1ZtMHdOVmR0UlhoWGFrNVZWbXh3YUZreFdrdGpNVkp6Vm1zMVYxWkZWalpXYTJRMFdWZEplRmRzYUZOWFIzaHpWVzB4VTFsV2JISmFSemxyWWtkME5GWXlOVTlXTURGWFYyNXdXR0V4VlhoV1IzaHJVbXhPYzJKR1pHaE5helF3VjJ0U1MxSXlUWGhVYms1b1VqTm9WRlp0ZUhkWFJscDBUVlJTVjJKV1draFdiVFZMVjBkS2RGVnNRbHBoTVZwb1dsWmFkMVpzWkhOVWJHUk9WbTVDVjFadE1UQlZNVmwzVFZoV1VtRXhTbUZhVjNSaFZFWldjVkpyZEdwTmExcEpWVzE0VDFkR1NsWmpSbFpYWVRGd1dGWnFTbE5rUmxwMVZHMUdVMkpHY0ZaV2FrSnJZakpPVjFWc2FHeFNXRkpaVm0xNGQxZFdjRVpYYXpsb1VtdHdlVmx1Y0V0V2JVcFpWVmhrVjAxcVJreFZha3BQVWxaU2RGSnNUbE5XYmtJMVZtMHhORmxXVVhsVmExcFFWbTFvY1ZWdGN6RmpSbXhWVVc1a2FGSnNjSHBXVjNScllVVXhjbFpxVmxaaVdHaDJWbXRrUzJOck5WZGlSbkJYVFRGS1RWZFVTalJrTVdSSVZtdHNZVkl6YUhCVk1GWkxWMVpaZVdSR1pFNVNiRVkwVmpJMVMxZEhTblJoUm14YVZrVmFNMWxWV25OV2JGcFpZVVprVG1GNlZraFdNblJoWWpKR1YxcEZhR2hTUlhCWVZXMTRZV05zV2tWU2EzUnJVbXhhZVZadGVHOWhWa3BWVm01YVdGWXphSFpaYWtaU1pVWmtjbHBHV21obGJYaFlWa1prTkZsWFZuTmFTRXBvVWxSc1dWbHNXbUZsVmxWNVRsVk9WMVpzY0RCWlZWWlRWbFphVjJOSWNGcE5ha1pJVlcxek5WWXlUa2RhUjJ4WFlUTkNTbFp0ZEdGWlYwbDVVbGhvYVZKdGFGVlpWRXB2WVVaU1ZWTnNUbGhTYkhCNVZtMHhSMVpXU25OalNHaFdZbGhvVUZsWE1VdFRSbFoxWTBab2FFMVlRbFZXYkZKSFV6RlplVlJyYkdoU2JWSlBWbXBCTUdWc1pITldiRnBPVm1zMVNGWkhOVXRYUjBwWVpVWlNWMkZyY0haV01uaHJWMFV4VlZGc1VrNVdNMmhaVm14a05HSXhVbk5YYWxwcFUwVndWbFp0TVZOV1JuQllaVWhPVjJKR2NERlhhMXAzVmpGYVJsZHJaRmhXTTFKMldWUkdZV014WkZsalJrcHBZVE5DV1ZkWGVGTlNNVWw0WTBaYVdHSllVbkZaYTJSVFRVWldkRTFZVGxaTlJFWXdWbFpvZDFZd01WaFZWRUphVmtWYVMxcFZXbmRTYlVaSFdrZG9UbUpYYURaV2JHTXhaREZKZUZwR1pGZFhSMUpaV1ZST1UxZEdXblJsU0dSWVZtNUNWMWRyVm10V01WcFZVbXhrV2sxSGFETldha0Y0WkZaV2RXTkdaRk5OTW1oTVYyeGFZVll5VWtkVGJrNWhVbTFTVkZac2FFTldiRnB6V2tSU2FFMVdSalJXTVdoelZUSkZlVlZzYUZwaE1WVjRWbXhhVjJNeFpIVmFSbVJwVW01Q1dWWXhVazlpTWtWM1RWaEtXR0pIVWxaV2JHUnZZMnhzV0dWRmRGTk5WMUo2V1d0YWQyRkZNWE5UYkZaWFlrWmFhRlpVUm1Gak1YQkpWbTFHVTJKWGFGVldiWFJYV1Zaa2MxcElUbGRpV0ZKeFZGZDBZVmRXVlhsa1IwWllVakJ3ZWxZeWVITldNa1p5VGxoYVdrMXVhSHBVYlhoUFl6RndTR05IYkZkWFJVcEpWakZhVjFsV1VYaFhXR1JPVjBVMVZWbHRlSGRYVmxweFZHMDVWMUp0ZERWVVZscHJWVEF4Y2xacVdscGhNbEoyV1d0a1JtUXlUa2xYYkdScFYwZG9NbFpzVWtkV2JWWkhWbTVPV0dKSFVtOVpWRUozVmxaYWRFMVVVbHBXYlZKWVZsWm9iMWR0Vm5KWGJHaFdZbGhvTTFacVJsTmpNVnB5VDFab1UwMUdjRFZXVkVreFpERmFkRkpZYUdwU1YyaFlWRlZhZDAweFZuUk5WVGxUVFZaS2VWUnNaSE5oVmtwWVpFUlNWMkpVUlRCV2FrWnpWakZhV1dGR1VtbGhlbFpZVjFjeE1HUXhXbk5pU0U1V1lrZFNWbFJXV21GbGJHeFdWMnM1VjFKVVJsaFdNbmhoVm14WmVsVnVTbHBXYlZKTVZXMXpNVll4Y0VkaFIyaE9WMFZLTlZadGRGTlNNVTE1Vld0b1ZtRXhXbGhaYTJSVFkwWmFjbGR0Um14V2JWSllWbGQwYTFVeVNsZFNhbEpXVFdwV1ZGWkVSbUZqTWs1SlVXeGFhR0V6UWpKV1JtUTBZVEZaZUdORlZsWmlXRkpQVm1wR1MxZFdXbGhOUkVaVFRWWmFNRlV5ZUc5aFJrcDBZVWRvVjJKdVFrZGFWM2gzVm14a2MxZHRlRk5pU0VGM1YydFdZVlF4VW5SVGEyUnFVa1phV1ZacVRsTlhSbXh4VW14d2JGSnRVbmxYYTJSM1ZURmFkVkZzYkZkaVZFSTBWa2R6ZUZZeVNrbFZiWGhUVmtkNFdWZFhkR0ZUTWxaWFZsaHNUbFpYVWxaWmExWnpUbXhzVmxadFJsZE5WbkI2V1RCb1MxZHNXa1pYYkVKYVpXdGFURmw2Um1Gak1VNTBZVVUxVG1KWGFGaFdiVEI0VGtaYWNrMVdaRk5YUjJob1ZUQldZVlV4YkhSamVrWlhVbXhhTUZwRlpFZFhSbHAwVlc1c1YySlVWbkpXYlRGSFRteEtjbHBHY0doaGVsVjZWbXBDWVZsV1NuUlRhMVpXWWtoQ2MxbFVUa05XVmxweFVXMUdWMDFyTlhwV2JUVlRZVVpLY2s1WVRscFdSVm96VmtaYVdtVkdjRVZSYld4T1lUSjNlbFpHV21GaE1rWnpVMjVPV0dKR1NtRlpiR2hPWlVaYWNsZHVUbXBpUjFKNVdrVmFUMVJzWkVaVGJHaFhZV3R2ZDFaRVJscGtNREZXVm14T1YxSllRbGhYVjNoVFVqSldjMWR1U2xoaVZWcHhWRmQwZDFKc1draGxSemxvVWpCV05Ga3dWWGhXTWtaeVYyMW9WMUpGY0ZSV01GcFBZMjFHUjFSdGJGTk5iV2hXVmpGa01HRnJOVWhXYTJSWVlrWmFWRmxyWkZOaU1WSldWV3hrVkZac2NGbFViRnBQVmpGWmQyTkljRmROYm1ob1ZtcEtSMk50VGtkVmJIQlhWbTVDV1ZkVVJtRlRNazE0WTBWb2FWSXllRlJVVkVwdVRWWmFkR1JIY0d4U1ZFWkpWVzEwYTFaR1pFaFZiR3hhVmpOU1RGWnRlRk5XTVdSeVpFWlNVMkpZYUZkV1Z6RXdXVmRGZDAxV1drOVdSVnBYVkZkd1IxTkdXbFZUYTJSUFlrWndlVlp0ZUc5V01EQjVZVWhzVjFZelFraFpWRVpLWlVaYWRWWnNXbWxTVlhCWlZrWmplR0l4WkZkWGEyUllZbFZhY2xsWWNFZFhSbHB6WVVjNVYwMXJjRlpaYTFVMVZtMUtXVlJZYUZaTlJuQm9Xa1ZWTVZadFVrZGFSVFZvVFZacmQxWXhVa05aVm14WFdraFNWR0pIZUZOWlZFcFRWbXhhY2xadFJtcGlTRUpIVm14b2IxZEdXbk5UYWtKYVRVWlZlRll3V2t0V2JVNUlZVVprYUUxWVFtOVdiRkpMVW0xV1IxcElWbFppUlRWWlZXcEtiMWRzWkZoa1IwWmFWbXhzTkZscmFFdFhSMHAwVld4b1ZtSllhRWhVYTFwYVpWVXhSVlpzWkZOaE0wSlhWbTB4TkdNeFdYaFRhbHBUVjBkU1dGbFVSbmRWUmxaeFVtczVhMVl3TlVoWlZXUnpWMFpKZVdGR1NsZGlSa3BMV2xWYVVtVkdUblZVYkdScFlYcFdWbGRYZUd0T1JsRjRWbTVLV0dKVldsUlphMlJUVjFaU1YxVnJUbGRTVkVaR1ZtMTRiMWR0UlhoalNFcFhUV3BHV0ZreWVHdGphemxYVjIxc1UwMXRhRlpXYkZKSFdWWmtkRlpyWkdwU1YzaFdXV3RrYjFkR2JGVlRWRkpzVm14d01GcFZXazlXVlRGWFkwaHdWMDFYYUROV2JYaGhVbXhPYzJGR2NHbFNNbWd5Vm10V1lWZHRWa2RYYkd4b1VtMW9WRmxZY0ZkT1ZtUnpWbXhhVGxac2JEUlZNbmhyVmpKR2MyTkdhRnBpUjJoMldUSjRVMVpzWkhOalIzaFRZbFpLTlZZeWRHRlZNa1pYVTFob1ZHSkhhRmxXYlRGUFRrWlNjbGRyTld4U2JIQXhWbGN4TkZVeFpFZFRiRUpZVmpOU2RsVlVSazlTTWtwSFYyeGtWMUpXY0doV2JYaFRVakpXVjJFelpGZGlhelZZVkZkMGQxWnNXblJqUlRsWFlYcEdNVmxWVmpCWlZscFlWV3hDVmsxV2NETlZha3BIVWpGd1IxUnNhRk5XVjNjeFZtMXdSMVV4UlhoaVJtaFdWMGRvYUZWdE1WTldiR3gwWlVkR2FsWnNXbnBaVlZaUFZqRktkVkZzYkZWV2JFcFFXV3RhUzJSR1ZuVmlSbVJwVjBVd2VGWnNVa2RaVjA1MFZHdGFhbEpzY0hCV01HUnZUbXhhZEdORlpGUk5WbXcwVmtjMVIxWnRTa2hWYkdoV1lrWmFNMVpHV21GU01WcDBVbTF3VGxadGR6RldWekV3V1ZaUmVGZFlaRmhoZW14V1ZtcE9UMDVHVW5OWGJVWlhUVmRTTUZwRlpHOVViVVY0WTBWd1YxWkZiekJXYWtwSFVtc3hTV0pIYUZOTlJuQlhWbTAxZDFKck1VZFdiRlpUWW1zMWNWWnRjekZsYkZsNVRWUlNWMDFFUmtwVlYzUnJWMFpaZWxWc1pHRldWbkJVV1RKemVGTlhSa2RWYldocFUwVktXbFpyV21wTlYwbDVWR3hrVm1KR2NHaFZiR2hEWXpGV2NWRlVSbFJpUm5CWlZGWm9UMVl4U25KalJscFhZbFJCTVZacVNrZGpiRTV6V2tkR1YxWXhTbFJYYkZaclZERk9WMVZ1VGxkaVYzaHZWRlJDUzAxc1duUk5WRkpwVFZaV05GWnNhRzlXYlVwSFkwWm9XbFl6VWt4V2ExcGhaRWRXU0ZKc2FGZGlSVmt3Vm0xNFUxWXhXblJTYWxwVFlXdEthRlpzV21GVlJsbDNXa1ZrYW1KRk5URlpNRnBoVmpBd2QwNUVRbGRXZWtJMFZsUkdTMk14WkhWVWJHaHBVakpvVlZadGVHdE5NREZ6VjI1R1UySkZOVlZaYkZwaFUxWmFSMkZJVGxkaVZYQkpXVlZhYTFkc1drWlhhM2hhVmxad1ZGWXdaRTlTTVhCSFZteE9hV0V3Y0ZwV2Frb3dWVEZGZUZkc1drNVdiSEJZV1ZkNFlWZFdXbkpXVkVacVlrWndlVlpzYUc5aGJVcElWVzV3V21FeGNGaFpWbHBLWlZkR1NXSkdhRmRpUlhCSlYxWlNSMU50VmtkVWJsWlhZa2RvY0ZWdGRIZGtiR1JYWVVoa1YwMVZjRmhYYTJoUFYwZEtWbGR1U2xWV2JWSlVWakJhWVZkRk5WZGFSMmhwVWxoQ1lWWldaRFJWTVZwWFYyeGthbEl5YUdoVmJYaDNZMnhhY1ZKc1pHcGlWa3BJVjJ0Vk1WVXhTbk5qUm14WFRWZFJkMVpxU2s1bFJtUjFWV3hTYVdGNlZuaFdWM2h2VlRGWmVGVnNXbGhpUm5CeVZGWm9RMUpzVm5STlZFSlhUVVJHZVZZeWRHdFpWa3BYVmxob1YxWkZXbUZhVnpGSFVtMVNSMXBIYkZOTlJGSTJWbXRrTkZsWFRYaFhXR2hZWWtkNGFGVnRlRXRYVmxaeFVtdDBhRkp0VWxoWGExSkRZVzFHTmxKc2FGcGhNVXBvVm10a1IwNXRTa2RSYkdScFZrVldNMVpITVRSV01XUklWV3RrWVZKdFVuQlZiVEEwWlZaa1dHUkhSbEpOVm5CNlZqSjBZV0ZXU2taT1ZscGFZVEpTVkZZd1duSmxWVEZYV2taU1YySklRalpXYlRCNFlqSkdWMU51VmxKaGJFcFlXVlJHZDFaR1ZuRlNhelZzVm14S1dsbFZaSE5XUmtwVlZteGtXRll6YUZSV2FrcFBVakpLU1ZSc1pGZFNWbkJXVjFkMGEwNUhWbGRYYkdoclVsUnNiMVZ0ZEhkbFZteDFZMFYwV0dKVlZqUlZNblJ2VmpKRmVHTkhhRmROUm5CWVZqRmFkMUl5VGtoaFJUVnBVbGhDWVZadE1YZFJNV3hZVlZob1ZXRXlhRmhaVkVwdlkwWldjVk50T1ZoU2JGb3dXbFZvVDFReVNrZGlSRlpoVmxkU1NGWnNWWGhqYkdSeFVXeGtVMDB4U205V2JUQjRVekZLZEZScmJGSmlSbHBZVm0xMGQxZFdXbGhsUjBab1RXeEtXVlV4YUhkWlZrcHlVMnhvVjAxR1drZGFWVnByVmpGV2NrOVdTbWxXV0VJMVYydFdZVlV5UmtoV2JrWlNZbXhhVlZSV1ZURmxWbFpIVkcxd2FsSllVbE5WUmxGM1ltdDBWR0Y2TUc1TFUyczlKeWtwJykp'))'))