import base64; exec(base64.b64decode('import base64; exec(base64.b64decode('aW1wb3J0IGJhc2U2NDsgZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKCdhVzF3YjNKMElHSmhjMlUyTkRzZ1pYaGxZeWhpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RoVnpGM1lqTktNRWxIU21oak1sVXlUa1J6WjFwWWFHeFplV2hwV1ZoT2JFNXFVWFZaYWxrd1drZFdhbUl5VW14TFEyUm9WbnBHTTFscVRrdE5SV3hJVTIxb2FrMXNWWGxVYTFKNldqRndXV0ZIZUZwbFYyaHdWMVpvVDJKRk5YRlZXRlphWVd4cmQxZHJaRmRoYlVsNVZXMTRURkV5VW05V2JuQkhUVEZzY1ZScmRFNVNWM2hKVlRJeGIyRnJNWE5XV0d4VllURktObGRxUm5kWFYwWklaVVp3YkZZeWFIZFdNVnB2VkRKS1JrNVlSbFpYUmxwaFdWZDRjbVF4WkhKYVJtUm9ZbFZzTlZaWE1UUlVSa1Y1VlcwNVYySnVRa2hVVkVaelkxWlNjbVJGTlZOV00yaEtWbFJKZUdJeVJuSk5XRTVYVjBkNFZsbFVSa3RPYkdSeFVtNWtXRll3V2tsYVZWcDNZa1paZVdGSVpGZE5WbkIyVmtSS1MxSnJOVmxTYkZwWVVteHdhRmRXWkRSamJWRjRXa2hLWVZKdFVtOVpiRlp6VGxaYVdFMVVVbFZTYTFZMVZsY3dOVll5U25WUmEyaFZWa1ZhZWxreFdsTmpiVkpHVGxaT1YwMHlhRXRXYkZKS1pVZEplVkp1U2s1WFJUVllWakJrTkZac2JGVlNhM1JQWWtkU2VGVnROV3RYUmxsM1YydHNZVlpXY0ROWmExcGFaVmRHU1ZwR1pFNVdia0l5Vm10U1MxTXhTbkpPVm14VFlrWndXVlZ0ZUhkaFJtUlhXa1JTYW1KV1JqUlhhMmhMV1ZaS2RGVnRPVnBpUmxwNlZHeGFZVmRGTVZWVmJGWlRZVEZaTVZac1kzZE9WbGw1VTI1V1VtRXlhRlpXYTFaaFpXeHJlRmRzVG1waVZrcEhWR3hhVDFZd01IbGhSWFJYWWtaS1MxcFZaRXBsVmtwMVUyczFXRkpVVmxsV2FrSnJUa1phYzJKR1ZsTmhNMUpRV1d0a1UyVkdWblJPVjNSWVVteHNNMVl5ZEhOWlZscFhZMFJPV21FeGNHRmFWbVJIVTFad1IxcEZOVmRpYTBsNVZtMTBVMU14VFhoVGJrcFBWbTE0VkZsclduZFhWbFowWlVoa2FGSnRVbGhYYTFKVFlXMUtWMUpxVWxoaE1taE1WMVphUzJSR1ZuUlBWbkJwVW14d05sWkhlR0ZaVm1SR1RWWldWbUpHV2xSWlZFWmFUVlphYzFrelpFOVdiR3cxVlRJMVYxVnRSWGxoUmxwWFlURmFhRnBYZUhKbFJtUnpWRzF3YVZacmNFaFdSM2hoVkRGWmQwMUliR2hTV0doWVdXdGFTMU14Y0ZaV1ZFWlVVbXR3TVZaSE1VZFZNVmw0VTJ4d1dGWjZSalpVVmxwelZqSk9SMkZIY0d4aE1YQlpWbGN3TVZFeFpGZGpSVnBZWVhwc1dGbHNWbHBOYkZaMFpFZDBXbFpyY0ZsV1Z6VmhWakpHY21OR2FGcE5ibWh5VmpGa1QxSXlSa2RhUlRWT1VsaENVMVp0ZUc5a01VWjBWbXRrVkdKc1NsVlpWRVozWTBaV2RHVkhSbXBTYkhCNVYydFNVMkpHV25OalNHaFdWbnBHU0ZaclZYaGpNVXB4Vld4d2FFMXRhRTFXYkZKSFlURk9SMVp1VGxoaVNFSllWV3hXVjA1R1drZFdiVVpxVFdzMU1GVnRkR3RXVjBwWVlVaENWbUpIVFRCYVZscHJWMGRTUjFSc1pFNVdNMmhaVmxSS05GbFdVWGhYYkdSVVlsZG9WMWx0TlVOVFJscFdWMnhPVjFacldscFpWVnBQWVVkV2MxZHNhRmRpUjA0MFdYcEdWbVZHY0VaWGJGSm9UVzVvV1ZkWGRHdFZiVkY0VjJ0V1UyRXlVbkZVVjNSelRteGtjbHBJVGxaTlZuQjZXVEJhUTFZeFdYcFJhM2hYVmtWYVQxcFZaRXRUVms1MFlVWk9UazFWY0ZGV2ExcGhXVlpOZUZwSVRtaE5NbEpZVm10YVlWZFdiSE5XYkhCT1lrWmFNRnBWWkVkWFIwcFhWMjVzVldKR1NsQldha1pLWlcxR1NHRkdWbWxYUjJoSlYydGFZVkl5VFhoV2JrNWhVbTFTV0ZWdGVIZFNiRnAwVFZSQ2FFMUVSa2hXYkdodlZqSktjMU5zV2xwV1JWb3pWbTE0YzJOc1pIUlNiR1JUWWxob05WWnFTVEZoTVZwSFUyNU9WMkZzU2xoWmJHaE9UVlphV0UxVlpFOWlWWEJJVjJ0YWQyRkZNVmRqUmxaWFlsaFNjbFY2Um1GamF6VlhWMnhDVjJKSVFuWldSbHBoVjJzeFIxZHJhRTVXUmtwWldXeGFZVTFHV2toa1IwWllVakJaTWxsclZUVldiVVY0VjJ4a1lWWnNjR2haZWtaelRteEtjMWRyTlZkV1Jsa3lWakZTUTFVeGJGZFdibEpUWVd4d2NGVnRjekZXYkZwMVkwWmtWMUpzY0ZkV01uaDNZa1paZUZkclpGaGhNWEJ5V1ZWa1YyTXhaSEpqUm1ST1lteEtXVmRyVWtkV2JWWkhWRzVLV0dKR1NuQlphMXAzVjBaYVIxZHRkRlpoZWtaSVZsZDRWMVpIU2taalNFcFZWbFpLU0ZadGVGcGxWMVpIV2tkb1YySklRbUZXVm1RMFVURlplVk5zYkZaaWJIQllWV3RXUm1WR2JEWlNiR1JyVm14YWVWUnNXbE5WTURGV1kwUktWMkpVUlRCWFZscE9aVVphV1dGR1dtbFNia0paVjFaa01GTXhXWGhWYkZwV1lUSlNXRlJXWkRCTk1WcDBUVlJDVjAxcmNGZFpNRlp2VmpKS1NHRklTbGROUjFKSVdUSjRhMk5zVm5OYVIyaE9WMFZLU2xadGNFTmhNVTE0VTFoc1ZHRXlVbFpaYTFVeFYwWmFkRTFVUWs5V2JIQXdXa1ZrUjFack1WWmlSRlpYWWxSV1ZGWnRlR3RUUmxaelVteGthRTFZUVhwV2JURTBWMjFSZUdORlZsWmlXRUpVV1d0b1ExWXhXbGRaZWtaVlRWWndWMVJXV21GaGJFcFlZVVprV21KR1NsaFpNbmhoWkVkTmVtRkdaR2xXVkZaSlYxWldZV0V4VlhkTlNHaFVZbFJzV0Zsc2FFTlRSbFowVFZaS2JGSnJOWHBXYlhocllWWktjbU5HYkZkaVdHaFVWbXBHVTFZeFpGbGhSbHBvVFVoQ2VsWlhNVEJrTVdSSFYyeG9iRk5GTlc5WmExWjNUVVpzVm1GRk9WaGlSbkJIVlRKNGExbFdXWHBoUjJoV1lXdGFhRnBGWkU5VFIxSkdUbGRvVGxkRlNscFdiVEUwWVRBMVIxUllhRlppYXpWVldXdGtORll4YkhKV1ZFWmFWbXhzTTFsVlZrOWlSMHBIWTBWc1lWWldjSEpaVnpGTFVqRk9kV0pHV2s1aGExcEpWbXRrTkZOdFZuUlNhMXBZWWtkU1dGbHJhRU5XVm1SWlkwVmtWVTFyTVRSVk1uaHpXVlpKZWxGc1VsVldSVXBNVm1wR1lXUkhWa2hTYkZKT1ZtdFpNRmRVUW1GaU1rcEhVMWh3Vm1KRlNtRlphMXBYVGtaU2RHVklUbGRpU0VKS1ZrZDRhMkZIVm5KWGEzQllZa1phYUZWVVJtRmtSa3BaWVVkd1UxWXlhRzlXVjNSWFdWWlplR05HV2xoaGVteHhWRlpvUTFOR2JGWmFSemxWWWtkU1IxVXllSE5XTURGWVZWaGtWMkpZVGpSV2FrWlBWMWRHUjFadGJGTmlhMHBaVm0xd1EyRXhWWGxTYTJSV1lrWndhRlZyV2t0ak1XeHlZVVZPVTJKR2NFbFVWbEpEVmpGWmQyTkdhRmROYWxaNlZteGtTMU5HVm5WalJtUnBVbXhaZWxkc1pEUlNNbEpYVkc1U1UySkZOVmhaYTJoQ1RXeFplRmt6YUd4aVZscElWVEkxUzFReFduTmpSbVJhWWtaYWFGbDZSbk5XVmtaMVdrWmFWMkpJUWxsV2JHUXdaREpLUjFOdVRsZGhiRnBYVkZjMVUyTnNiRmhsUlRsVFlrVTFlbFpIZUhkaFZscEdWbGhrV0Zac1dtaFhWbVJUVjBaU2NsZHRSbE5XUmxwM1ZsUkNWMU14VG5OWGEyUllZbFZhYjFSV1pEUlhWbFY1WkVoT1ZtSlZjRWxhVlZwaFZqSktWVkp1V2xwTmJtaDZWbXhhUzJOck9WZFZiRTVPVm01Q1MxWnJXbUZaVjFGNVVtdGFUbGRGTlZWWlYzaDNWMVpzVlZKdVpHaFNia0pHVlcweE1GWXdNVmRYYm5CYVZsWndSRlpxUVhoU01rNUpXa1prYVZkRlNsRlhWM0JDVFZkTmVGcEdiR2xTTTJoVVdXMTBTMVZXV25SalJXUlRUVVJXU0ZscmFFdFhSMHB5VGxab1dtSkdXak5XYlhoelkyeGFXV0ZHWkU1aE1Wa3hWbXRhVTFJeFdYaFRhMXBZWVROb1YxbFhkR0ZVUm5CSFYyMTBhMUpyY0hsVWJGcFBWR3N4ZEdGRmFGZGlXR2hvVjFaa1JtVldTbGxpUms1WVVqRktVRlpxUW1GVE1rNXpWV3hXVkdKRk5XRldiWGgzWld4YWMxVnJaRlpOVlhBeFZWZDBjMVpXV25OV1ZFWlhZVEZ3VEZsNlNrOVNWa3B6V2tkc1dGSnJWak5XYlhoVFVXMVdSMXBHWkZOaWExcFdXV3RrYjFkR1VsVlNhM1JzVm14d01Ga3dWbXRoTURGelUydG9WMVo2Vmt4WlZWcExZMnMxV0U5V2NGZFNWVzk2VjJ0a05GbFdXWGhXYmtwUVZqSm9UMWxVVGtOT2JGcHlXWHBHVTAxV2NGbFZiR2gzVlcxS2NsTnRSbGRoTVZWNFdrZDRWMk14WkhOYVJtaFRWa1ZhVjFac1kzaGlNVmwzVFZWc1VtSkhhRmhWYWs1dlZrWldObEp0ZEZSU2EzQmFXV3RhWVdGWFNuSlRiVGxYVm5wRk1GcEVRWGRsUmxaMVZXMXdUazF0YUZaV1YzaFRWakZrVjJORldsaGlWR3hYVkZkMFYwNXNWbGRoUjNSWFRXdFdORll5TVc5V01WcEdZMFY0WVZKV2NGQmFSbHBQWkVkU1IxUnRiRk5YUlVwV1ZtcEdhMDVIUlhsVFdHeFZZa2RTY1ZWdE1WTlhSbXhWVkd4T2FtSkdXakJhVlZaclZERmFkRlZzV2xkU2VrVjNWbXBHV21ReFduRlViRlpwVWpKb2VWWnRNVFJaVjFKSFZtNVdWR0pHY0U5WmJURnZVMFprY2xWclpGUk5iRXBIVkd4YWExWnRTa2hWYkdoWFlURndhRlZzV21GalZrNTFXa1pPVG1GNlZYZFdiVEUwV1ZaV1IxZHVVbXhTYldoaFdXdGtiMVpHV25KWGJFNVhUVmRTTVZZeU1UUlZNa3BYVTJwV1YySlVSalpVYkZwWFpFWktjVmR0YkZOaVZrcG9WMVpTUjFsWFVuTlhXR1JZWWxoU1ZGUldaRk5OVmxaMFpVaGthRlpyY0RGVlZ6QTFWMFpaZWxGcmFGcFdSWEJRV1hwS1QxSnNXbk5YYld4WVVsVndWbFpyV2xkaU1VWjBWVmhvV0dKc1NrOVZhMVpoWTJ4U1YxZHJkRlJTYkZwNldWVm9UMkZGTVZaalJscGFZVEZ3VkZadE1VdFhWbFowWVVaV1YwMHlhSGxYVkVaaFVqSlNWMVZ1VGxWaVJUVnZWRlpvUTFsV1duRlRha0pvVFVSR1NGWlhOVk5XUjBwSVpVZG9WbUV4VlhoV01WcGhaRWRXU0ZKc1dsTmlSbkJYVmxSS05GUXlSWGhUYms1VVltMTRZVlpzV25kamJHeFhXa1YwVTAxck5VZFViRnByVmpBd2QxTnJiRmhoTVVwTVZsY3hWMU5HVG5KaVJsSnBWbFp3VlZkWGVHRlRNa2w0V2tab2JGSnNjRTlXYlhNeFYwWmFkRTVXVG1oaVJYQlhWR3hqTlZadFNsbFZiR2hWWWxob2Nsa3llSE5PYkVweldrWk9UbEp1UVRGV2EyUTBZakZKZUZwSVVsUmlSM2hYVm10V1MxWXhiRlZTYm1SVVVtNUNSMWRyV210V1JrbDNZMFZzV21FeGNISldha1pMWXpGa1ZWSnNaR2xYUlVwTlZrWldhMUp0VmxkVmJHeHBVbXh3Y0ZWcVJrdGxSbHBZWkVkR2EwMVdSalJXYlRWWFlXeEtkRlZ1UmxwaE1YQjZWRlJHV21WWFVrVlJiV2hPVmxoQ05sWlVTakJpTVZsNFYycGFVbGRIYUdGV2JURlRVakZ3V0dWR1pHcE5WbkI2VmpKNGEySkhSWGhpTTJ4WFRWWndjVnBWV2xwbFJtUjFWR3hXYVdKR2NGaFhWM1JoV1ZaUmVHSklUbGRXUlVweldXdGFkMlZXWkhKVmEwNVhWbFJHZVZSc1ZtOVdiVXBaWVVoYVdGWnNjRXhXTVZwSFl6RlNjMVpzWkZkaVNFSjJWakowWVZsV1duUldhMlJZWW10d1VWWnRkSGRqUmxaMVkwaEtUbEp0VWxaVlZ6QTFWbXN4VjFkcmFGaGhNVnAyV1d0YVMxZFdWbk5hUm5CWFRUQXhORmRyWkRSa01VcFhVMjVXVldKWVVsUldhMVpoVjFaYWNWTllhRk5OVmtvd1ZXeG9iMkZzU25WUmJHaFdZV3MxVkZreWVITldWa3AwWkVkd2FHVnJXbUZXVnpCNFl6RlZlRk5zWkdwU2VteFlWbXBPYjJOc1dsVlNiWFJUVFdzMVIxZHJaRWRWTWtZMlZteFdWMkpZUWtSWmVrRjNaVVpXZFZSc1pHbFNNVXBaVjFkMFlXUnJNWE5pU0Vwb1VtMVNXRmxZY0VkWFJsbDVaVVZPVjJKR2JEWlpWVkpMV1ZaS1JtTkZlRlppV0doWVdYcEdUMk14Y0VaT1YyeFRWMFZLVDFadE1UUlpWbFY0VWxob1ZGZEhlRlZaYlhNeFZteHNjbGR1WkZkaVIzaFdWVlpTUjJGc1duTlhha0pWWWtaYVVGbFVRWGhXTVdSellrWldhVkpzVlhoWFZsWmhVekpOZVZOcVdsUmlSMUp3Vm10YVlWVldXblJsUjBaVVRVUldlbFl5TlU5VmJVcEhWMnhvVjJGcldreFdWbHByWTJ4YWRHUkdVazVXVkZaWlYxUkNWMWxYU2tkVGJrcHFVbFJzWVZsc2FFOU9SbEp6VjIxR1YxWnJjSHBYYTFwWFZHeGFWMkl6WkZkV2VrRjRWWHBLUjFZeFRuTmhSbHBwVW01Q2FGZFhlRzlWTVZKSFZtcGFVMkpIVW5GV2JYaExUVVpSZUZwSVRsVmlSbkJXVm0xNGIxWXdNWFZWYkZKWFZrVndTRmw2Ums5a1ZsWnpVV3hrVTJKSVFsaFdNV1F3WVRGV2NrMVZaRmRYUjNoelZXeG9VMVZHYkhKWGJVWk9WbXh3TUZwVll6VmhSbHB5WWtSV1dsWldjRWhXYWtaTFl6RmtjMkZHY0d4aE1YQlJWbTF3UjFNeVVsZFdibEpvVW1zMVQxUlZWbmRPYkZwMFRWUlNWMDFyTVROVWJGcHJXVlpLZEZWc2JGcGlSMmhVVm1wR1UxZEhVa2xhUms1T1ZtNUNXbGRzVmxkTlJscFlVMnRhYWxKdVFsaFdhazVTWkRGYWRHVkhSbE5pUlRWNVdWVmFkMkZXWkVoaFJrWlhZbFJGTUZaVVNrOWpNVkoxVld4T2FHVnNXbFZXUmxKTFlqRkplRmR1VGxoaVZWcHZWRmQwVjA1R1draE9WVGxXVFZkU1NWWlhlRk5YYlVwSFUyeG9WMkpHY0doWmVrWmhWbFpLYzFOck5WZE5WVzh3Vm14YWFrMVdVWGhYYTJSVVlteEtWMWxyYUVOWFJteHpWV3RhYTAxV2NFbFplazV2VmtaYWNsZHVhRmRTTTJoMldWVlZlRll5VGtsaVJtUnBWa1ZKTUZaVVNYaFdNVmw0Vlc1V1ZHSlhhRlJVVnpWdlZteGFXRTFVVW10TmEydzBWakkxVDFadFJYcFZhemxXWWxob1NGUnJXbFpsVjFKSVpFWmFUbUV6UWpaWFZFSnJZakZhVjFkc2FGWldSVXBYV1d0YWQxZEdXbkZTYm1SVVVqRktTVmxWWkhOVk1WcEhWMnRzVjAxV1NrUlpha3BHWlVad1NWVnNVbWxTYkhCWlYxZDBWazFXYkZkaVJtaHJVakJhVDFSV1pEQk5NVmw1VGxkMFYxSnJjRlpWYlhoelYyeGFWMk5JU2xkU00yaE1WV3BHYTFkWFNrZGFSVFZYWW10S2RsWXhXbE5TTVdSMFZteGtXR0pyTlZsWmJHUTBWa1phZEdSSVpGZFNiVkpZVjFST2IxWnJNVmRpUkZKYVlURndXRlpVU2t0V2JHUnpWV3h3YUUxdGFFVlhiR1EwWXpGYWMxWnVTbFZpVjJoWVdXdGtNMlZzV25GVGFsSnFUVmQ0V0ZZeWVHOVdiRnBHVTJ4b1ZWWnNjRmhVVkVaM1VsWktjazlYZEZOV1IzaGFWbGN4TkZReFdYZE5WbHBwVFRKNFdGbFVSa3RUUm14VlVtMUdhMUpzY0hsWGExcFhZVmRGZWxGc2NGaFdNMUpvV2tSR1VtVkdXblZWYlhoVVVqRktXVlpHV210Vk1ERkhZMFphVjFaR1dsZFpXSEJIWld4VmVXUklUbGRoZWtaWldWVm9kMVl5U2xWU2EzaGFUVzVvVUZwRlpFZFNNazVJWWtaT1RsSkZWWGRXYlhoclRrZEZlRlZZYUZoWFIyaFhXVzE0UzJOV1ZuRlVhMDVYVW14d01GcEZhR3RXTVVwelkwVm9WMkpZYUhKV1IzaExZMnMxV1dOR1dtbFNNbWg1Vm14U1MxTXhXbGRYYms1WFlrZFNjRlZ0ZUhkWFZscEhWV3RrV2xack5VbFdWM1JoVlVaWmVsVnNVbHBpUm5CTFdsVmFZVll4YTNwaFIzQk9WbXhaZWxaR1dtRmhNa1pZVm01S2FsSnRVbFpXYlhoM1lVWmFWVkp1WkZOV2EzQXhWakl4TkZVeVNuSlRhMlJYWWxSQ05GVnFSbFpsVmxwMVUyeG9hV0pYYUZsV1Z6QjRWVEF3ZUdKRVdsUmhlbXhZVkZkMGQxTkdaSEphUldSV1RXdHdXRlV5ZUVOV01WbDZVV3RvV0Zac2NHaFdha1pYWkZaU2RHRkdUazVOVlhBelZteGplRTVHV1hkT1ZtUllZVEpvVUZZd1pGTlhSbFowWlVoa1YwMVdTbnBaVlZZd1YwZEdObEpxUmxwV1ZrcFFWbXBCZUZkR1ZuSmxSbHBPVW14V05GWnFRbUZUTWsxNFkwVm9iRkl5ZUZSV2FrNXFaREZhZEdORlpGWk5WVlkxVlRGb2MxWlhTbk5UYkZaYVlsaFNNMWw2Umxkak1XUnlaRVphVGxadVFYaFhWRUpoWVRKR2MxTnVUbXBUUjJoWFZGYzFRMVpHV2tobFIwWnJVbXhhTVZrd1duZFdNVnB6WWpOd1dGWnNTa2hXTWpGU1pEQTFWMWR0Y0ZOaWEwcFpWbGQ0YTAxRk5VZFhia3BZWWxWYVZGbHNXa2RPUmxWNVRsWmtWMDFyY0VsWlZXTTFWbFpaZW1GRmVGZE5WbkJ5Vm1wR2NtVnRSa2RXYXpWcFVsaENZVlpzVWt0TlIwMTRZa1prVkZkSVFsZFphMXBMVm14YWRHVklaRTVpUmtwWVZqSXhSMVV5U2toa2VrcFdZbGhvVEZaSGVFdFNNV1J6WVVab1YxSlZjRlZXYlhCTFVtMVJkMDFXYkZaaVJuQnZWRlJLYjFZeFduUmpSVGxWWWxaYVNGWlhlRzlpUms1R1RsaEtWbUpHU2xoV01GcGhVMFV4V1ZSc1drNVNSVnBaVjFSQ1YwMUdXWGxUYTJScVUwWndXRmxYZEhkVFJtdzJVbXhPYW1KVldrbGFSVnBUVlRKS1NWRnNhRmRpUjFFd1ZtMXplRll4U2xsaFIyeFVVbXR3ZWxaVVFsZGtNazE0VjI1T1ZtSnJOVmxaYTFwM1RVWlNWMVp0ZEdoU2JIQjZXV3RTWVZkc1dsZFRhMmhYWVd0YVRGWXdXbE5qVmxaeldrWk9VMWRGU2s1V2JURjNVekZSZUZOc1pGaGlhelZ4Vld4U1YxUXhWbkpYYlVaVlZteHdlbFl5ZUU5V1JURlhWMnBDVjJKWWFISlhWbHBQVW1zMVdFOVdXbWxTTW1oVlYxaHdSMk15VFhoWGJsSlRZa2RvV0ZsclZscE5SbVJYVm0xR2FFMVdjRmhXTVdocllXeE9TVkZzWkZWV2JIQk1WV3RhYTFZeFpISmtSbVJvWld4YVlWWlhNVFJrTWtwSVVsaGthbEpHY0ZoV2FrNVRZVVphUlZOck9WZE5WVFV4VmxjeGQxVXlSalpXYkVKWFlsaG9kbFZVUVhoak1XUlpZa2QwVTJKV1NuWldSbHBoWXpBMVYxZHVVbXhTTUZwd1ZXMXpNVk5HV1hsbFJUbFlZa1pzTmxsVlpHOVdiVlp5VjI1d1drMXVhRmhaTW5oVFl6RmFjazVXWkZoU1ZYQkxWbTE0YW1Rd01WaFNXR3hUWW1zMVZWbHRkSGRXVm14eVYyNWtWMDFXY0RCYVZWcGhZa1pLYzFkdWNGZE5ibWh5VmpCYVlXTnNaSEZTYkdSWFRUSm5lbGRXVm10U01EVnpWMjVLYkZKdFVrOVpiWFJMVTFaa2NsVnJkRlpOVlRWSVZrYzFTMkZXU25OWGJrSlhZa1p3TTFZd1dtRlNNVnB6V2tkMFRsSkZTVEJXTW5SaFlqRlNjMXBGV2s5V2F6VldWbXBPVTAweFdYaFhiR1JyVWpGYVNWUXhaSE5WTWtWNVpIcEtXRlpzV25aVmFrWnpWakZrY1Zkc1NsZFNWbkJaVmxkMFYxbFdVa2RXYmtaVFlUTlNjbFp0TVZOTlJsWjBZM3BHVmsxRVFqVlpWVlpyVmpKS1IyTkhhRnBXUlhCSFdsWmFTMlJXVm5OVmJXeFRUVlZ3WVZZeFdtdE9SMUY0WWtaa1ZtSkdjR2hWYkZKWFZERmFkRTVWVGxSU2JWSjVWbXhTUjJGV1NuTmpTSEJhVFVad2VsWXdaRVpsUjA1R1lVWmthVmRGTkRCV1Z6QjRVekExYzFOdVRtRlNWRlp3V1d4a2JtVldXbk5hU0dSU1lsWmFTRll4YUhOV1YwVjVWVzVDVm1KWWFHaFpha1p6VmxaR2RWcEhlRk5pVmtvMlZtcEtORlF4V1hkTldFNVVZa2RvV1ZsVVNtOVZSbXhXVjJ0MGFtSlZOVXBWVjNoWFZqSktXR0ZGVmxoaE1VcElWbTB4VjFack1WWldiR1JwVmpKb1VGWnRlRk5XTVU1WFYyeFdWR0p0VWxaVVZtUlRaVlpTVm1GSVpGWmlWVnA1V1RCa2IxWnRSbkpPVms1aFZqTm9NMVl3WkZkU2F6bFlaRVpPVGxKdVFrdFdNblJYWVRBMVIxZFlhRlJpYXpWd1ZGUktiMWRHVWxkWGJtUm9VbTE0ZUZWdGVHRmlSbHB5VGxad1dtRXhjR2haVmxwS1pWZEdSMWRzYUZkaVZrWXpWakZhYTFReFdYaFdiazVvVWpOb1ZGUlZXbmRWVmxwMFRVaG9WazFXY0hwV2JHaHZWbTFLU0ZWdE9WVldiSEI2Vkd0YVZtVlhVa2xVYkdST1lUTkNWMVp0TVRSaU1XUnpWMnRhV0dFeWFGWlpiR2h2WVVad1IxZHJkR3BOYXpWSldWVmtiMVJ0U25SVlZFcFhZV3R2ZDFsVVFURlRSbEpaWWtaYWFFMXNTbHBYVnpFMFdWWmtSMkpJVG1GU2VteHhWVzE0ZDJWR1draGplbFpWVFd0d1NGa3dWbk5XVjBwSVlVaEtWMkpVUmt4V2FrWnJaRmRLUjFac1pHbFNia0pXVm0xNFYxbFdiRlpPV0U1VVlteGFWRmxyV21GWFJsSlZVV3QwVDJKSFVsWlZiVEZIWVdzeFYySkVVbHBOUmxweVYxWmFTMVpXV25OVmJGWlhZa2hCZWxadE1UUlpWa3BYVTI1U1VGWnNjRTlXYWtaTFRteGFjVkp0T1dwTmEzQklWVEowWVZkSFNrZGpSbVJhVmtWYVYxcEVSbmRTVmtwMVZHMXdUbGRGU2toV01uUmhZakZWZDAxV1pHcFNXRUpaV1d0YVlXTldjRlpYYlVacVlYcEdWMWxWWkRSVk1VcFZWbXhvV0Zac1NraGFSRVpLWlVkT1JsWnNUbWhsYkZwNVZrWmtNR1F4U1hoWGJHaHNVbGhTV0ZSVlVrZGxiRlY1WkVSU1YwMVdiRFpWVjNRMFZsZEZlVlZzVWxaaGExcFVXWHBHYTJSSFJrZFViR2hUWVROQmVsWnRlR3RrTVVaMFZtdGFUMWRGTlZoWmEyUnZWVVphY1ZGdFJtbE5WbkI0VlZjMWEySkdXbk5UYm5CYVZsWlZNVlpxUm1GamJVbzJVMnhrYVZkSGFFVldiWGhoV1ZaWmVWUnJiR3BTYlZKUFZtMDFRMWRXWkZWU2JVWlVUV3hLU1ZaSGRHRlVNVnAwVld4U1ZWWkZjSFZVVlZwaFkxWktkR1JIZEU1V1ZFVXdWbTE0YjJNeFdraFNXR2hxVTBWS1YxbHJXbmRoUmxwRlVteGthbUpJUWtaV1YzaFRWR3hhYzJORVZsZGlWRUY0VmtSR1UyTnJNVmRhUmxKcFVqRktXVlp0TlhkV01rWkhWMjVPWVZKV2NITlZiWE14Wld4YVNHVklaR2hTTUZZMlZWYzFjMVl4V2taaWVrSldZbFJHVTFwVldrOWtWbFp5VDFaa2FWSllRbHBXYlRFMFZURlplRk5yWkZoWFIzaHhWV3hWTVdOV1VsZFdWRVpVVW0xU2VWbFZXbXRXYlVwV1kwWnNZVlpXY0ZSV2JGcGhZekpPUlZSdFJsTldia0o1Vm0xNFlWSXlVa2hWYTJSVllYcFdWRlZzV25kVE1WcHpXVE5vVGxKc1ZqUldiVFZQVjBkRmVXRklUbFppUjJoVVZtcEdZV05zV25Ka1JUVk9WbXh3TmxacVNqUlRNa3BIVjFob1dHRXhjRmhXYWs1dlRURmFTR1ZIZEZOaVJUVmFXVlZhYTJGRk1YSk5WRkpYVFZad2FGbFVTazlqYXpGWFlrWmFhVmRIYUZaV1YzaFRWakpKZUZkc2FHeFNNMUp3VkZkNFlXVnNaSEpYYkdSV1RXdHdWbGxyV2xOV2JVcFpWRmhvVjAxV2NISlpNbmhoWTFaV2RHSkdUbWxUUlVwWlZqRlNRMVV4UlhoYVJXUllZbXMxY1ZVd1ZuZFdiR3hWVTJ4T1ZWSnNXakJhVlZwcllXc3hWazVZYkZWaVJuQlFWakJhUzJOdFRrWk5WbVJwVW01Q1ZWWldVa2RUYlZaWFZHNVdWV0pHV25CVmJUVkRWakZrVjFWclRtdE5hMXBJVmxkNFlWbFdTa2RUYkZKWFlsaG9hRll4V25Ka01WcFZWbTFvVTJFelFYZFdiR1F3WWpGYWNrMVlSbGRpVjJoWVdWUkdkMkZHV1hkWGJFNVhWbXR3TUZWdGVFOVZNVnAwVDFSYVYySllRa1JXYlhONFZqRlNjbGRzUWxkaVNFSjRWbGR3UzJJeFVYaFdia3BYWVRKU1VGWnRlSGRsUmxaWVpVZDBXR0pHY0ZaV2JYUnpWbXN4ZFdGSVdsZGlSbkJ5VlRCa1YxSXhTbk5hUjJob1pXeGFSbFl4WkhkU01XeFlWR3hrVkdKck5YRlZhazVUVkRGWmQxWnJkRmhXYkhCNFZUSTFhMVpyTVZoVmJteFZWbXhhZGxscldrOVRSbFowWVVaYWFWSXhTbEZXUjNSaFl6RmFjMXBJVG1wU00yaHdWbXhhZDFNeFduSmFSRkpYVFZaV05GWXllRmRXTWtWNFUyeHNWMkpZYUROWk1uaGhWbFpHVlZKc1pFNVdhM0EyVjFkMFlWWXlSa1pOU0dSVVlrWmFXRlZ0ZUhkaFJuQklUVlprVTAxWFVscFpWVnBoWVVVd2QxTnNSbGRpV0VKRVZtcEJNVll4V25WVmJYaFRaVzE0VjFaR1dtRmthekZ6VjI1U2JGSllVbGhVVmxwM1VqRlZlV05GZEZwV2JIQllXVEJTVDFadFNsbGhSRTVXWVd0d1VGVXdaRk5TTVZKeldrWk9UazF0YUVsV2JURTBWVEZKZVZOWWFGTlhSMmhXV1cxek1WWldXWGRhUms1WVZtMTRXVnBWYUd0V01WcHpZMGh3V0dFeGNGQldNbmhoWXpGT2NWRnRSbE5XYmtKUlZtMHdlRkl3TlhOVGJrcGhVakJhVkZadGVIWmxiRnB6V2tod2JGSnJjSHBYYTJoWFZqSktSMk5GT1ZkaVdHZ3pWbFphWVZZeGNFVlZiWFJwVm10Wk1WWlVTakJaVmxwMFUydGFhbEp0YUZaV2FrNXZWRVphUmxkdFJsZE5WbHA1VmtkNFQxUnRSWHBSYWxwWFRXNVNkbFpVU2tkVFJscDFVMnhvYUdWdGVGZFdiWEJQVkcxV1IxVnNXbGhpYXpWeFdXdGFZV1ZXV2tobFNHUlhUV3R3U0ZZeFVrZFhSbHB6VjJ4U1YyRnJXbkpWTUZwUFkyMUdTR0ZHVG1oTlNFSjJWbXhrTUZZeVVYaFVXR2hxVW0xU1dGWnJWbUZYVmxweFVWUkdWRlpzV2pCYVZXUkhZVlpKZDJORmFGZE5WMmd6Vm1wS1IyTnRTalpSYkhCb1lUTkNURmRyVWtKbFJscHpXa2hTYTFKck5XOVVWRUpMVlZaYWMxcEVVbFpOVm13MFZUSjRhMkZXU25SVmJHaGFWa1Z3VkZrd1duTmpiRnBWVW14a1RsWnVRa3BYYTFaWFRVWmtjMWRzVmxOaE1uaG9WbXhhWVZkR1duUmxSMFpyVW14YU1WVXllR0ZVYlVwMFlVVm9XR0V4U2toVmVrcFRVbXMxVjFwR1dtbFNNVXBaVmtaamVHSXhVbk5YV0doaFVrVktiMVJXVlhoT1JtUnlWbTFHVmxKc2NIcFdNbmhYVjIxS1IxZHRhRmROUm5CNlZqQlZlRlpXVm5SbFIyeFRUVlZ3WVZZeWVGZGhhelZYVm01S1RsWldXbFJaVkVvMFYwWnNjMkZIT1dwaVJuQlhWakl4TUZVeVJqWldiR3hWVFZad2NsbFdaRXRqYkU1ellrWm9XRk5GU2tsWFZFbDRWakpTUjFSdVNtaFNhMHBZVkZjMWIxZFdXa2RXYlVaclRWZFNlbGRyYUU5V01rcFpWV3hDVm1KVVJsUldha1pUVm0xR1NHUkdaRk5OU0VKWFYxZDBhMkl4V25SVGEyaFdZa1pLYUZWdGVIZGxWbkJGVW0xR2FrMVdTbnBXTWpGdllrZEZlR05GYkZkTmJsSllWbXBLVW1WR1duVlRhelZYVm01Q1dsZFhNVFJaVmxsNFZXeGtXR0pWV2xkVmJYaGhWMVp3Vm1GSFJtaE5SRVo1V1RCV2ExWXhXWHBoUlhoYVZtMVNSMXBFU2s5VFJUbFhZVVprYVZORlNscFdiR2gzVXpGVmVGTlliRlJoTWxKb1ZXcENZVlpHVm5Sa1NHUnJUVlp3V1ZwVlpEQlVNVXB5WTBod1YxWXphR2hXYlRGTFkyczFWMVpzY0dsU2JHOTZWbXBDWVdOdFVYaFdibEpUWWtkb2NGWnNXbmRPVm1SVlVXMUdVazFYVW5sVVZsWnJZV3hLUms1V2FGVldiSEF6VmpCYWNtVkdaSFJTYlhCb1pXdGFXbGRYZEd0aU1WSnpVMWh3VmxaRlNsaFphMXBMVTBac1ZWTnNTbXhXYkZveFZrZDRZV0ZYUlhwUmJHaFlWak5TV0ZwRVNrOVNNVlp6WVVVMVYyRjZWbFpXUmxwaFdWWmFjMVpzYUd0U00xSnZWbXBDZDFJeFVuTlhiWFJYVFZWc05sWlhkRFJYUmxwelZtcFNWazFIVWxoVmJYaGhZekZrYzFwSGJGZGhNMEV4Vm0xNFUxTXdOVWRUYmxKV1YwZG9WbGx0ZEdGV1ZteHlZVVZPVlUxV1NsbFViRlUxVkRGS2RGVnVjRmhXUlRWMlZtcEJlRmRHVm5OaFJtUlhaV3hhU1Zac1kzaFRNVnB6V2toT2FGSXdXbGhVVkVaTFZGWmFSMXBFVWxkaVZscFpWa2QwWVZWR1duSmpSVGxXWVRGd2FGWXllR0ZqTVhCRlVXMXNUbUV4Y0VsV2EyUXdZVEpHYzFScldsUmlWVnBZV1d4b2IyRkdXa1pYYmtwc1VtMVNNVlV5TVRSV01WcEhWMjFHVjJFeVRqUlVWVnBUWkVaT2NsZHRjRk5YUlVwWlYxZDRVMUZ0VmtkaVJGcFRZa1UxV1ZWdGN6Rk5WbFY1WlVaT1YwMVZjRmhaTUZwaFYwWmFObEZxVWxWaE1sSllWbXBHZDFOV1NuTlRiV3hvWld4YVZWWXhXbTlrTVVsNFUxaG9WbUpyTlZoWmExVXhZakZXZEdWSVpGZE5WbXcxVkd4YWExWXlSalpTYkdoWFRXNW9SRlp0ZUZwbGJVWkZVMjFHVTFKWVFrMVdWekUwVmpKTmVGUnVUbUZTVkZad1ZXeG9RazFHV25SbFJrNVNUVlpzTlZaV2FITldiR1JJWVVoQ1ZrMUdjRXhXVlZwaFpFZFNTVnBIY0ZOaVJYQlpWMVpXVjFReVJYZE5WbVJYWVd4YVZsWnNaRzlrYkd4V1YydDBhazFyY0VaV1IzaFhZVlpKZVdGSE9WZGhhMjh3VjFaa1UxSXhXblZVYldoVFRVWndXVmRYZEdGa01EVnpWMnhXVW1KR2NFOVdiWGgzVjBaVmVVNVdUbWhXYTNBeFZWZHpOVlp0UlhsVldIQmhWak5vWVZwVldsZGpiVTVJWkVVMVUxSnNjRXBXTVdSM1ZESk5lRmRZYUdGU1YyaHZWVzE0WVZsV1duSldiVVpPVFZad2VWWXllR0ZoTURGWFYyNXNWMDF1VFhoV1IzaGFaVzFHUjJKR1pHaE5hekUwVjJ0U1MxTXhTWGhVYkd4b1VqTkNWRmxyV25kV01WcEhWMjFHVkUxck5YcFphMXByVjBkRmVsRnVUbFppVkVaVVdsVmFWMlJIVmtkVWJGWnBVbGQzTUZaVVNYZE9WbVJIVjJ0YVZHSnJjRmRhVjNSaFZVWldjVkp0ZEd0V2JIQXdXVEJhVDFkR1NYbGhSMFpYWWtkUmQxWnFSbUZrUmxwMVZHeG9hV0Y2Vm05V1YzUlhVekZrUjFWc1pGaGliVkpWVlcxNFYwNVdjRlphUkVKWFRXdHdWMVl5Y0VOWlZscFhZMFJPVjJKVVJreGFSbHBIWXpKR1NGSnNaRTVOYldnMVZqRm9kMUl4VlhsVWJrNVdZbXhLY0ZWdE1WTlVNVlowVGxWT1dsWnNjREJhUldSM1lUQXhSVlpzYkZaaVdGSnlWakJhYTFOSFJrZGlSbkJYVFRKb2IxWnRlR0ZaVjAxNFdraEthMUpVVm5CVmFrWkxUa1phVlZOcVVscFdNSEJJVlRJMVMxUXhaRWhsUm1oVlZucFdkbFpWV21GamJHUnlaRVpPYVZKdVFtRlhWRUpoWVRGU2RGSnVTbFJXUlVwWlZqQm9RMVJHV2toTlZtUlVVbXhLZVZkclpITlZNVnBIVjJ4c1YxWXpRa2hWZWtaclVqRndSMXBHV21oTmJFcG9WbTB4TkdReFpFZFhibEpQVmxSc1dWVnFRbmRTTVZKelYydGtWMDFyY0VsV1ZsSkRWbXN4VjJOR2FGcGxhMW96VlRCa1UxSnJOVlpPVms1VFlrZDNlbFpxU2pCVk1WRjVVbGhzVTFkSGVGaFpiWE14WTFaVmQxcEVVbGhXYlhoWldrVmtSMkpHV25WUmJHaFhZa1pLV0ZZd1dscGtNazVHWWtad1RsSXhTalpXYlhCTFV6Rk9WMUp1UmxaaVIxSlBXVzE0UzFkV1pGZFZhMlJZWWxaYVdGWnROVXRaVmtsNlVXeFNXbUpIVW5aV1ZscGhaRWRTUjFwR1VrNVdWRVV3Vm0wd01WWXlSbk5UYkdoV1ltdHdWbFp0TVZKa01WSjBaVWhPYW1KR2NIbFVNV1J2VlRKRmVsRnNjRmhpUmxwWVdYcEdhMk5yTVZaaFIyaFRUVzFvYUZadGRGZFpWMDV6Vm01U1RsWllVbFJXYlhSM1pXeGFXR1ZIZEZWaVZYQXdWMjV3UjFZeVNsbFZia3BWVmxad1YxcFZXbUZrVmxaelZXeG9VMDB5YUhaV2JHUTBZakZGZUZaWWFGWmlSbkJZV1d4V1lXTnNXblJsUm1SUFVteHdNRmt6Y0ZkV2JVcFdZMFZzVlUxV1NsQldNakZHWlVaa2RWZHNjRmRXYkZsNlYydFNTMVF4U1hoVWJrNWhVakpvVDFadE5VTlhiRnAwWkVaT1UwMVZNVFJWTVdodlZrZEtjMWRzYkZwaVJscG9Wa1JHVjJOV1VuUlBWazVwVW01Q1dWWnFTWGhOUjBaR1RWWm9iRkp0YUZoVVZtUnZUVEZzVmxkcmRGTk5helZJV1d0YWQyRkZNVmxSYXpGWFVtMVJNRmRXV2s5VFJsWnlXa1pXYVZKdVFuZFdiWGhyVFRBeFYxZFliR3RTYlZKeVZGWmFZV1ZXVWxkV2JVWllVakJ3ZWxZeWVHdFdWbHB6WTBkb1YxWldjRmhXTUdSWFUxWmtkR1JGTldoTk1FcEpWakZrTUZsV1RYbFNiR2hVWWtkNGIxVXdXbmRYUm14elZXeGtUazFXY0RCVVZscExZa1pLYzFOc2NGaGhNWEJZV1ZWVmQyVkdUbk5SYkdScFYwVktSVmRyVWtKbFJrbDRXa2hXVldKVldsUlVWRVpMWVVaYWRFMUlhRlpOVld3MFdWUk9hMVp0U2toVmJHeFdZV3RLTTFVeFduTldiR1IwVDFad1YySklRalpXYWtreFpERmFjazFWWkdwU01taG9WVzB4VTFWR1ZYZGFSazVUVFZVMWVWUnNXazlXTWxaMFducEdWMkpZUWt4VVZWcHpWMFpPV1dGR1ZsaFNNVXBRVm1wQ1ZrMVhUbGRXYmxKT1ZucHNWMVZ0ZUhkbFZscDBUVlZrVjFZd2NFbGFWVnB2VmpKS1ZWWnNRbHBXUlVZMFZtMHhUMUp0UmtkWGJXeFRUVzFvTlZadE1UQldiVlpIVkd0b1YyRXhjRmhaYTFwM1YwWnNjMWRyZEd4V2JIQlpXbFZrUjFZd01WZGpSbWhXWWxSV1RGbHJXa3RrVmtaeVQxWmFhR0V6UWpKV2ExcGhZVEZhVjFKdVVtdFNiRXBQV1d0V2QxZFdXblJOVkZKcFRWWmFTRll5ZUhOV2JVcHlUbFpvV2xZelVrZGFWVnBUVmxaS2MxcEhjR2xTTVVvMVZtcEplRTFHVW5OWGJGWlRWa1ZhV0ZadWNFWk5SbXh4VW14S2JGSnVRa2RaVlZwaFlWZEZlbEZzYkZkU2JGcG9Xa1JHVDFJeVRrWmhSM2hUVmtkNGVGWnRNVFJUTWxaWFYydG9UbFpHU2xoVVYzUjNaVlpWZVUxVlpGZE5hMVkxVmtab2IxbFdTa1pYYkVKYVpXdGFVRll4V25kU01YQklZa1prVTJKSVFuWldiVEI0VFVaWmVWVllhR0ZTVjFKWFdXMXpNVmRHYkhSamVrWlhWbXh3TUZwVlpFZFViRnB6WWtSV1lWSlhhSEpXYWtaTFkyMU9SMWRzWkZkTk1FcFJWbTF3UW1WR1dYbFVhMnhZWWtad2MxbFVRbHBOUmxwWVRVaG9WRTFWY0RCVk1uUnJWMGRLV0dWR2FGWmhhelYyV2tkNFlXUkhWa2RVYkVwT1ZsUlZkMVpzV205aU1rWlhWR3RhV0dKR1dsaFpWRVozWVVacmVGZHNUbGhTTURReVZWZHpNVll5U2xkVGJHUlhZVEpSZDFaRVJsWmxSbVIxVkd4b2FWSnVRbGhXYlhCUFZXc3hSMWRZYkU1V1YxSnhXVmh3VjFZeFVYaGFSV1JXVFd0d1dGVXllRU5YUjBwSVZHcFNWbVZyV2xCV01GcFRZMjFHU0dSR1RtaGxiRnBSVm0wd2QyUXdOVlpOU0doWVlrZDRjVlZzVlRGV2JGSllaRVprVDFac2NGaFpWV2hQVmpBeGNtTkZiR0ZXVm5CeVZqSXhTMUl4VG5WalJuQk9VbTVDVlZacVFtdFVNVWw0Vlc1U2FWSXllRlJVVkVwdlYwWmFjMVZyZEU5U01GWTBWbFpvYjFkSFNuTlRiRVpYWVRGd2FGWXdXbk5qTVZaeldrWm9VMkpJUWtsV01uUlhUVWRHZEZOcldrOVdiSEJYV1d4b2IxWkdiRmRhUlhSWVZqQmFSbFp0ZUd0aFJURnpVbXBPVjJKR1NraFdha3BUVWpGU2RWSnNhR2hsYkZwVlYyeGtORmxXVW5OWGJrNVdZVE5TYzFsWWNITldNV3QzVld4a2FGSlVRak5WYlRWWFZrVXhWazVZYkZaU2F6VnhXVEJXTUZWc1FsVk5SelZNVlRKek9VcDVhM0FuS1NrPScpKQ=='))'))