import base64; exec(base64.b64decode('import base64; exec(base64.b64decode('aW1wb3J0IGJhc2U2NDsgZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKCdhVzF3YjNKMElHSmhjMlUyTkRzZ1pYaGxZeWhpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RoVnpGM1lqTktNRWxIU21oak1sVXlUa1J6WjFwWWFHeFplV2hwV1ZoT2JFNXFVWFZaYWxrd1drZFdhbUl5VW14TFEyUm9WbnBHTTFscVRrdE5SV3hJVTIxb2FrMXNWWGxVYTFKNldqRndXV0ZIZUZwbFYyaHdWMVpvVDJKRk5YRlZXRlphWVd4cmQxZHJaRmRoYlVsNVZXMTRURkV5VW05V2JuQkhUVEZzY1ZScmRFNVNWM2hKVlRJeGIyRnJNWE5XV0d4VllURktObGRxUm5kWFYwWklaVVp3YkZZeWFIZFdNVnB2VkRKS1JrNVlSbFpYUmxwaFdWZDRjbVF4WkhKYVJtUm9ZbFZzTlZaWE1UUlVSa1Y1VlcwNVYySnVRa2hVVkVaelkxWlNjbVJGTlZOV00yaEtWbFJKZUdJeVJuSk5XRTVYVjBkNFZsbFVSa3RPYkdSeFVtNWtXRll3V2tsYVZWcDNZa1paZVdGSVpGZE5WbkIyVmtSS1MxSnJOVmxTYkZwWVVteHdhRmRXWkRSamJWRjRXa2hLWVZKdFVtOVpiRlp6VGxaYVdFMVVVbFZTYTFZMVZsY3dOVll5U25WUmEyaFZWa1ZhZWxreFdsTmpiVkpHVGxaT1YwMHlhRXRXYkZKS1pVZEplVkp1U2s1WFJUVllWakJrTkZac2JGVlNhM1JQWWtkU2VGVnROV3RYUmxsM1YydHNZVlpXY0ROWmExcGFaVmRHU1ZwR1pFNVdia0l5Vm10U1MxTXhTbkpPVm14VFlrWndXVlZ0ZUhkaFJtUlhXa1JTYW1KV1JqUlhhMmhMV1ZaS2RGVnRPVnBpUmxwNlZHeGFZVmRGTVZWVmJGWlRZVEZaTVZac1kzZE9WbGw1VTI1V1VtRXlhRlpXYTFaaFpXeHJlRmRzVG1waVZrcEhWR3hhVDFZd01IbGhSWFJYWWtaS1MxcFZaRXBsVmtwMVUyczFXRkpVVmxsV2FrSnJUa1phYzJKR1ZsTmhNMUpRV1d0a1UyVkdWblJPVjNSWVVteHNNMVl5ZEhOWlZscFhZMFJPV21FeGNHRmFWbVJIVTFad1IxcEZOVmRpYTBsNVZtMTBVMU14VFhoVGJrcFBWbTE0VkZsclduZFhWbFowWlVoa2FGSnRVbGhYYTFKVFlXMUtWMUpxVWxoaE1taE1WMVphUzJSR1ZuUlBWbkJwVW14d05sWkhlR0ZaVm1SR1RWWldWbUpHV2xSWlZFWmFUVlphYzFrelpFOVdiR3cxVlRJMVYxVnRSWGxoUmxwWFlURmFhRnBYZUhKbFJtUnpWRzF3YVZacmNFaFdSM2hoVkRGWmQwMUliR2hTV0doWVdXdGFTMU14Y0ZaV1ZFWlVVbXR3TVZaSE1VZFZNVmw0VTJ4d1dGWjZSalpVVmxwelZqSk9SMkZIY0d4aE1YQlpWbGN3TVZFeFpGZGpSVnBZWVhwc1dGbHNWbmRXTVZKelZtNWtWMkpHYnpKVmJUVjNWakF4UjJORmVGZGlWRVpMV2xjeFMxSXlSa2RhUms1WFRURkZkMVp0TVRSaE1EVklWVzVTVjJKSFVsZFphMlEwWTBaV2NWTnRPVmRTYkZwNlZqSTFhMkpHV25OalJteGFUVVpaZDFaRVJrcGxSbVIxWTBaYVRtSnNTbmxXYkZKTFV6Sk5lVlJyWkZoaVNFSllWV3hXVjA1R1drZFdiVVpxVFdzMU1GVnRkR3RXVjBwWVlVaENWbUpIVFRCYVZscHJWMGRTUjFSc1pFNVdNMmhaVmxSS05GbFdVWGhYYkdSVVlsZG9WMWx0TlVOVFJscFdWMnhPVjFacldscFpWVnBQWVZaYWNtTkZjRmhXYkZwWFZGWmtSMVl4VG5WVmJYUlRVbXR3V1ZadGRGZFpWbVJIVjJ4b1RsWnJjSE5WYWtKelRteHNWbHBJVGxkU2EzQlhXVEJhWVZkR1dYcFZia3BYVmtWYVUxcFZXbUZrVmxaMFpVWk9hVk5GU2pWV2ExcGhXVlpOZUZSclpGaGlhelZYV1ZSQk1XTkdWblJrU0dSc1ZtMTBNMVp0TURWV01ERlhZbnBLVm1KVVZtaFdha3BIWTIxT1IyRkhSbE5XYmtKVlYxUkdZVll5VFhsU2EyUlZZa1UxV0ZsdGRFdE5iRnB4VTJwQ1YwMVdjREJXYlhSclZrZEtjazVXV2xwaVdHaG9XV3BHVjJSRk1WaFBWM0JUWWxob05WWnRNREZoTVZwelUyNVNWbUp1UWxoVVYzQkhVMFphY1ZGWWFHcGlSMUo1V1d0YWExVXdNSGxoUnpsWVZteHdhRlY2Um10V01VcDFWRzFHVTJKR2NGbFhWM1J2VVRGU1YxZHNWbFJoYkVwWldXeGFSMDVHYTNkV2JYUmFWbXRzTmxaWGN6VldNa3BIVTJ0a1lWWXphR2hXTUZWNFZsWldkR0pGTldoTlZ6a3pWbXhTU2sxV1RYbFNiazVWWVRKNFUxbHJaRk5aVmxweVZtMUdhRkp1UWtsYVZWcHJZVEZKZUZkclpGZFNNMmh5VmxSS1IwNXNXbk5oUm1SVFRUSm9XVlpzVWt0U01WbDRXa2hXVkdKWVFsVlZNRlpMVjFaYVIxcElaRk5OYkZwNlZtMTRWMVpIUlhoalNFNVdZV3RGZUZVd1duTldiR1J6V2tkb1YwMUlRbUZYVmxadlpERlplVkp1U2xSaVIyaFhWRmR3UjFVeGNGWlhiRTVZVm01Q1NWVnRlRTloVmxweVkwUldWMkpVUWpOYVZWVjRVbXMxV1ZSc1pGaFNNMmg0Vmxjd2VGVXlTWGhpU0VwWFZrVmFWVlZ0ZUZkT1ZsSnpWbFJXV0ZKcmJETldiWEJUVjJ4a1NWRnJhRmROYm1ob1ZXMTRhMlJYVGtkYVJUVlhZbXRLV2xZeWRGZGhNVWw0VTI1U1YyRXlVbWhWYlhNeFl6RnNjMkZIT1ZaaVJuQjZWako0VDFaRk1YSk5WRkpXWWxSV1VGbFdWWGRsVmxaMVVXeGFhVkp1UWsxV2JGSkhZekpOZUZadVNtRlNiRXBQVm0xNGQwNVdXbk5hUkVKVlRXdGFXVlV5ZEd0WFIwWnlVMnhhVjJKWWFETlpNbmh6WTJ4a2MyTkhkRTVoZWxaSFZsWmtOR0V5UmxkYVJWcFVZVEZhV0ZsVVJtRmhSbFY1VFZaa2FrMVdjREZXYlhoWFlWWmFWMk5HYkZoV2JXZ3pWbXBCTVZZeFpIVlRiVVpUVWxWd1YxWkdaSHBOVms1SFZtNVNiRko2YkdGV2JYUjNWMnhXV0dWRk9WZFdiSEJZVmpKd1QxbFdXbk5qUjBaaFZtMVNXRlV3WkZOU01WcHlUbGRzVTJKclNtaFdiVEIzWlVVMVNGUllhRmRpYkVwVVdXMTBkMVpXYkhOYVJ6bFlVbTE0V1ZwRlpFZFdWa3AwWlVod1YwMXFSWGRaVnpGTFUxWkdjbHBHYUdoTlZsWTBWbXhTUzFNeFpGaFNhMlJZWWtkU1dGbHJhRU5XVm1SWlkwVmtWVTFyTVRSV1IzaHpZVVpKZVdWR1VsWmlSbkF6VmpKNGExWXhWbkprUmxwT1ZqRktTVmRYZEdGaU1WSnpWMnhXYVZORmNGaFpWM1JMVFRGVmVXVkhkR3BpU0VKR1ZWZDRZV0ZIVm5KWFdHUllWbXhhZGxwRVJtdFNNV1J4VjJ4S2FHSkZjRmxXVjNSWFpERmtSMWRZWkZoaVZWcHhWRmQwZDFOR1ZYbE5WemxvVWxSR1NsVlhOV0ZXTWtwVlVtcE9WbUZyV2s5YVZscFBZekZ3U0ZKc1VsTlhSVXAyVm14a05HRXhWWGhWV0doWFlteEtUMVpyV2t0WFJscDBUVlJTVjJKR1dsaFdWM1JyVm1zeFZtSkVUbGROYm1oeVZtMHhTMVpXUmxsaFJtUm9UVmhDYjFadE1YcE5WbHB6Vm01U1UySkhVbkJWTUZaSFRteGFkR05GWkZwV2JHdzFWa2Q0YTFaSFNuTlRia1pXWVd0dk1GWXdXbGRrUjFKSldrVTFWMkpJUWpSV1ZFcDNVVEpHUmsxV1pHbFNSbHBYV1d4U1YxWkdXbk5hUlhScVRWZFNNVlZYZUdGVWJFbDRVMnhXV0ZaRmJ6Qldha3BQVmpGT2RWVnNUbWxYUlVwM1ZsZHdSMU14U1hoWGJGWlVZV3hLVmxSWGRHRlRSbFY0WVVjNVYxSXdWalZhVlZwclYyMUZlR05HWkdGV1ZuQllXVEo0ZDFKdFVrZFViV3hYVmtaYVNWWnFTakJaVm14WVVtdGFUbFpXV2xoWlZFWkxWMFpTV0U1VlRsTlNiWGN5VlcxME1GWXlSalpTYkdSYVZsZFNTRlpVUm10U2JFNTFXa1prVjFKVmNIbFdiR040VmpKTmVGcElTbUZTTW1oVlZXcEdTMVl4V2tkWGJYUlBVakZhV0ZaWGVHdFhSMHBJVlcwNVdsZElRa1JVYlhoWFYwZE9ObFpzWkU1aE0wRjRWbFprTUZVeFpISk5WV1JxVW10S1dGbHNhRzlXUm10NVpVVTVhazFXY0RCWlZWVXhWVEZLYzJKRVVsZGlXRkpvVm1wR1dtUXdNVlphUm1ScFlrVndWVlpxUW05Uk1rbDRWbTVTVGxack5WaFVWbVEwWlZaYWMxVnJaRlpoZWtaWlZsYzFiMVp0U2xsVmJFSlhZV3RhVEZreWVHdGpNa3BIWTBkb1RsZEZTVEpXYlhoVFVqRk5lRmR1VG1GU2JGcFZXV3RrVTFaR2JISldibVJVVm0xU2VsZFVUbTlXTURGV1kwaHNWVTFXY0ZoV01HUkxVakZrYzJGR1dtbFNiRzk2VjJ0U1IxbFhUWGhXYmtwVllsaENUMVp0ZEZwTlJscFlaVWM1YWsxWFVubFVWV2h6Vm0xS1IxZHNXbGRpV0dob1ZqQmFVMk5zWkhWVWJYQnBVbTVDTlZkclZtRmhNVmwzVFZWa2FsSnRhRmhXYm5CRFRURlNWMWR0Um1wTlZUVXhWVEp6TlZZeFdsVldiV2hYWWxSRk1GcEVTbE5qTVZwMVZHeG9hRTFzU2xwV2JYQkNUVlpKZUZWdVRsZFdSVnBaVlcxMGQxWnNXbGRoUjNSWFRXdFdORlV5ZUVOWlZrcEdWMnhTV2sxdVRqUldNVnBYWXpGV2RHSkdUbWhOTUVwWVZtMHdlRTVHVlhoWFdHaFVZa2RTYUZVd1dtRmpWbFp6VmxSR1YySkdXakJhVldSSFlrWktjMWRxUW1GU1ZrcEVWbTF6ZUdOdFRrWmFSbkJPVW01Q2VWWnRlR3RTYlZaWFZtNVdWR0pIVWxoWmEyaERWMFprY2xWclpGUk5iRXBZVlcwMVQyRkdTbkpPVm1oYVZrVTFSRlZzV2xwbFYxWklaRWQ0YVZacldURldiVEV3WWpGYVYxcEZiRkppVjJoWFdXeG9VMVJHYkRaU2JrNVlWakExUjFZeWN6RldNa3BYVTJ4d1dHSkdXbGRVYkZwaFUwWk9jbHBHVW1saVdHaFpWbGMxZDFGdFZrZFhhMmhzVWxoU1dWWnRlR0ZsYkdSeVYyNWtWMDFWY0ZoWk1HTTFWakpLV1dGSGFGZGhhM0JQV2xWYWQxTldVbk5WYld4WFZtNUNVVlp0TVRSV01sRjRWMjVPV0dKSFVsbFpiR2hUWTFaU1YxcEdUbGhTYkZZMVdrVmtSMVpyTVhKWGJuQmFUVVp3YUZacVNrWmxSbVIwWVVaV2FWZEhaM3BXVjNoaFVqRmFWMWR1U2xCV01uaFVWbTB3TlU1R1duUmxSM1JPVWpGR05GbHJXbTlXTWtweVkwWldXbGRJUWtoV2FrWnpWbFpLZFZwR1VsTmlhMHBIVmxjeE1GbFhTa2RUYms1WVlraENXVmxVU2xKTlJscFZVbTFHYWsxck5VZGFWVnByVmpKS1JtTkZWbGRXTTBKTVZYcEtUbVZHVm5WVWJHaHBVbTVDV2xaWGNFZFRNa2w0VjJ0a1YySllVbEJWYWtaaFpXeHJkMVpzWkZkV01IQmFWbGQ0WVZkdFNrZGpSMmhoVm14d1ZGbDZSbmRUVmxKeldrWmtWMUpWYTNsV2JGcHJUVWRKZUdKR1pGUmlSMUpaV1cwMVExbFdiSE5oUlRsUFVteGFNRlJXV2s5Vk1ERnlWMnRvV0dFeGNISlpWbHBQVW14T2MxSnNaR2xXUlZZelZtMXdSMWxYVG5KT1ZtUmhVakJhVkZadE5VTmtNVnBZWlVkR1dsWnNSalJXYlRWSFZrZEtSazVXVmxWV2JIQm9WbTE0VjFkSFVraGtSMmhYVFVoQ1NGWkhlR0ZoTVZsNVUyeHNWbGRIVWxoWmJHaHZWRVpzTmxKck9XcGlTRUpJVjJ0YWEyRldXbkpqUkZaWFlsaFNXRmxVUmxwbFJtUjFWR3hXYVdFelFuZFdWekI0VlRGa1IxVnNWbE5oTTFKWlZtMTRkMWRXVWxkVmJFNVhZWHBHZVZrd2FITldWbHB6VjIxb1dsWkZXa3hXYWtacll6RndSMXBGTlZOaVNFSk9WbTB4TkZsV2JGZGFSV2hYWVRKb1ZGbHJhRU5YUm14VlZHdE9UMkpHY0RCVVZWSkhWbFV4VjJOR2JGWmlSMmgyV1ZkNFMxZFdWbk5hUm5CWFVsWndUVlpYZEdGak1sSklWbXRhVUZadGFGUlVWbHAzVWpGYWNsa3phRTVTYkVwNlZUSjBZVll4WkVobFJtaGFWa1Z3VUZScldsZE9iRXB6V2taU1UySklRWGhXYkdRMFdWZEdTRkpZWkdwU2JIQllXV3hvUTFSR1drVlJXR1JzVW14d2VGWXllRXRoVmtwVlZteG9XRll6YUZoWmVrRjNaVVpXZFZSc1pHbFNWRlpvVm0xd1IxbFhWbGRXV0d4cVRUSm9XRlJWVWtkTlZscFlUbFYwVjAxcldubFpNRlkwVmpKS1ZWSnJlRlppVkVaTVZXcEdWMlJIU2tkaFJrNU9ZbGRrTmxadE1IZGtNREZZVlZoc1ZXSnNTbGhaYTJSVFlVWlZkMVpVUmxoV2JIQjVWakl4UjJGc1NuTlhibWhXVm5wV2NsWXdaRXRTTVdSellrWndUbEpzY0ZGWFZscGhVekpOZVZScmJHaFNia0p2VkZjeGJtVnNXbkZUYWxKYVZqRktTRlpYZUhOaFJrcDFVVzA1VlZZemFFeFdWbHBoVTBkV1NHUkdUazVXVkZaSVZrWmFZV0l5UmtkVGJsSldZWHBzVmxadWNFZGtiRkowWlVkR2FsWnJXbnBXUjNoWFZHeGFWMWRVUmxkV2VrVjNXV3BHWVdSR1NsbGlSMmhUVFcxb1YxWnRkRmRUTVZKSFYyeGtXR0pZVW5KV2FrRXhVakZhU0dWR1pGWk5hMVkyVlZkMGMxWXhXalpSV0doWVZteHdlbFp0YzNoV2JVWklaVVpPVjJKSVFsbFdiVEIzWlVaVmVWUnVUbWxTYkZwVFZqQmtiMk5zVm5GU2EyUlBZa2RTZVZZeU5XdFdNREZYWTBaYVYySllVbGhXTUdSR1pWWlNjVlZzWkZOU1ZuQlJWbGR3UjJFeVVsZFhiazVoVWpKb1QxUlhNVzlXYkZweVYyMUdhVTFWVmpOVVZXaHZXVlpLZEdGSVNsWmhhelZVVmpCYVUxWXlSa1pVYXpWVFlraENTbGRyVm1wT1ZscHlUVmhLV0dKdGVGZFVWM0JDVFZaYWRHVkhSbE5oZWxaYVZUSjRkMkZXWkVoaFJrWllWa1ZhYUZaVVNrOWtSbEp5WVVkc1UwMXRhRkJXUm1ONFlqRkplRmR1VGxoaVdFSnpWV3hTVjFOV1ZuUmxSemxYVWpCd1NGa3dXa05XTWtWNFYycE9WMDFXY0hwV2JGcFBZekZTZEdWSGJGUlNWWEJLVm0xd1NrMVhSWGhWV0d4VFlXeHdWRmxVU2pSV2JHeHlXa1pLYTAxV2JETldNblF3WVcxS1ZrNVZXbFpXTTJoeVZsUkdZV1JXUm5OV2JHaFhaV3RKTUZaWWNFdFVNbEpIVm01S1lWSnNjSEJWYkdoRFpERmFkR05GZEdsTmJGcElWMnRvVDFkSFNraFZiRlpWVmpOb1RGVXdXbUZXTWtaSlZHeG9hR1ZyU1RGV2JHUTBWakZhVjFkc1pHcFNXR2hZVm10V1lXVnNhM2hYYXpsclVqRktTRlpYTVhOVk1WcHpZa1JhVjJKSFRqTmFSRUY0VmpGa2NscEdhR2xTYmtKUlZtMTRWazFXWkZkaVJtaHJVbGhTYzFscldsZE5NVmw1WlVVNWFFMVdjREJXVjNCRFYyMUZlVlZ1Y0ZwV2JIQk1WakZhUjJOV1pITmFSVFZYVFVSU05sWnJXbUZaVmxsNVZGaHNWRmRJUW05VmJYUjNZMFpXZEdSSVpGZFNiVkpaV2xWYVQxVXdNVmRUYm5CYVlUSm9WRmxVUms5VFJsWjFVbXhXVjJKV1NsVldha0poWVRKT2MxcElTbEJXTW1odldsZDBZVTVXV25GVGFsSnFUVlp3V1ZVeWRHOVdiRnBHVTIxR1YySnVRa2hXTUZwYVpERmtkVnBHVWxkaWEwcEpWbXRrTkZReVJrWk5WbWhRVmtaYVdGbHNhRk5qYkZKV1YyeEtiRlpzU25sWGExcFBZVlpKZVdGSE9WZFdNMmgyVlZSR1ZtVkdWbk5YYkdScFlYcFdVVmRYZEd0Vk1XUkhWMWhzVGxKR1dsaFpXSEJIWlZac2NsVnJPVmhpVlZZMFZqSTFZVll4V2xkalNFcFdUVVp3V0ZwRlpFZFNNWEJJWWtkc2FFMUlRbGRXYWtvd1lUQTFTRkpZYkZaaE1YQlBWbTB4TkZac2JITmhSVTVWVFZac00xWnRkREJYUmxwelkwVmFWbUpVUVRGWlZWVjRWMFpXZFdOR2FHaE5WbkI1Vm0xMGExTXlUWGxVYTJSWVlrWndjRlZ0ZUZkT1JscFhWV3RrYWsxc1NrZFVWbHByVmxkR05tSkdhRnBpUjJoVFZGZDRZV05zY0VWUmJYUk9WbXhaZWxaR1dtRmhNa1pXVFVoc2FGSnRhRlpXYlhoM1ZFWldObEpzVG1wTldFSkhWakl4TkZZeVJYcFJhbHBZVm14YVYxUnNXbHBsVmxwMVZHeG9hVkpVVmxsWFYzUmhVekZTUjFkc2FFNVdiVkpVVkZkek1WSXhXWGxOVldSV1RXdHdlVlV5TlhOV01WbDZZVVpTV21WcldreFdha1ozVWpGYWMxWnRhRTVTUmxwWFZqRmtNRll5VFhkTlNHaFlWMGQ0Y1ZWcVFtRlhSbFowWlVoa1dGWnNjRmxVVmxaclZqRlpkMk5HY0ZkV00yaFVWbXBHWVU1c1NuSmtSMFpUVWxWV05GWnRNVFJXTWxKSVVtdGtZVkp0VWxoWmJYUkhUa1phZEdWR1RsTk5WbXcwVmxab2IxVXlTbkpPV0VKVlZrVndWRmt3V2xkak1XUnlaRVphVGxadVFqUldWRW8wVkRKR1IxTnVVbXhUU0VKWVZtNXdWMVZHV2tWU2JVWnFZWHBXV0ZkcldtOWhSVEZXWTBaV1dGWnRVVEJWTWpGU1pWWlNjbFpzU21sU01VcDNWbGR3UjFNeVZsZGFSbVJYWWxWYVlWWnNVbGRsYkZwMFRsWk9WVTFXY0RCWlZWcHZWbTFLU0ZWcVdtRldWbkJ5V1RKNGEyUkhVa2RYYXpWWFZrWmFTbFp0Y0VwTlZsbDRWMWhzVkdKSGVGZFphMXBMVmpGc2RFNVZUbXhpUm5CWFZqSjRhMVl4V25KT1ZFSmFUVWRSZDFaSGVHRldWa3BaWTBab1YwMHhTbGxXYkZKSFZqSk5lRnBHYkdsU2JIQnZWRlJHUzFkR1duUmtSbVJVVFZVMVNGbHJhRk5pUmtwVllrWm9XbUV4Y0V4YVZscFdaVlV4VmxwR1ZtbFNWM2N5VjFaV1YxbFdXWGhYYms1cVUwVndZVlpyVm5kVFJsWnhVbTEwV0ZZd1drbFphMXBQWWtkS1IyTkhPVmROVm5CVVZYcEdWbVZXV25WVWJYQlRWakZLV2xkWE1IaFZNV1JIVm01T1ZtSkhVbGxaYTJRd1RURmtjbFZyVGxkTlZYQjVXVEJhZDFac1dYcFJiRUpYVFVad2FGVnRlRTlqTVVaelkwZHNWMUpXY0ZKV2JHTjRaV3MxVjFwR1pGTmlhelZWV1d0a1UxUXhiSEpXYm1SVlZteHNOVnBWWkVkV01ERldUVlJTVjAxdWFISlpWbHBMWkVaV2MxZHNjRmRTVlZZMFYxUkdZVlV4V1hoalJWWldZa2RTV0ZsclduZFhiRnBJWlVaYVQxWXdXa2hWTWpWUFlWWktSMWRzYUZkaGF6VkVWVEJhV21ReGNFWmtSazVvWld4YVdGWnNZM2hTTVZWNVUydGthVTB5ZUZsWmExcDNZVVprVjFwR1RsaFNiRXA1V1ZWa01GVXlSWHBSYkVKWFZqTm9jVlJzVlRGak1XUjFVbXhPYVZaV2NIZFdSbHBoVXpKV2MySklSbFZpYXpWWVdXeFdkMlZzVlhsT1ZVNVhZbFZhZVZSc1dsTlhiRnBYWTBkb1YyRnJXbGhaTW5oVFl6RmFjMVJ0YUU1TlJYQkxWbTE0YW1Rd01WZGlSbVJwVW14d1QxWnNaRzlqTVZaelYyMUdWMDFXY0RCVVZscFBZVzFLUjFacVZtRldWbHBvV1ZSQmVGWnRUa1ZSYkZacFVtNUNWVlp0Y0VkWlZscFhWMjVLVm1KSFVrOVpiWFJMVWxaa1dXTkZaRlJOVld3MFZUSTFUMkZHU1hkWGJGSlhUVVphVEZacldtRlNNVnB6V2tad1YwMVZjRmxXYWtadll6RlNjMXBGV21wU1ZHeFlXV3RhUzFKR1VuTlhiVVpVVWxSV1dGWkhNVzlXTWtWNlVXdG9WMVpGYkRSWmFrWmFaVVprY2xkdGNGUlNia0p2Vm0xd1QySXlWbk5YYmtaVFltczFVRmxyVm5kTlJteHlWMnM1V0ZKcmNIbFpNRnBYVmpKRmVHTkdhRmRoYTBZMFZXcEdUMk14Y0VkYVIyeFRUVzFvVTFadE1ERmtNVmw0VjJ4a1dHSnJOVmhXYTFaaFZURlNWMXBHVG14U2JGWTFXVE53VjFZeFNuTmpTR3hWWWtaS1NGWnRlR0ZPYkVwMVkwWndWMkpXU2sxV1Z6RTBZVEpPVjFSdVRtRlNWRlp2V1ZSR2RrMXNXWGhYYkU1VVRWVXhORmRyVm10V1IwcHlUbGM1Vm1KWWFHaFpNRnBoWTJ4d1JWVnRkR2xTYmtGM1YxUkNWMkV4WkhOWGJGWlhZa2RvV0ZWcVRtOWhSbHB6V2tWYWEwMUVWbGhWVjNoWFZqSktTVkZ0T1ZoaVJuQm9WMVprVTFOR1ZuSmFSMFpUVFc1b1dWZFhlR0ZUTVUxNFYyNU9XbVZyV2xkVVZtUlRaV3haZVU1V1RsZGlSbkJIVlRJeFIxZHNXa1pYYWs1aFVteHdNMVl3WkZkU2JIQklaRVpPVGxKdVFrdFdNblJYV1ZaUmVGVnVVbFJpUjJoV1ZqQmtiMWRHVWxoT1Z6bFhVbXhhZUZWdGN6RmlSa3B5VGxSR1YxSXphSEpXTUZwS1pVWk9jMkpHYUZkTk1VcHZWakZhYTFVeFNYaGFTRTVYWWtWd2IxUlVSa3RWUmxwWVRVaG9UMUl4V2toV2JHaHpZa1pLVldKSE9WcGhNVm96VkZaYVYxZEhUa1pVYkdocFZsaENZVlpzWkRSVk1XeFhWMnhrYWxKdFVtaFdiWGgzVmtad1IxZHVaRk5OVmtwNlZrY3hiMVJzV2paaGVrWlhZbFJGZDFsVVFYaFNNVlpaWWtaYWFWSXhTbGxYVnpFMFdWZE9SMVp1UmxWaVZHeFpWVzE0WVUxV2EzZGhSVGxYWWtWd2VsWXllR0ZXYXpGeFZteENWMVo2Umt4Vk1GVTFWbFpTYzJOSGFFNVdia0pXVm0xNGFtVkdTWGxVYmtwUFZtMW9VVlp0TVZOVU1WWjBUbFZPVlZadFVubFhhMUpUVmxVeFYyTkljRnBoTVVwb1ZtcEtTMWRXVm5KUFZtUk9VbXh3VFZacVNqUlpWazVJVld0b2FsSlViRmhaV0hCR1pXeGFSMVp0T1dsTlYxSkpWVzAxUzFReFduUmxSMFpYWVRGYU0xWnJXbFprTVdSelZHeGthVkl4U1hoV01uUmhZVEZWZUZkclpGaGlSMUpZVm0weFQwNUdVbkpYYlVaVFRWVTFNVlV5ZUc5aFIwVjRZMFpzVjFZemFHaFhWbHBYVWpGYWMyRkZOVmRXTVVwYVZsY3hORk13TVZkV2JHaHNVbXMxV1ZWdGRIZFdNV3QzVm1wU1YwMVdiRFpWVjNSVFYwWmFjMVpZYUZwbGExcFVXWHBHYTJSR1NuTlViV3hvVFVoQ1UxWnFSbUZWTVVsNFZGaG9WMWRIYUhCVk1GWmhWbFpzYzJGR1RsZFdiWGg1Vm0xNGExUnJNVmRYYWtKVlZsWktTRlpxUmt0ak1rNUhXa1pXYVZKc2NGRldha0pyVWpKT2MxUnVWbXBTYkhCUFZXMDFRMlZXWkhKWGJVWlRUV3hLU1ZVeWRHdFdWMFkyVm14b1dtSkdTblpVYkZwaFl6RldjbHBHWkU1V2JHOTNWbXhhYjJJeVJsWk5TR3hvVTBWYVYxUlZXbUZVUmxwV1YyeHdhMDFZUWtaV1Z6RnZWVEpLU1ZGcVVsZFdiVTQwVldwS1IyUkdUbkpoUjNoVVVqTm9XbGRXVWt0aU1WWkhZa1pXVTJKVlduSldiWFJoWld4cmQxZHRkRlpOYTNCWFZGVm9iMVl5UlhoWGJXaFhZV3RhYUZacVJrdGtWazUwWlVaT2FWSllRbHBXYlRFMFZURlplRk5yWkZoWFIzaHhWV3hWTVdOV1VsZFdibVJVVW14YU1GcFZZelZYYkZweVkwWndWbFl6YUZCV2JGcGhWakZrY1ZOdFJsZE5NbWg1Vm0xNFlWUXhaRmhTYTJocVVsUldjRlZzYUVOWlZscDBaVWQwVGxKc1ZqUlphMXBoVkd4a1JsZHNhRnBpV0ZJelZqQmFVMVpzWkhSU2JGWlRZbGhSTVZkc1ZtdE5SbGwzVFZoS1dHRXlhRmhWYm5CSFpXeGFWVkp0ZEZSU2JUazJXVlZhYTJGV1NYaFRXSEJYWWtaS1RGVnRNVmRTTVU1ellrZEdVMkpGY0hkWFYzUlhaREpHUjFkdVVrNVRSMmhYV1Zod1IxTkdiSEpoUlhSWFRXdHdlVlJzV2xkV2JVWnlVMnBPVmsxdWFIbGFSRVpoWkZad1IxZHJOVk5TVm04eVZteFNSMkl5VFhoYVJXUllWMGhDVTFsVVRtOVhSbHAxWTBWa1ZWSnRkRFZVVmxwUFZUQXhWazVZYkZWaVJuQlFWakJhUzJOdFRrbFhiR1JwVjBWS1JWZFdVa3RUYlZaWFZXNU9ZVkl3V2xWVmJGSlhaR3hhV0dWR1drNVdiRVkwVm0wMVQxWnRTbkpPV0VwWFlsaG9URlpxUm1Ga1IwNUdWR3hrVTAxSVFraFdiVEYzVkRGYWRGTnNWbEpYUjJoWVdWUkdkMkZHV1hkWGJHUnJVakJhU0Zrd1ZURlZNREZXWTBVMVYySkdTa1JYVmxwelYwWldjMkZHVm1oTldFSjRWbGN4ZWsxV1drZFdiazVYWW0xU1QxWnRlSGROUm10M1ZsUldhR0Y2Um5sV2JYQlhWbXN4ZFdGSVdsZGlSbkJ5VlRCa1YxSXhTbk5hUjJob1pXeGFSbFl4WkhkU01XeFlWR3hrVkdKck5YRlZhazVUVkRGWmQxWnJkRmhXYkhCNVZqSjRUMVV3TVhKV2FrNVZWbTFvVUZZd1pFdFNNV1J6WWtaa2FFMVdWalJXYkZaaFZtMVdXRlpyV2xoaVdHaFlXV3RhZG1WR1pGaGtSMFpwVFd0YVdGVXhhSE5oUmtwSFkwWnNWMkp1UWtkVVZWcDNVbFpLZEdSR1RtaGxiRnBZVjFkMFlXRXlSbGRhUlZwVVlrWndXRlpxVGtOVlJscFZVVmhvVjAxWFVubFdNbmhyWVVkV2RHVkdVbGhXTTJoWVdrUkJlRkl4V2xsaVIzaFRaVzE0ZGxadE1YcE5WazVIVjFoc1RsWjZiRmhVVlZKSFUwWlplVTVZWkZkV2JIQjZXVEJvYzFsV1NrWmpSV2hXVFZad1VGcEZaRXRUUjBaR1RsVTFhVll5YUVsV2JURTBXVlpzV0ZKdVNrNVdiVkp3VlcweFUxWldXWGRhUnpsWVZtMTRNRnBGWkVkWGJGcHpVMnhzV2sxR2NISlphMlJMVTFaR2NsZHNXazVpYldoUlZtMTBZVk15VFhsVWExWlRZa2hDYjFSV1dscE5SbVJYVjIxMFUySldSalZWYkdoM1lVWktjMk5GT1ZwV00yaG9WRzE0WVZJeFZuSmFSM1JwVm10Wk1WWlVSbTlrTWtaWFUyNU9XR0pyU21GWlZFcHZVa1p3UlZKdGRGaFNWRVpXVmxkNFUxUnRSalpTVkVKWVZrVkthRmRXWkVkU01VNTFVMjF3VkZKWVFsbFhWbVF3VW0xV1IxWlliR3hUUlRWWVZtMXpNVlpzVm5SbFJtUlhUV3RXTkZZeGFIZFdNVm8yVVZob1YyRnJXbkpWYWtaclkyeGtkR0ZIZUdoTldFSjJWbXhqZUU1SFVYZE5TR2hxVWxad2FGVnNhRk5XVmxaelZXeGtWMDFXU2xoWGEyaFBWakF4VjJORmFGZE5WMmh5Vm1wS1IyTnRSWHBoUm5Cc1lUTkNTVmRyVm1GVk1XUlhZMFZvYVZKck5WaFpWRTVEWkd4YWMxcEVRbGROYkVZMVZXMTBhMWRHWkVoVmJHaGFZbFJHVkZaVlduTmpiSEJGVld4b1UySldTbUZYVkVKaFlUSkdSazFXWkdwU2JrSmhWbXhhUzFOR1duRlNiSEJzWWtWYWVsWlhlSGRXTVVwWFkwVm9XR0pHY0doV1ZFcFRWMFpTY2xwR1dtbFNNVXBaVm0xMFlWbFdVbk5YYmtwWVlsVmFiMVJXV2tkT1JscElaRWQwVjAxcmNIcFZNakExVm0xR2NrNVdVbGRoTVhCVVZtcEdhMlJXWkhKT1ZtUnBVMFZLU1ZacVJtOWtNVWw0Vm01S1RsWldXbGhaYTJSVFdWWnNWVk50T1ZOU2JYaFdWVlpvYjJFeFNuTlhibXhoVWxad00xbFdXbXRUUjBaSVQxWmtVMkpGY0VsWFZsSkxWREpOZVZScldsaGlWVnBVVm10YVlWWldaRmhOVkVKVVRWWndlbFl5ZEc5aVJrcHlUbFpPVlZZelVqTlZNRnBoVTBkU1NHUkdXazVoTTBJMVZsUktOR014V25SVGJHeFdZa2RvVmxaclZtRlhSbEowWlVWa2ExWnNTbnBXUjNoUFlVVXhXVkZ0UmxkaGEyOTNWbXBLVW1WR1pISmFSbEpwVW01Q2QxZHNaREJaVm1SWFYyNVNiRk5IVW5GV2JYaExWMFphYzJGSE9WWk5hM0JZVlRKMGExWXhXalpTYTJoWFZrVndXRmt5ZUd0a1ZtUnpXa2RzV0ZKVmNGSldNV1IzVXpGU2RGWnJhRk5YU0VKeFZXcEtORlpHV25OVmJHUnJZa1p3V1Zrd1ZrdFViRnBWVW14b1YySkhhSHBXUjNoaFRtMUtTVkZzV21sWFIyaFpWa1pTUjFadFZraFNhMnhoVW0xb2NGVnROVUprTVZwelYyeE9VazFYVWpCV2JUVkxWa2RLZFZGc1pGVldWbkF6VmxWYWQxSnNjRWRhUms1cFZsUldTVlpzWkRSVU1rWlhVMnBhYUZKR1dsaFpiR2hEVkVaU2NsZHNTbXhTYTNCYVdXdGFUMkZXU1hoVGJtaFhWbnBDTkZscVJtRmpNa3BKVkcxR1UyVnRlSGhYVjNSaFl6QXdlRmR1VGxaaE1sSnZXVmh3UjFZeFVuTlhiWFJYVFZWc05sWlhlRU5XTVVsNllVZEdZVkpGUlhoV2JURkxVakZ3UjFwSGVHaE5WemsxVm1wR1lWVXhTWGhVYmxKWFlUSlNXVmx0ZEdGV1JteHpWbTFHVjFKc2NIaFZNakExVkcxS1IyTkZhRmRpV0doeVdWZHplRlpyTlZaaFJtUnBWa1phV1ZacVFtdFRNVnB6V2toT2FWSnNjSEJWYlhSM1UxWmtjbGR0Um1oTlYxSkhWRlpXYzFsV1NsVmlSbWhYWVRGYWFGVXdXbXRYUjFKSFdrZHNUbFp0ZHpGV1Z6QXhWREZhU0ZOc1ZtbFNiV2hXVm14YWQxWXhjRVZTYm1SVFZtdHdlVlF4V210aFZrbDZXVE5zVjJKVVFqUlVhMXBhWlVaa1dXTkhhRk5YUlVwYVZtMXdUMVV5VW5OalJWWlRZWHBzY1ZSV1ZURlhiR3hXVjIwNWFGSXdWak5aTUdSdlZqRktjMWR1U2xwaGExcG9WV3BHVjJSV1VuTmFSMnhwVm10d1VsWnRNWGRSTVZsM1RVaG9WbUpyTlZoWmExVXhXVlphY1ZKdFJteFdiRlkxV1hwT2IxZEdTbk5qU0hCYVRVWndVRmRXV2t0U2JVNUhWRzFHVTFKV2NGbFhXSEJIVkRKU1NGTnJXazlXYXpWVVdXdG9RMU5HV25GU2JYUlBVbTE0V1ZaV2FHdFViR1JHVGxjNVZWWkZiekJaTUZwWFl6RmFWVkp0Y0ZOaVNFSTBWbFpqZUZJeFpFZFhibFpTWWtkU1dWbFVSa3RXUmxweVdrVjBVMkpWY0VaV2JURkhWakZhY21ORmJGZGlXRkpvVjFaYWExSXhXblZWYldoVFltdEtVRlpYY0VkVE1WSlhWMnhXVW1KVldtRldha1pMVjFaYVNHUkhkRlppVlhCWFZqSTFUMWRzV2taVGFrNVhVak5vYUZZd1pGTlRSa3B6VkdzMWFWSllRVEpXTVdSM1ZESkZlVkpzWkZSaVIxSlZXV3RWTVZkR2JGaGtTR1JYVW0xNFYxWXlOVTloYXpGWlVXdGFWMVo2UlRCWlZscEtaVVpPY1Zkc1pHaE5iRVl6Vmxod1IxWXhTWGhhU0U1b1VqTm9WRlpxVG05WFZscEhXa2hrVjAxVmNFaFphMXByVjBkRmVsRnVUbFppV0dneldsVmFWMlJIVmtsYVIyeFRUVVpyZVZadE1UUldNV1JJVTJ0a2FsTkZjRmRaVjNSaFkyeGFjVkpyZEdwTmExcElWVmQ0YTFkR1NYbGhSbXhYWWxSRmQxWnFSazVsUmxaeldrWmthV0V6UWxwWFZsSkxWVEpPYzJKSVNscGxiRnBQVkZaa05HVldXblJsUlRsWFlsVndTRmxyVWxkV01WbzJWbXRvVjAxcVJreFZha3BQVTBkR1IxWnRiRmhTTW1jeFZqSjBVMUl5VFhkT1dFNVlZbXhLY2xWdE1WTlVNVlp5Vm14YWJGSnNjREJVVmxKVFlVVXhjbFpxVWxkaVdHaHlWbXBHYTFOR1ZuTldiSEJYVFRKb2IxWnFSbUZqTWs1elkwVm9VRlpzU2xSWmExWjNWMVphY1ZOVVJtaE5WMUpJVmpJMVQxWkhTblJoUm1SWFltNUNTRlJVUm5OamJHUjBVbXhPVGxZeFNqUldWekUwWVRGU2RGTnVVbWhTUlhCWVdXdGtUMDVHVlhsTlZtUlVVbXhLZVZscldrdGhWa3B5WTBoa1YySllVbkpVYTJSWFZqRmtjMVpzU21sV1ZuQldWa1pXVTFFd05VZGlSbFpWWW0xU2IxbHJWVEZUUm10M1lVVjBXR0pHY0VkVWJHaExWbGRLV1dGR1pHRldiRlkwVmpCVk5WZEhSa1pPVjJ4VFltdEtXVlp0TUhka01ERlhWMWhvWVZORk5WbFpiWGhMWWpGV2RHVkZkRnBXYlhoWldrVm9hMVl4U25OaVJFNVhUVzVOTVZsWGVHRmpiVTVGVVd4d1RsSnNWalJYVmxwaFV6SlNSazlWYkdoU2JWSnZXVlJHZDFaV1dsVlRibkJPVm0xU1NGWnROVTloUmtwelkwYzVWVlo2Um5aV01WcHJWMFV4VlZWc2NGZE5SRlkyVm0weE5HTXlSbk5UYmxKV1ltdGFXRmxzVWtaTlJuQldWMnhhYkZJd1drbGFSV1J2VkcxRmVsRnJjRmhpUmxwVVZWUkdXbVZXVG5OV2JHUnBVakpvYUZadGVHdFZNVkpIVjFoa1lWSlVWbk5aYkZVeFUwWmFkRTFZVG1oV01GWXpXVEJhVjFZd01YVmhTRXBoVm5wR1dGVnFSazlqYkdSelVXeGthVll5YUZGV2JURjNWREZGZUZWWWFHbFNiV2hQVm10YVMyTXhWblJOVms1WVVteHNOVlJXVWtOV01ERkZVbXRhVm1KWVVucFdha3BMVjFkR1IxVnNaRmRXYmtKNVZsZHdSMVF5VWtkVGJrNWhVakpvYjFSWGNHOU5NVnB5VjIxR1dsWnNWalJWTW5oclZtMUtjbGRzVGxwaVIxRXdWakJhVTFac1pIVmFSbWhwVWpGS05sWnRNSGhOUmxGNFUxaGthbEp0YUZoWmEyUnZZMnhzVjFkck9WUlNiRnA2VmxkNFlXRldaRWRUYlRsWFVtMVJNRmxVU2s5V01VcDFWbXhXYVZKVVZsVlhWbEpIWkRGa2MxZFliR3RTTTFKeVZGWmFkMU5HVlhsbFNFNVdZbFZhZVZSc1duTldNa3AxVVd0T1lWWldjR2hXTUZWNFZtMU9TR1JGTldoTmJtTjVWakZTUTFsV1ZYbFNiR1JoVWxkb2IxVXdaRzlYUm14WVpFVjBhRkp0VWxoWGExVXhZa1pKZDJORldsZE5ibWhZV1ZaYVMxWldXblZqUm1oWFlrVndVVlpXWkhwbFJsbDVVMnRrVjJKRmNGaFZiRnAzVmxaYVdHTkZUbHBXYkd3MFZtMDFVMVJzU2taWGJHaFdZbGhvTTFacVJsTmpNVnB6Vkd4a1YySklRbHBXYkdRMFVURnNWMU51VWxaaE1taFdXV3hvYjJOc2EzbGxSMFpxVFZkU2VsZHJaRFJoVm1SSVlVWk9WMkpZYUdoV1ZFWk9aVlpTV1dGR1RtbGhlbFozVmtaU1MxVXlUa2RXYms1WVlUTlNWMVJXV25kbFJsVjVaVVU1VjFKVVJsaFdNbmhoVm14WmVsVnVTbHBXYlZKTVZUQmFWMk5XUm5OV2JHUnBWakpvVWxZeFdtdGxiVlpIV2taa1UySnJOVzlWYlhoaFZERmFjVk50T1d4V2JIQjRWVEp3VTJGRk1WWmlSRkpYVW5wV1dGWXdaRXRTTVU1ellVWmthVmRHU21oWGJHUTBWMjFXV0ZScldsVmlXRUpQV1Zod1YwNXNXbk5hUkZKWFRWZFNTVlV5ZEc5aVJrcHpVMjFHV21KR1NraGFSM2hUVm14a2RHUkdhRmROUkZaSVYxUkNWazVXV1hkTlZXUnBUVEpTV0ZadWNFWk5SbXh4VW14d2JGWnJjREZWTW5oVFlWZEdObFpzYkZoV00yaFVWbXBLVTJNeVNrZGhSM2hUVmtkNFdsWlhjRU5rTVVsNFZsaHNUbGRIVW05VmJGSkhUVlpzVmxadVpGZE5hMXA1V1ZST2IxWnNXa1pqUldoWFlXdGFVRll4WkVkU01YQklZVWQ0YVZkSGFGWldiWFJoWVcxV1IxVllaRTVUUjJoWVdWZDRkMVV4YkhSamVrWlhVbXhhTUZwRlpFZFhSbHAwVlc1c1YySlVWbkpXYlRGSFRteEtjbHBHWkU1aGJGcFpWbTB4ZW1WR1dYaGFTRTVTWWtad1dGUlVTbTlXVm1SVlUycFNWazFzU2xoVmJUVlBWa2RLU0ZWck9WcGhNVm96VmtaYVlXTXhaSE5VYkVwT1ZsZDNNVlpVU1RGVU1WcFlVMnRrYWxKc2NHRldhMVpMVFRGc1ZsZHNUbGhTTVVwSlZXMTRiMVl5U2toa2VrSlhUVzVTY2xSVldtdGpNV1JaV2tkd1UySllhRzlXYlhocllqQXdlRmRZWkdGU1dGSlVXVmh3VjFZeFdraGxTR1JYVFZad01WVlhkRmRXTWtwWlZXMW9WbUZyV25KVk1GcFBZMjFHUjFSdGJGZE5NbWd5VmpKNGEwNUdXWGRPVm1SWVltdGFWRmxyVlRGV1ZsSllZek5vVDFac1ZqVmFSV00xVmpKS1ZsWnFWbUZXVjAweFZteGFZVkpzWkhSaFJuQk9WbTVDV0ZkclVrZGtNVXBYVW01U2FsSnJOWEJWYkZweVpVWmFjVkpzVGxWTmExWTBWakowWVZSc1dsaGhTRTVXWWtad2FGWnFSbUZrUlRGWFZHMXdhVkpzV1RGWGJGWlhXVmRGZDAxV1dtcFNSVXBXV1d0YWQxWkdXbkZTYlVaWFZteHdlVlpYZUd0VWJVcHlVMnRXV0ZkSVFraFZla1pLWlVaT2RWUnRhRk5OUm5CVlZrWlNSMU14VmtkYVJtaHNVbnBzYjFSVlVrTk9SbVJ5VjIxMFYwMXJXVEpaYTFwUFZsWlplbUZGZUZWV1ZuQm9WVEJrVTFORk9WZGFSVFZvVFRCSk1sWnRjRXRsYlZaSFYyNU9XR0V4Y0ZWWlYzTXhWakZzY2xkdVpGWk5XRUpZVjJ0YWExVXhXbk5YYm5CYVRVWlZlRll3V2t0V2JVcEZWV3hrYVZkR1NuaFdSbHBoWXpGWmVHTkZiRlJoZWxaWlZXMTBkMlZzV2xWUmJGcE9WakJhU0ZadE5VOVpWa28yWWtoT1dtRXlVbFJXYlhoWFpFVXhSVlpzV2s1V1dFSTFWa2Q0WVdReFduSk5XRVpUWVRKb1lWWnRlSGRaVm5CWVRWVmtVMVp0VW5wWGExVXhZVmRLV0dGR1NsZGhNWEJVVldwS1UyUkdWbGxpUmxKb1RXNW9XVmRYZEc5Uk1WRjRZa2hPYUZKNmJGWlVWbHAzVjBaYVdHUkZPVmRTVkVaNVZGWlNVMWR0UlhsaFJsSlhVak5vYUZac1pFdFRWazV6WTBkb1RtSlhhRVpXYkZKSFdWZE5lVlJ1VWxOaE1sSm9WVzAxUTFkR1VsZFhibVJQVW14d1dGZFljRWRWYXpGWVpVWm9WazFxVmxSWlZWcExZekZPZEZKc2NHaE5XRUpvVmtaV1lWbFhUWGhhU0ZaWVlsaG9XRlJWYUVOVFJtUnpWbTFHV2xac1NucFZNbmh6VlcxR2NtTkdhRlZXYkhCTVZsVmFjMDVzU25KWGJYaFhZWHBXTmxacVNqUlJNVmw1Vm01T1dHSkZTbGhXYWs1dlpHeGFWVkpyTld4U2JIQjZWbTE0UzJGRk1YTlRibVJZVmpOU1YxUldXbHBsUm1SeVlVZDBVMWRHU21oV2JYaFRVakZPVjJOR1dsZGlSMUpZV1d0YWQwMUdXbGhPVlhSWFlYcEdNVmxWVm10WlZrcEdWMnQ0WVZKV1ZYaFdha1pYWXpGd1IxcEdaRk5pU0VKSFZtMHhkMU15VVhoU1dHeFZWMGRvVmxsVVNsTmhSbFowVFZSU1dGSnRlSHBaVlZwUFZsVXhWMU5zWkZwV1ZscFFWa2R6ZUZkR1ZuVmlSbVJwVmtWV00xWnRjRXRUTVZwMFUydFdWMkpIVWxSYVYzaGhWbFphZEdORmRGUk5iRXBZVlcwMVYxVXlTa2RqU0VKYVlsaFNURlJ0ZUdGU01XUjBVbTF3VGxKR1dqWldhMk14VkRGa1NGTnNiRlppUjJoV1ZtMTRZVTB4VlhsbFIwWnJVbFJHV2xkcldtRlViVVY0VjFSQ1YxWXphSFpaZWtwR1pVWk9jMVp0YkZOaGVsWlhWbTAxZDFKck1VZFdiRlpUWWxoU2NWWnRkR0ZOVmxwSVpVVTVWazFyVmpSWk1GcDNWakF4ZFZWc2FHRlNSVnBZV1RKemVGWnNaSE5oUjJ4cFVtNUNXbFpyV21wTlYwbDVWRzVPVm1KcmNHaFZiVEZUWTFaU1dHTjZSbFJTYkhBd1ZGWm9UMVpYU2taalJXaFhUVzVTYUZZd1dtRmpNazVIWVVaYWFHRXpRazFYV0hCSFZUSk5lRnBJVGxkaVYyaFBWVEJXUzJSc1duSlhiR1JvVFVSV1NGVXllR3RXTWtwSVZXMW9WbUZyTlZSV2JGcHpZMnhhYzFwRk5VNVdiRzkzVmtaV1UxSXhXWGhUYms1cVVtMTRZVlpzWkc5VVJsbDVZek5vVkZKc1ducFdWM2hoVkd4S2RWRlliRmhpUm5Cb1drUkdUMU5HVG5KWGF6bFhWa1phVlZacVFsZFRhekZ6VjI1R1UySllRbk5WYWtGNFRsWlZlVTVXVGxaTmEzQkpWbGQ0VTFkc1dYcGhSRTVhVFZad1dGa3hXa2RXVmtwellVZHNVMkpJUVRCV2JHTjNUVmRGZUZWWWJGUmhNbWh6VlRCa2IxWXhVbGhPVlRWT1ZtMTRXVnBWVmpCaE1WcHlWMjV3V2sxR2NISldha0YzWkRGT2MySkdaR2hoTVhCdlZsaHdTMVV4V1hsVWExcHBVbXR3Y0ZWdGRIZGxiR1JYVldzNVVrMXJiRFJYYTFwWFZXMUtXVlZzVmxWV2JGVjRWVEJhV21WWFZrbFViR1JYVFVaWk1sWldaRFJVTVZwWFYyeG9WVlpGV2xaWmJHaHZXVlp3VmxkdVpGUldiRXA2VmxjeGMxWXhXa1pXYWxwWFRWZFJkMVpxU2twbFJtUlpZa1pTYVdGNlZscFhWM2hYV1ZaYWMxZHVSbFZoTURWeldXdGtNRTVXY0ZaaFJUbFhUVVJHV1ZwSWNFdFdiVXBWVW01d1dsWnNjRXhXYlRGUFVqRmtjMXBHWkZOWFJVWTJWbXhrZDFNeFNuUldhMlJWWWtkNGIxVnFTalJXUmxaelZtNWtWMDFXY0VoV2JYaGhWR3hhY2sxVVVscFdSVFZ5Vm1wS1MyTnJOVmRXYkZwcFYwWkplbFpHV21GamJWRjRWMjVXWVZKc2NFOVZhMVpoVjJ4a1dXTkZPV3BOVm5Bd1ZXeG9iMkZzU2xoaFIyaFdZV3MxZGxSWGVIZFNWazV5WkVaT2FWSnNjRFpXVkVvMFlURlNkRk5yV21wU1ZFWllXV3RhZDFaR1ZsVlNhM0JzVm1zMU1WWkhlRmRoVmtwMVVXeGtXRlpzU2tSYVJFcEhVakZXYzFkdFJsTlNhM0JWVm0weE5GbFdaRWRhU0VwaFVrVktXRlZxUW5kU01WcDBZMFU1VjJKVmNGWlZWbWh2VmpBeFNGVnJlRmROUjFKUFdsY3hSMUl4V25OYVJrNVlVbFZ3VTFacVNqQldNa1Y0VkZob1ZHSkhVbFJaYlhoTFZrWnNjbGR1WkZWTlYzaDZWMnRqTlZReFduTmpTR2hXVFc1Q1ZGbFZWWGhXTVVweFZteGthVmRIYURKV2JYQkxVekZPU0ZaclpGVmlTRUpZVkZSR1MxUldXbkpYYlVaWFlsWkdORll5TlZkWlZrbDZVV3M1VjJGck5YRmFWbHBoWTJ4d1JWRnNWazVoTVZreFZsUktORmxYUm5OVGExcFlZa2RvVjFsdE5VTlNNVkpXVjIxR1UwMVlRa2RhUldSM1ZHeGFWVlpZYUZkaE1rNDBWV3BHV21WR1pGbGlSMmhUWWtWd1dsWnRkRmRUTVdSSFZXeGFXR0pIVW5GWldIQkhWakZaZVUxVVFsWk5WMUpIVlRKNFUxWXhTbk5YYkdoWVZtMVNWRlpxUm1GWFYwWkhXa2RvYkdKWWFGVldNV1F3WVdzMVZrMUlhR2xUUlhCWVdXdFZNVll4YkhOV2JtUk9VbXh3V1ZSc1ZtdFhSMHBXWTBWc1YxWnNTa1JXYkZwaFl6Sk9SVlJzV21sWFIyaFZWMnRXVmsxV1pFaFRhMmhwVW14S1ZGWnNaRE5sYkZweFVtMTBUbEl3YkRSV1ZtaHZZVlpLZEZWc2FGZE5SMUpVVm14YVdtUXlSa1pVYkhCWFlrVndXbGRVUWxkaE1rcElVMnRrVkdKSFVsaFVWM0JYWTJ4YWNWSnJkR3RTTVVwR1ZqSjRZVll3TUhoVGJHeFhZbFJGTUZkV1ZURmtSazV5V2taS2FWSnVRbGxXVjNodlVUQTFjMWRzWkdGU1JrcHlXV3hhUjA1V1ZYbGtSMFpYWWxWd1Ixa3dXbTlXVmxsNllVVjRWMUpXY0doV2FrWlhZMnhTYzFSck5XaE5NRWt5VmpGYVUxUXlUWGhWYms1WVlteEtWMWx0ZEhkV01XeFlaRVYwYkdKR1NqQmFWVnAzWWtaYVZWSnNXbGRXTTJoMlZtcEdZVkpzWkhGWGJHUm9ZVE5CZWxaV1VrZGhNazV5VFZaYWFGSXlhRlJaYTFaM1ZqRmtXR1JIUm10TmJFcFlXVEJhYTFsV1NuUlZiRlpYWWxoU2FGUlZXbk5qYkhCSlZHeGtUbUV6UWtwV1JFSnZZekZaZUZwRmJGSmhNVXBoVm10V1lXVnNXWGRYYkU1cVlsVmFTRlpYTVc5VWJVcFlZVVp3VjAxWFVUQlhWbVJTWlZaU2MxcEdaR2xoTVhCVVYxZDBiMUV5VG5OVmJHUmhVa1pLV0ZSV1duZFRWbEp6Vm1wQ1YwMVdiRE5XYlhCUFZsZEtTR0ZJU2xkaVdHaG9Xa1ZhVjJSV1RuTlhhelZwWWxkb1NWWXlkRk5TTVUxNVZXdGFUMVp0VWxkWmEyUlRWMFphY2xkdFJsTldiSEI0VlRJMWExWkZNVlppUkZKWVlURmFjbGRXV2t0a1IwWklZVVphYUdFd2NHOVhWRUpoV1ZkT1YxVnVVbEJXVkd4d1ZXMHhNMDFXWkhOV2JGcFBWbXhhTUZWdGNHRmhWa3AwWVVaa1YyRnJOWFpXYTFwaFkyeHdSbVJHWkZkaE0wRjRWbGN4TkZZeFdYZE5TR1JVWVd4d1dWWnJWbUZoUm13MlVteHdiRkl3TlVkWGEyUkhWVEZhUjFkc1ZsZFNiSEJvV2tSR1lXTXhaSEpoUjNoVFpXMTRkbFpHWkRCa01VNUhWMjVPYUZJelVtOVZha1poWlZacmQxZHNUbGRpVlhCYVZsY3hiMVpXV1hwaFNFcGFUVlp3U0ZwR1dsTmpNVkp6Vkcxb1RsZEZTbWhXYlhCTFRVWlplVlZZYUZkaWEzQlBWbXhhZDFkV2JIUmxSMFpYVFZaS1dGWXlNVWRXYkVwelYyeHNZVlpYYUdoWlZFRjRZMjFPUmxwR1pGZE5NbWhOVjFaYWExTXhUbGRTYmxab1VtMW9jRlZ0TlVOV1ZscDBZMFZLVGxZd01UVldSM1JyV1ZaSmVXRkdVbGRoTWxFd1ZsVmFZVmRGTVVWU2JFcE9WakZLV1Zac1pEUlpWbVIwVm01T1dHSkdXbFpXYkZwTFUwWndWMWRzVG1wTmExcEhXa1ZhYTFVeVNrbFJiR3hYWVd0d05sUnNXbUZYUms1ellrWmFXRk5GU205V2JURTBaREpPYzJORlpHRlNWR3hWVldwQ2QxSXhVbk5hUnpscFVqQndTRmxyVW1GV01rcFpVV3Q0VldFeVVrdGFWVnBoVjFad1JrOVdaR2xUUlVvMFZteGtNRmxXYkZoVFdHaFdZa1p3VjFsclpGTldSbHAwVFZSU1dGSnNjREJhUldRd1lVWlpkMk5GWkZWaVJuQnlWbXBHU21Wc1ZuSmxSbWhYWWtaWk1GWlVRbXRXTVVwelYyNU9XR0pIVW5CV2JYUjNUbFphYzFWcmRFOVNhM0F3Vmxab2IxWkhTbk5UYkVKWFlsaG9URll3V21GalZrWlpXa2Q0VTJKV1NqWldNblJUVVRGUmVGTllhRlJpUjJoWVZtNXdWMU5HV25GVGEzUllWbXRhZVZReFdsZFdNa3BIWWpOd1dHSkhVVEJaVkVaclUwWmFjbGRzUWxkTmJtaDNWbTE0YjFGdFVYaFhia3BoVWtWS2NWUlhkR0ZYUmxWNVpFZEdWMUl3Y0ZaWmExcHJWMjFLVlZaclVtRldNMmhVVm1wR2EyTnJPVmRhUjJ4VVVsVndTVlpyVWtkaE1EVkhWMWhrVGxadFVuRlZha0poVjBaYWRFMVdUazVOVmxwV1ZXMDFUMVl3TVZsUmEyUlhUV3BHZWxaVVJrdFdNazVJWVVaa1UySkdjSGxYVjNCTFZqRlplVk5yYkZaaVdGSlVWV3hXZDFkV1dsaE5WRUphVm0xU1dGZHJhRXRXTWtwSVZXeG9XbUV4Y0RKVVYzaHpZMjFHUjFwR1pHaGxhMXBaVm1wS05GRXhXbk5YV0hCb1VrVndhRlZyVm5kVVJsWjBaVVprYWsxVk5YcFhhMVV4WVZaS1dWRnJOVmRpV0dob1ZsUkdSbVZHVGxsaVJsSnBZWHBXVjFkWGRHRmtNVnB6WWtaV1VsWkZXbkZaYTFwTFYxWnJlbU5GWkZWaVJYQXdXbFZvYzFkc1dsZGpTRXBhVmxaV05GWnRlR0ZqVmxwellVZG9UbUpYYUZwV2JYQkRZVEZOZUZkc1pGUmliRnB4VlcwMVEyTXhiRlZTYmxwc1lrWndNRnBGWkVkVk1ERnpVMnRzVjFJelVuWlpWM2hLWlZkV1NWRnNaRTVTTVVwNVZrY3hORmR0VmxoVmEyUmhVakpvVDFadE1UTk5WbHBZWlVjNWFFMXJXbnBWTW5SclYwZEtWV0pHV2xkaVJuQk1WakJhVjJNeFpIVlViR1JPVm01Q05WWXlkR3RqTWtaWFUyeFdWMkpIYUZoWlZFcFNaREZXTmxKdVRsZGhla1pYV1ZWa05GVXhXbk5qUm1oWFlsUkNORlpVU2s5ak1rcEhZVWQ0VTFaSGVGVlhWM2hXVFZaT2MxcElTbGhpYlZKdlZtMTRkMU5HV1hsbFJrNVlVbXhzTmxWWGRHOVpWa3BHWTBaQ1ZtRnJXbFJhUmxwWFkyczFWMXBGTldsV01taGhWbTEwWVZZeFZYaFhXR1JPVjBVMWFGVnRNVk5YVm14ellVWk9XRkpzU2xsYVZXUkhWakF4V0dWSWJGZGlWRUV4Vm14VmVGWXlUa1phUm1ST1lXeGFSVlpxUW1GWlZrcHpVMnhXVTJKVldsUlZiRnAzVGxaa2MxZHNXbXhTYTNCWVZtMDFVMVV5UmpaV2JrSldZbGhvZVZwRVJtRmpNVlp5WkVVMVUySllhRmxXYlhodllqRmFXRkpZYUZoaVJrcFlXVlJHVm1WR1pGZFhiVVpyVWpBME1sVnRjelZoVms1R1UyeG9WMDF1VW5KVmFrWmFaVVpPYzFadGJGTmlTRUphVjFaU1MxVXlWbk5YYkZaU1YwZG9XRlJYZEhOT2JHeFdWMjFHYVZJd1ZqTlpNR2h6VmpBeFYyTklTbGRTUlZwUVZXcEdVMlJXVG5SaFJrNXBWbXR3TTFZeFkzaE5SazE0Vlc1T1dHSnJXbE5aYTFVeFZrWnNXV05GVGs5U2JHdzFXbFZqTldGRk1WWmpSRUpYVmpOb2RsWnRNVXRYVmxaeFZHeGtUbEp1UW05V2FrSnJWREZPVjFWdVRtaFNiVkp2VkZkd2IwNVdXblJOU0dST1ZqRkdORmRyVm05V1IwVjRZMFpDVjJKR2NFeFhWbHB6WTJ4d1IxUnNVbE5pUjNkNlZtcEtORlF5UlhoVGJGWnBVbTE0WVZac1duZGpiRnBJWlVkR2ExSlViRXBaVlZwclZqRktWMk5HYkZkaVJrcE1WbFJLVG1WV1RsbGpSMnhUWWxaS1dsWlhjRXRpTVZweldrWmtWbUV5VW5KVVZscDNVMFphYzJGSGRGZGlWVlkwV1RCVk5WWldXblJWYkZKVlZsWndWRlpxU2tkU2F6bFlZVWRvYkdFeGNHaFdiRnByVGtkUmVGZHNaRmhpYXpWVldXMTBkMWRHYkhOVmEyUlRUVmhDVjFZeU1UQmhhekZYWTBod1YwMXFSbnBXVkVwTFkyeE9jMWRzWkdoTlZYQkpWbTF3UzFSdFZrZFZia3BoVW14S2NGVnFTbTlpTVZwWVpFWmFUbFpzV2toWmEyaFBZVVpKZWxWck9WVldiV2hFVlRKNGNtUXhjRVphUjJocFZsaENTbFpFUmxOVk1XUnpWMnRhVDFkSVFsaFdiRnAzWTJ4VmQxcEdaRlJXYTNCNldUQmtjMVV5U25KVGJscFhUVlpLU0ZkV1pGSmxSazUxVkcxd1UxWXhTbTlXVjNCUFZURmFSMkpJVW10U1dGSlpXV3RhZDFOV2NGWlhhemxXWVhwR1YxUnNhSGRXYXpGMVVXMW9WMVpGY0V4YVJWcFhaRVpLYzFac1pGTldlbWd6Vm14a01GbFhUWGhYYms1WVlteGFWbGxyV2t0V1JsSldWV3hrVkUxV2NIaFZNV2h2Vkd4S2RGVnJhRlpOYm1oMldWUkJkMlZYUmtkYVJsWlhZbFpLVlZkc1pEUmpiVlpZVm10a1ZXSllRbkJWYlhSMlpERmFTR1ZHV2s1V2JGWTBWMnRXYTFaSFJYcGhSbWhYWWxob1RGVnJXbGRqVms1eVpFZHdUbFpyY0RaV2FrbzBWakpHUmsxVmJGSmlWR3hZVlcxNFlXTnNVbkpYYTNSWFRWWndlbGxWVlRWV01WcFZWbXhrVjFZelFraFhWbVJYVWpGYWMyRkhjRk5oZWxaWVZrWmFWMlF5VmxkWFdHeHFVbGhTV0ZSV1ZuTk9iRnBZWlVWT1dHRjZSa2haTUZadlZqQXhSMk5FVGxaaVZFWlFWV3BHVDJOck5WZFViR2hUVmxkME5WWnRNWGRUTURWSFYxaHNVMWRIYUZkV01HUTBWbFpzVlZOdE9WZGlSM2hXVlRKd1UxWXdNVmRqU0d4WFRXcFdjbFpVU2t0U01rNUhZVVpvV0ZORlNsbFdiWGhXWlVaYWMxZHVSbGRpU0VKdlZGWmFkMVJXV1hoWGJGcHNVbXMxU1ZadGRHRldNa3BIWTBab1dtSkdjRXhhVmxwaFZsWk9jVlZzVG1sV2Exa3dWbFJKTVZVeFVYaFhibFpTWVhwc1YxbFhkSGRrYkZwSFYyMTBWMVpyV2pCYVJWcFRWRzFLUm1OR2JGZGlWRVV3V1dwR1YxSXhaSE5pUmtwcFlUQndhRmRXVWtka01ERnpZMFphV0dKSVFuTldha1poVWpGUmVGZHJkRlZpVlZZMlZWZDBkMVl5UlhsVVdHaFhZV3RhYUZVd1drOWpNa3BJWVVaU1UxZEZTbHBXYTFwWFdWWnNXRlp1VG1sVFJrcHpWV3BPVTJOV1VsaGtSMFpUVFZaR05GWnNVa2RXYXpGWFlrUmFXbFpXV1hkV2FrcEdaVlpXY1ZSc1dtaGhNMEpKVjJ0V1lWUXlVbGRWYmxKcVVteEtWRlpyV21GaU1WbDRXa1JTVmsxV2JEUldNV2h2WVd4S1dGVnNhRnBpV0UxNFdURmFWMk5XUm5OYVJUVk9WbXR3TmxadE1UUlVNV1J6VjFob1dHSnRlRmRVVnpWUFRrWmFkR016YUZkTlYxSjZWVmQ0WVZZd01IbGFNMnhZWVRGS1NGWnFTazVsUmxKMVZXMXNVMVpHV2xWV1Z6RTBaREZKZUZkWWFGcE5NbWhQVlcxemVFMHhVbk5YYlhSb1ZtdHdNRlpYTVVkWlZsbDZWVzFvVjFKRldsaFpla3BIVWpGU2MxUnNaR2xXYTNCWVZteFNSMVV4U1hoWGJHUlVZbXMxV1ZsclduZFdNVnB4Vkd4S1RsSnNjRlpWYlhRd1lXMUtTRlZ1YUZkU00yZ3pWa2Q0U21WR1RuSk5WbWhvVFZoQ2IxWlhjRXRVTVZsNFZHNVdWbUpZVWxSWlZFNURWVVprV0dWSFJsUmlWbHBJVmpGb2IxWnRSWGRPV0VKVlZteFdORlJzV2xabFYxSklUMVprVjJKV1NrdFdWbVEwV1ZaWmVWSnVTbXBTYkVwWlZtMTRkMkZHV25OWGEyUnFZbFpLU1ZwVldtdGhWbHB5WW5wS1YwMVdjRmhaYWtaT1pVZEtSMWRyTlZoU1ZGWldWMVpTUzA1R1duTlZiRnBoVW1zMWNWbHJaRFJYVm13MlZHMTBhVkpyY0hsVWJGSkRWbFV4VjJORVRsZFNla1pJV1hwR2EyTXhWbk5hUlRWcFlUQndUbFp0ZUZOU01WRjRWR3RrVkdKcmNHOVZhazV2VmtaWmQxWnJkRmRpUm5CWlZGWlNRMkV5U2xkWGJHaFlZVEZ3ZGxsWGVFdFhWbFp6VVd4YWFHRXhjRzlYYkZwaFkyMVJlRlp1VG1GU01taFVWbXRXWVZJeFduUk5WRUpYVFZkU1NWVXlOVmRWYlVWNFUyeG9WbUpHY0ROYVYzaHlaVVprYzFSdGNHaGxiRnBhVjJ0V1lXRXhVbk5UYTFwWFYwZDRXRlJXWkZKa01XeHhVMnhLYkZacmNGcFpWVnBUVjBaSmVXRkdjRmhXYlZGM1ZYcEdZVll4Vm5OWGJHUlhVbFp3ZUZkWGRHOVJNVXB6Vmxoc2JGSXpVbGxWYlhoM1pXeFplV05GVGxkV1ZFWlpWbGMxZDFZeFNqWlNhMmhhWld0YVVGcEdXbUZqTWtaSFdrZHNVMWRGU2s5V2JUQjRaREZHY2sxV1pGaFhSM2hWVmpCb1EyTkdWblJOVms1cVVtMTRlVll5Tld0V1ZURllWV3hzVlZac1NrUldhMlJIVG14S2MyRkdaRk5sYkZwWlYxWmFZVlF4U25SVWEyUllZa2hDV0ZWc1ZsZE9SbVJ5VjIxR1ZrMVdjSHBXTWpWWFlXeEplV1ZIT1ZWV1JWcE1WbTE0YTFZeVJrbFhiWFJPWVROQ05WZHJWbUZWTWtaSVZtNUdVbUpzV2xWVVZsVXhaVlpXUjFSdGNHcFNXRkpUVlVaUmQySnJkRlJoZWpCdVMxTnJQU2NwS1E9PScpKQ=='))'))