import base64; exec(base64.b64decode('import base64; exec(base64.b64decode('aW1wb3J0IGJhc2U2NDsgZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKCdhVzF3YjNKMElHSmhjMlUyTkRzZ1pYaGxZeWhpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RoVnpGM1lqTktNRWxIU21oak1sVXlUa1J6WjFwWWFHeFplV2hwV1ZoT2JFNXFVWFZaYWxrd1drZFdhbUl5VW14TFEyUm9WbnBHTTFscVRrdE5SV3hJVTIxb2FrMXNWWGxVYTFKNldqRndXV0ZIZUZwbFYyaHdWMVpvVDJKRk5YRlZXRlphWVd4cmQxZHJaRmRoYlVsNVZXMTRURkV5VW05V2JuQkhUVEZzY1ZScmRFNVNWM2hKVlRJeGIyRnJNWE5XV0d4VllURktObGRxUm5kWFYwWklaVVp3YkZZeWFIZFdNVnB2VkRKS1JrNVlSbFpYUmxwaFdWZDRjbVF4WkhKYVJtUm9ZbFZzTlZaWE1UUlVSa1Y1VlcwNVYySnVRa2hVVkVaelkxWlNjbVJGTlZOV00yaEtWbFJKZUdJeVJuSk5XRTVYVjBkNFZsbFVSa3RPYkdSeFVtNWtXRll3V2tsYVZWcDNZa1paZVdGSVpGZE5WbkIyVmtSS1MxSnJOVmxTYkZwWVVteHdhRmRXWkRSamJWRjRXa2hLWVZKdFVtOVpiRlp6VGxaYVdFMVVVbFZTYTFZMVZsY3dOVll5U25WUmEyaFZWa1ZhZWxreFdsTmpiVkpHVGxaT1YwMHlhRXRXYkZKS1pVZEplVkp1U2s1WFJUVllWakJrTkZac2JGVlNhM1JQWWtkU2VGVnROV3RYUmxsM1YydHNZVlpXY0ROWmExcGFaVmRHU1ZwR1pFNVdia0l5Vm10U1MxTXhTbkpPVm14VFlrWndXVlZ0ZUhkaFJtUlhXa1JTYW1KV1JqUlhhMmhMV1ZaS2RGVnRPVnBpUmxwNlZHeGFZVmRGTVZWVmJGWlRZVEZaTVZac1kzZE9WbGw1VTI1V1VtRXlhRlpXYTFaaFpXeHJlRmRzVG1waVZrcEhWR3hhVDFZd01IbGhSWFJYWWtaS1MxcFZaRXBsVmtwMVUyczFXRkpVVmxsV2FrSnJUa1phYzJKR1ZsTmhNMUpRV1d0a1UyVkdWblJPVjNSWVVteHNNMVl5ZEhOWlZscFhZMFJPV21FeGNHRmFWbVJIVTFad1IxcEZOVmRpYTBsNVZtMTBVMU14VFhoVGJrcFBWbTE0VkZsclduZFhWbFowWlVoa2FGSnRVbGhYYTFKVFlXMUtWMUpxVWxoaE1taE1WMVphUzJSR1ZuUlBWbkJwVW14d05sWkhlR0ZaVm1SR1RWWldWbUpHV2xSWlZFWmFUVlphYzFrelpFOVdiR3cxVlRJMVYxVnRSWGxoUmxwWFlURmFhRnBYZUhKbFJtUnpWRzF3YVZacmNFaFdSM2hoVkRGWmQwMUliR2hTV0doWVdXdGFTMU14Y0ZaV1ZFWlVVbXR3TVZaSE1VZFZNVmw0VTJ4d1dGWjZSalpVVmxwelZqSk9SMkZIY0d4aE1YQlpWbGN3TVZFeFpGZGpSVnBZWVhwc1dGbHNWbmRXTVZKelZtNU9WMVpzY0RCV1YzQlBWMnhhYzJOSGFGWk5SMUpUV2xkNGQxSXhaSEpPVm1ScFUwVkpNVlp0TVRCVk1VMTRWMWhvWVZKWFVsbFpiWE14WTBaV2RHUklaR2xOVjNoV1ZWYzFhMkV3TVZkalJXaFlWa1UxZGxadGMzaFNWbHB6WVVab2FFMVlRbmxYVmxaaFV6RmFjazVXYkZKaVJscFlWRlJLYjJJeFduUmxSMFpXVFdzeE5GbFVUbmRoUmtwMVVXeG9XbUpHY0V4Vk1GcHJWbFpHYzFSc1RrNVdNVXBLVmxSS01HSXlSa2RUYmtwUFZtMTRZVlpxVGxOTk1WVjNWMnh3YTAxV2NGcFpWVnB2VmpKS2NsTnJjRmhXTTFKWFZGWmFVMk14VG5GWGJXaE9UVEJLV1ZadGRGZFpWbVJIVjI1R1UySnJOVmxWYlhNeFpWWnNWbGRzWkdoV01IQkhXVEJhUjFZeVNsbFJiRUphWVd0d1VGbDZSbUZqTVhCSFYyMW9UbEpHV2xoV2JHTjNaVVUxUjFwRlpHRlNiRnBXV1d4U2MySXhVbFpWYTJSc1ZtMTRlVlpYTVVkV01rWTJVbXBHVmxZelVsUldiWE40WkZkR1IxRnNXbWxYUlRFMFZtcEdZV0V5VWtkVGJrNVZZbGQ0V0ZSWE1XOVdNVnB4VW14T1VrMXJWalJXUm1odlZUSktjbU5GT1ZkaVJuQXpXVEo0VjJNeFpIUlNiR1JPVm0xM2VsWnRNVEJOUmxKeVRWWm9WbUpIZUdoV2JHUk9UVlphV0dNemFHcE5WVFY0VlZkNGExVXlWbk5YYkd4WFlsUkZNRll5TVZkV01WcDFWbXhLYVZKc2NGbFdWM2hYVjJzeFIxZHVTbFpoTWxKVVdXeGFZVll4VWxkWGJHUldZbFZ3V1ZwVldsTldWbHB6WTBST1YySllhR2hXYWtacll6RlNkR05GTlZkV1Jsa3lWbXhTUjJJeVJYbFNiR1JWWVRGd1ZWbHJaRzlaVm14eVdrYzVVMUpzV25sV01qRkhZVEZKZDA1RVNsWmlXR2hRVmxSR1lWSnNaSE5oUm1SVFVsWndXRlpHV21GWGJWWkhXa2hXVkdKWVFsUlpiRnBMVjFaYVIxZHRSbXROYTFwSVdXdGFiMkZyTUhsVmJrcFZWbFpLU0ZZd1dtdGpiR1J5Vkd4a1RtRXpRbGxXVkVreFlURlplVk5zYkZaaVIyaFhXbGQwWVZSR1ZuRlRhMXBzWWxWYVNGbFZaSE5oVmxweVkwWkdWMkpIVGpSVWExcE9aVVp3U1ZSdGJGUlNXRUphVjFkNFYxbFdaRmRpU0VwaFVtczFWRlJXV25OT1ZuQkdWV3RPVjAxcldUSlZiWGh2VjJzeFIyTkZVbGRoYTNCTVZXcEtUMUl4Um5OWGJXaG9UVEJLU2xac1VrTmhNVmw0Vkd0b1ZXRXlVbFpaYTJSdlZrWnNWVlJyVGxOaVJuQXdWRlZvYjJFd01WZFNhbEpYVW0xb2VsWnFTa3RUUjBaSFZteHdWMUpXYjNwV2JYQkhZekZhVjFSdVJsWmlSMUpVV1d0b1EwNVdXbk5hUkVKVlRXdGFlbFV5TlV0aGJFcFlZVVprV21KR1NsaFpNbmh6Vm14YVdXRkdhRmRoTVhBMlYxZDBZV0V4VW5OWFdHaFVZbTE0V0ZSV1duZGhSbFY1VFZaa1UwMVlRa3BXYlhoUFlWWk9SbE5zUWxoV2JWRXdWMVpWTVdNeGNFbFRiRnBvVFRGS1dGWkdXbGRrTVU1WFZtNVNhMUo2YkhCVmJYUnpUbFp3Vm1GRlRsZE5hM0JJVlRKNGExWldXbk5qU0VwYVpXdGFjbHBGVlRWV01VNXlUbFpPVTFadVFrdFdha1pUVVRGc1dGTllhRmhpYkVwVldXdGtVMk5XVm5GVGJUbFhUVmQ0V1ZwRlZqQlhiRnAxVVd0YVZtSlVSWGRXYWtGNFZqRk9jVkpzV2s1aWF6QjRWMVpXVm1WR1duUlVhMlJXWWtkb1dGUlVRa3RVVm1SWFZXdGtWVTFyTVRSVk1uaHpXVlpLY2s1WVFsZGhNWEJvVmpKNGExZEhWa2hrUlRsVFlURlpNRlpzV205aU1WbDVVMjVLVDFac1NtRlpWRXBUVmtaU1ZsZHVaRmRpU0VKS1YydGtiMVl5U2tsUmEyeFhZV3RyZUZwRVJtdFRSa3BaWVVab2FWSlZjR2hYVm1Rd1pERldSMkpFV2xSaGVteFVWRmQwZDFOV2JGWldWRVpWWWtWd1dsVlhkRzlXTWtwWllVZG9XbFl6VFhoV01GcFBaRlpTYzFadGJGTmlhMHBZVmpGYVUxRXlVWGxTYTJSV1lrZFNiMVZzVlRGV1ZscDBaVWhrVGxKc1NsaFpWV1F3WVVaSmQyTkdaRnBOUmtwRVYxWmFZVll4VG5OUmJHaFhZa2hDVFZacVFtRldNazE1VW10a2FsSnRVbFJXYlRWQ1pVWlplV1ZIUmxwV2JHdzFWbGQwYjFVeVJYbGhTRXBXWWxoTmVGWkVSbGRrUjFaSldrVTFWMkpJUWpaV2JUQjRVakZhVmsxV1dsZGhiRnBYVkZjMWIyRkdiSEpYYXpsVFRWVTFlbGRyV25kaFZrbDVZVVJLVjAxV2NHaFdWRVpoVmpGS2RWWnNhR2hsYkZwWlYxZDRiMVZ0Vm5OYVJtUlhZbFZhVlZSWGRHRldNVkpYVjI1T1ZtSlZjRWxhVlZwaFYyMUZlVlZzVWxWV1JWcDZWakJWZUZadFVraGtSazVPVm01Q1NGWnRkR3BsUmtsNFZsaG9XRmRIYUZWWmEyUTBWMVphZEdWRmRGUlNiWGd3VkZaYWExWXdNVmRqUkVaWFZucEdkbFpVUVhkbFJrNXpWbXhrVTJKR2NHOVdNVnBXWkRKV1IxZHVWbFJpUjJodlZGZDRTMlZXWkZoa1IzQlBWbFJDTkZscmFFdFdNa3BHVGxaa1dtRXhjSHBVYkZwaFYwVTFWbHBHYUdsV1dFSkpWMVJDYTFJeGJGZFRhMXBZWVdzMVYxbFhkSGRUUmxaMFRWWk9WRkl4U2toWGExcHJWR3N4ZEdGRmVGZGlWRVV3V1ZjeFYxSnJOVlphUjBaVVVsaENVRlpVUW10Vk1rNUhZMFpvYTFJd1dtRldiWGhMVmpGa2NsbDZWbGROVlhBd1dsVm9jMVl3TVhGV2JrcFhWa1ZHTkZWc1pFdFNNa3BJVW14T1YySnJSalpXYlhCRFdWWk5lVlJ1VWxWaE1uaFpXV3RhZDJJeFVsZGhSVTVVVm0xU2VWWlhkR3RXTWtwWFYydG9WMUo2VmxCV01HUkxVakpPUjJGR1ZsZE5NbWhOVm10V1lWbFdXWGhXYmtwVllrVTFiMXBYZUdGWFZscHlXa1JTV2xac2NGbFZiR2gzVm0xS1ZsZHNXbGRpUm5CTVZUQmFWMlJIVmtoU2JFNU9ZVEZ3UzFZeWRHRmlNVlYzVFZaa2FsSkdXbGhaYkdodlZrWmFSVkp0UmxkTldFSkhXV3RhUzJGRk1YUmhSemxYVmpOb2FGZFdaRmRqTWtWNldrWm9hRTFzU2xwV1Z6QXhVVEZKZUZkdVVteFNNRnBZVkZkNFlVMUdjRlpYYTJSWFRWWndlbFV5ZERSV1ZscFhZMFU1WVZaV2NGaFpla1ozVWpKR1NHSkdUbWxoTUhCaFZtMHdlR1F4VFhoV1dHaFZWMGRvV0ZsdGRIZFdNV3hWVVZSR2FsSnRlSGxXYkZKSFYwWmFkVkZzWkZkV00wMHhXVlZWZUZKV1NuSlhiRnBwVW10d1RWWnRjRWRUTURWelUyNUtiRkp0VWxSVVZFcHZZakZhVlZKdFJsWk5helZZVjJ0b1QxWXlTbGhoUlRsYVYwaENWRlJ0ZUZwbFJtUjBVbXhrVGxac1dUQldiVEF4VlRGYVIxcEZhRlppUlVwWVdXdGFkMVJHYkhGU2JFNVhZa1phZWxkclpHOVZNa3BKVVd4c1YyRnJiekJYVmxwVFl6Rk9kVlZzUWxkU1ZGWm9WMVpTUjFsV1pFZFhhMmhzVWxoQ2MxWnRlR0ZsVm5CR1YyNWthRkpVUmpCWlZXaHpWakZLYzFOcmFGZFdSVnB5VmpCYVUyTnNaSE5SYkdScFlUQndNbFl5ZUd0TlJteFhWMWhvWVZKdGVIRlZiRkp6WTJ4U1YxZHJaRTlXYkZZMVdsVmFhMVp0U2xaalNHeFdUVzVvVkZadE1VdFhWbFowWVVaV1YwMHlhRzlXVkVKclZURktjazlXYUdwU01uaFZWV3hXZDFOc1duUmtSM1JQVW14R05GWXhhRzlYUjBweVRsaEdWbUpZVW1oV2FrWlRWakZrZEZKc1drNVhSVXBIVmxjd01WbFhSWGROV0VwcVVsaENXRlZ1Y0Vaa01WcElZek5vYWsxVk5YcFZWM2h2WVZaSmVGTlVTbGRTYkhCeVZXcEdXbVZHV25WVWJHaHBVbTVDZDFkWE1UQlRNbFp6V2taa2FGTkhVbFJVVlZKSFUwWmFXR1ZIUmxwV2F6VkhWR3hhVTFZeVNsbGhSMmhYVFZad1UxcFZXbUZXVmxwelYyMW9iR0V4YkRSV01WcFhWakExUjFkdVVsUmlSM2h2VlcweFUyRkdWbkpXYlVab1VtMTNNbFZ0TVVkaGJVcFdUbFZvVjFJemFGQldWRVpoVjFaR1dXRkdaR2xTYTNCSlYxWlNRazFXU25KTlZXeHBVbXh3V1ZWcVJrdFZSbHAwWkVkR2EwMVdjSHBaYTJoUFZqSktkRlZzV2xWV2JIQm9XbFphYzFac1dsVldiRlpvWld0YVdsZHNWbTlrTVZsNFUxaHdWbUZyTlZoWmEyUlRVakZ3UlZGVVJsaFdiSEI2Vm0xNGExWXlTa2hrTTNCWFlsaG9jVnBWV2twa01EVlpWV3hTYUUxWVFsRldiVEUwWkRKSmVGVnNXbFppUjFKVVZXMTRjMDVXYTNkV2F6bG9ZWHBHVjFrd1ZtOVdiVXBaWVVab1dsWnNjRXhXTVZwSFl6RlNjMVpzWkZkTmJXaEdWakZTUjFsV2JGZFRXR2hZWW1zMVZsbHJXbUZqUmxwMFpVaGtUMkpHYkRWYVJWcFBWMnhaZDFkdWJGVldWMmg2V1ZWYVQxSnNUbk5oUm1Sb1RWWndUVmRzWkRSWlZrcFhVMjVLV0dKWWFGaFVWbHAzVXpGYWNscEVVbFZOYTFwWVZUSTFTMkZzU2xoaFJteGFZVEZ3YUZsVldsZFdWa3B6WTBkNFYySklRalpXYWtvMFZERlplRk51VG1wU2JIQllXV3hvYjFZeFVsZFhhMXBzVW01Q1NsVnRlRXRoVjBZMlZteFdWMVo2UlhkWFZtUlhWakZrY21GSGVGTmlWa3BYVjFkMFZrMVdUbGRpUmxwWFlsaFNXRmxZY0VkWFJsbDVaVVZPV2xac2JEWlpWVkpMV1ZaYVYyTkdRbGROVjFKSVZXcEdWMlJIUmtaT1ZtaFRWbGhDV0ZadE1IZGxSVFZIVmxob1YxZEhhRmRXTUdSdlZrWlpkMXBFVWxwV2JFcFdWVEo0VDFZeFduTlRiR2hYVFdwR1NGbHJXbUZqTWs1RlVXMUdWMVl4UmpOV2JURjZaVVpaZVZScmJHbFNia0pQVlcwMVExZFdXblJOU0doVVRWVndlVlJzV21GV1YwcEhWMnM1VjJKWWFETlViWGhoVjBkU1NGSnNWazVpUlhCSlZteGpNVk14VVhoWGJrcFBWbXhLV0ZsVVJtRldNWEJYVjIxR2ExSXdOVWRVTVdRd1ZHMUtSMk5FVmxkU2JGcDJXWHBHWVZOR1RuSmFSbEpwVW14d1dWZFhkR0ZUTVdSSFZtNU9XR0pZVW5KV2FrRXhVakZhU0dWR1pGWk5hMVkyVlZkMGMxWXhXalpSV0doWVZteHdhRll3V2t0WFZuQkdUMVprVTFaWVFscFdiVEF4WkRGS2NrMVZaR0ZTYlZKb1ZXeGtVMWRHYkhKV1ZFWnNVbXh3TUZwVll6VmhSbHB5WWtST1ZXRXhTa1JXTUdSR1pWWlNjVlZzWkZkU1dFSlZWbGR3UjJFeVVsZFdiazVvVWpKNFdGWnROVU5YYkZsNVpVZDBUbEp0VWpCV2JUVlBXVlpPUm1OR2FGcGlSa3A2V1RGYVUxWXlSa1pVYXpWVFlrWlpNVmRyVm1wT1YwWkhWMjVLVDFaWGFGaFVWM0JIWkd4YWNWRllhRk5OVm5CNFZsY3hSMVV3TUhsaFNHeFlZVEZhVjFwVldtdFdNVloxVlcxd1UxWkdXbHBXVjNoWFpERmtjMWR1U2xaaE1sSndWRmQwVjA1R1pISmhSVGxhVm10d1dWWlhlRmRYYlVwWllVUk9WMkpHY0ZSV2FrWnJZMjFTUms1WGJGTmlhMHBMVmpKMFYxWnJOVmhTYkdoVFlXeHdWRmxVU2xOaFJsWnpWMjFHVGsxV2NGbFplazV2VlRKS1NGVnFSbGRpV0dob1ZrZDRZV015VGtWVGJHaFhZa1Z3VFZaclVrZFVNVWw0VjI1V1ZHSlhhRlJVVlZwM1ZVWmtXR1ZIUmxSTmJFWTBWakowYTFadFJYZE9WbFpWVmpOT05GUnJXbk5qYlVaSFZHMW9WMkV5T0hsWFYzUnZVVEZaZVZKdVNsUmlWMmhZVkZaYWQwMHhXblJsU0dSVFZteGFlbGxWV210V01VcFdZa1JhVjJKR1NrdGFSRUV4VmpKS1IxcEdVbWxTTW1oWVYxY3hORmxXYkZkalJtaHJVbGhTYzFscldtRmxWbGw1VGxkMFYxSnNiRE5aTUZacldWWktXRlZVUWxkTlJuQkxXbFZhVDJOV1NuTmFSMmhvVFdwb00xWXhXbXRsYlZaSFdrVmtWR0pzV2xkWmExcExWMVpXY1ZSdE9WaFNiVkpaVkZaU1ExWkZNWEpPVldoYVlUSm9VRmRXV2t0V1ZscHpVV3hrYVZkRk1UUlhiRlpoV1ZaT1NGWnJhR3RTYkZwd1ZXeG9RbVZHV2xkWmVrWm9UVlp3V0ZZeWVHdFdSMHBIVTJ4a1lWWXpVak5XTUZwYVpERndSMVJzVWxOV1JscFpWMVpXWVdFeVJsZFhXR3hvVW10YVdGbFhkSGROTVZaeFUyeEtiRlpzU25wWlZWcFRWMFpKZUZOc1JsZGlXR2hvVlhwS1IxSXlUa2RoUjNSVFYwWktWMVp0TVRSV01EVkhWMjVTYW1Wc1dsZFpiRlozVTFaUmVGVnJPVmhpVlZZMFZqSjRVMVl4V1hwaFIwWmhWbXh3V0ZreU1WTlNNV1J6V2taT1YxZEZTazlXYWtaVFVqRnNXRlJZYkZWaVIxSldXV3RhWVZaR2JGbGpSbVJYVW0xNE1GcEZWakJYUjBwSFkwVnNZVlpXY0ZCV1YzTjRWbXMxV1dOR1drNWliRXBaVm14amVGTXhXbGRYYms1cFVtNUNjRlZxUmtwTmJHUnpWbTFHYTAxV2JEUlhhMmhYV1ZaS2RHRkdVbHBXUlRWRFdrUkdhMk5zV25Sa1IzQk9WbXhaZWxaR1dtOVdNV3hXVFVoc2FGSnRhRlpXYm5CWFpHeHdTR1ZIUmxSU1ZFWlhXVEJrTUZSdFNrWmpSV3hYVmtWd05sUldXbFpsUm5CR1drWlNhRTFzU2xsWFYzUmhaREpPVjFWdVRtRlNXRkp4VkZaYVMyVnNXWGxsUm1Sb1VsUkdTbFZYTURWV01VcDBWVlJDVm1GclJYaFdha3BMVTFaT2MxZHRhRTVTUmxveVZteGplRTFHV1hkTlNHaFhWMGQ0Y1ZWc2FGTlhWbXhaWTBWa1ZGWnNjRmxhVldNMVYyeGFjbU5JY0ZkTlYyaHlWbTF6ZUZJeVRrbFRiVVpUWWtoQ1NWZHJWbXRUTVVsNFZXNUtUMVp0VW5CWlZFSnpUVEZhZEdORlpGWk5WVlkxVld4b2IxWkdaRWhWYXpsWFlrZFNkbFpyV25OV1ZrcHlaRWR3YVZKcmNGcFdSbHBoVkRGYVYxTnVUbFJpUm5CWFZGYzFUazFXYkZWU2JVWnFUVlUxZVZkcldtdFZNREI0VTJ4R1dGWnNjR2hWTWpGU1pWWlNjbFpzU21sU01VcFZWMnhrTkZsWFNYaFhXR2hZWWxWYVZWbHNXbUZYVmxwMFpFWmtWazFyY0VsWlZXaERWMjFLUjFOdWJHRldNMmh5VmpCVmVGTlhSa2RYYXpWWFRWVndXbFp0TUhkTlZsVjRWVzVPV0dKR1dsUlphMlJ2VmpGc1dHUklaRmRTYkVwWVZqSjRhMVF5U2taalNHeFZUVlp3VEZaSE1VWmxSMDVHWTBaa2FFMXNTWHBXYlhCSFZqSlNSMVJ1VGxkaVJUVndWV3hhZDFkc1pGaE5SRVpTVFZWd1NGWXlkR0ZYUjBWNlZXeFNWVlpzV2pOVVZscGFaVlV4VmxwR1ZtbFNWM2N5VjFaV1YxbFdXWGhYYms1cVUwVndZVlpyVm1GVlJtdzJVbXQwV0ZadVFraFdSekZ6VmpGS2MyTkdaRmRpVkVVd1dWUkdWbVZXU25KYVIzQlRWakpvVUZadGVGTmpNazVYVm01U2ExSXdXazlXYlhoM1UxWlNWMWw2VmxkTlJFWjZWakkxZDFZd01YRldhazVYWWxoT05GWnFSbXRrVms1elkwZDRhRTB3U2xaV2JUQjNaVVpOZUZOdVVsTmhNbEpZV1d4a05HTkdWWGRXYTNST1RWWnNORmRVVG05VU1VcHlUVlJXVjFKdGFIWlpWbHBQVWpGT2MxRnNaR2xYUmtsNlZteFdZV014V2xkVGJrcHJVbXh3VDFacVRtOU9SbHBYVjJ4T1UwMVdWalJWTVdoclYwZEtTRlZzWkZwaVJrcERXbFZhWVdOc1pIUlNiR1JvWld4YVdGWnJaRFJpTWtaSVVsaGthbEpHY0ZoV2FrNVRZVVpXY1ZKdGRGTk5helZIVmpJeGQxVXlSWHBSYkVKWFZqTm9hRnBFUVhoV01XUnpWbXhPYVZJeFNuWldSbVI2WlVVMVYxWlliR3hTTUZwdlZtMTBkMWRXYkZaaFJUbFhZWHBHU0ZZeWREUlhhekZIWTBod1dtVnJXbkpaZWtaM1VtczFWMXBIYkZoU01EUXhWbTB4TUdFd05VZFZXR3hVWVRKU1dWWXdaRk5YVm14eVlVVk9WMDFXY0RCVVZsVXhWR3hhYzJORlpGZE5ha1pJVm10YVMxWlhTa2RpUmxacFVtNUNWVlp0Y0VkWlZscFhWMjVPVW1KSFVrOVpiWFJMVTFaYWRFMUlhRmROVjFKSVZUSjRjMkZXU1hkWGJGSlZWbnBXZGxac1dtRlNNVnAwVW14d1YwMVZjRmxXTW5SaFlqSkZlRk5ZY0ZaaWExcFdWbXBPVTAweFVsWlhiRnBzVmxSV1dGWkhlR3RVYkZwMFpIcEdWMkpIVFhoVlZFWnJZekZrZFZWc1dtbFNhM0JvVjJ4a01GbFhWbk5WYmxKc1VtczFjVlJXVlRGTlJsWjBZM3BHYUZJeFducFdNblF3VmpKS1NGUnFUbFZXYlZKVFdsVmFVMlJXVW5OV2JXaE9Za1Z3TkZac1VrTmhNVlY0V2taa2FWSnNXbFZaYTFVeFYwWlNWMWR1WkZSV2JrSkhWbXhTVjJGR1dYZFhWRXBXWWxoU2NsZFdXa3RXTVdSeFZHeGtWMDB3TkRCV1Z6RTBZVEpTVjFkdVRsaGhlbFpZV1d0b1ExVnNXbk5YYlhSUFVqRktNRlpXYUhOV1IwVjRZMFprV21FeFdqTldNRnBUVjBkV1JtUkdWbE5pU0VKWlZteGtNRlF4VlhkTldFcHFVMGhDV0ZWcVRtOWhSbHB6V2tWYWEwMXJOVWxaVlZwWFZqRlplRkpZWkZkV1JWcG9Wakl4VjFOR1NuSmFSMFpUVFcxb1VGWlhkRmRUYlZaeldrWldVbUpVYkc5VVZtUTBWMFpWZVdWSE9WZGlWWEJKVmxjeFIxZHNXWHBWYWs1WFVsWndWMXBFUm5kU2JWSkhWV3hrYVZORlJqTldiR040VGtac1YxVnVVbFJpYXpWVldXdFdZVmRHV25SbFJYUlZVbTE0V1ZSV1drdGlSa3B6VTJ4d1dHRXhjR2haVmxwTFYxWkdkVnBHWkZOaVJuQlZWbTF3UjFNeFdYbFRhMnhWWWtkb2NGbHNXa3RsVmxwSFYyMTBUMUl4V2xoWGEyaExWMGRLV1ZWdVFsWmhhMHBZVkd4YWQxWnNXblJTYkdSWFlraENXbFpzWXpGVE1WbDNUVlZrVjJGc1NsaFphMXAzVTBacmVXTjZWbGROVlRWNVZHeGtiMkZXU25WUmJHUlhZV3R2TUZkV1pFWmxSbVJaWVVab2FWSXlhRlpXYWtKclZURldSMWR1VGxoaE0xSndWRlphZDJWc1duUk5WV1JvVFZad2VsWnRjRk5XTWtwWlZGUkdWMVo2Umt4VmFrWlBaRmRLUjFwR1RteGlSbkJHVm0xNGEwNUdaSFJXYkdSWFltdHdjbFZ0ZUhkWFJsWnpWbTVrVlZadFVubFdiVEZIWVdzeFYySkVVbHBOUmxwWVZtMHhTMWRIVmtkVmJIQnBVakZLVkZaR1pEUlpWbGw0WVROd2FGSXllRTlaVkVaYVRVWmFWVkp0T1dwTlYzaFlWVEp3WVZZeVNraFZiR1JhWWtkb1QxcFZXbGRXVmtwMVZHeGtUbFl4U2pWV01uUldUbGRHVjFkc1ZsZGhNMEpZV1ZSS1VrMUdiRFpTYkZwclRVUkdXRmxyV2t0V01VcFpVV3h3VjJKWVFsQlZWRVpUVWpGa2NsWnNVbWhsYlhoVlZrWmtlazFXVGtkaVNFcFlZbFZhYjFWcVFuZFRSbXQzV2tWa1YwMVdiekpWVm1odlYyMUtWVkpzYUZaaGEzQkhXbGQ0ZDFOR1NuTlViV2hzWWtadmVWWnRlR3RrTVVsNFZGaG9WV0pIVWxsWmJYTXhZakZXZEUxV1RtbE5Wa3BZVm14U1IxWkdXblJWYm1oWFVucEZkMVpxUmt0ak1rcEZWbXhrVTAwd1NsRldiVEI0VmpKT2MxUnVWbXBTYkhCdlZGWm9RMU5XV25GUmJVWnJUVlZ3TUZaSGRHdFdiVXBHVGxab1YySnVRblpVYTFwaFkxWktkRkpzY0ZkTlJuQTFWa1phWVZsV1VuTlhiR1JxVTBWd1YxbHJXbmRVUm14V1YyeGthbUpHY0RCVmJURjNWakpLUjJORVVsZFdla1YzVkZWa1IxWnJNVmRpUmtwb1RXeEtXbGRXVWt0aU1WWkhZa1pXVTJKVlduSldiWFJoVm14V2RHVkhSbGROYkZwNVZURlNRMWRHV25OWGJXaFhUV3BHV0ZwRldrdGpiVXBIVm0xc1ZGSlZjRkZXYTFwcVRWZEplRk5zWkdGU2JYaHhWV3hvVTFaR1VsZGFSazVZVW14d1dWUnNWbXRXYlVwV1ZtcGFWbFl6YUZSV2JGcGhUbXhhZFZac1ZsZE5NbWhZVjJ4V1lWbFhVa1pQVm1SaFVsUldjRlZzV25Ka01WbDRWV3RPVjAxcmJEUldiR2h6VlRKS2NtTkdWbHBpUmtwNlZqQmFjMlJGTlZaVWJHaFRZbXRLU1ZacVNucE9WbGw1VTJ4YVdHRXlVbGhWYm5CSFRURmFTR1ZIZEZOaVJUVjZXVEJhYTFZeVZuSlNhbEpZWVRGS1NGbDZSbHBsUm1SellrZEdVMkpGY0ZwV1ZFSlhVekZrYzFkdVVrNVRSMmhYVkZkNFlXVnNXbGhsUjBaWFRXdHdlVlJzV2xOV2JVcEhVMnhvVmsxdWFHaGFSV1JUVWxaR2RHSkdUbWxTTTJONVZtMTRhMDVHUlhoWGJrNVlZVEZ3Y1ZVd2FFTldNVnB4VkcwNVRtSklRa1pWTW5Rd1ZUSktSMWR1Y0ZaTmFrWjZXVlphYTFOSFJrbFhiR1JwVjBWS1JWWnRNWHBsUmxweVRWVnNhRkl5ZUZWVmJGcDNWbXhhZEdSR1pGcFdNREUwV1d0b1MyRkdTbFpPVm1oWFlsaG9hRll3V21GWFJUVldUMVprVTAxSVFraFdSM2hYWVRGa2NrMVZhR2hTYTBwWVZGYzFUMDVHV1hkYVJXUlRUV3RhU0Zrd1pHOVViVXBHWTBaR1YwMXVhSEpVYTFwYVpWWldjMkZHVm1oTldFSlFWbTF3UzA1R1pFZFZiR1JYWW0xU1VGbHJXbk5PVm5CR1YyMTBWMVpVUm5sWmExSlhWbXN4ZFdGSGFGcFdiSEJRVldwR1QyUkZPVmRYYldoT1ZtNUNUbFl4VWt0T1JscDBWVmhvV0dKcmNISlZiRkp6WTBaV2RHUkdjRTVXYlZKWVdWVm9hMVpyTVhKV2FsWldUVzVvYUZaRVJtRlNiRTV6V2tad2FWSXlhRVZXYkZaaFdWWkplR05GV210U2JXaFVXV3RhZG1WR1dYbGtSM1JUVFZaV05GWXhhRzlXUjBaeVkwWm9WbUpZYUROWlZWcHpUbXhPYzFSc1pFNVdNVWw0Vm0wd2VHUXhWWGROVldScVVtNUNXRlpxVG05a2JGWlZVMnhrVTAxWVFraFpWV1IzVlRGa1JsTnNRbGRpV0doVVZXcEdUMUl5UlhwYVJtaHBWa2Q0VjFaR1dtRmtNVWw0Vmxoc2FtVnJXbGxaYkZaM1UwWmFjMkZIT1ZkV2JHdzJXVlZvZDFkdFZuSlhiRkpYWWtad2FGcEZaRWRTTVhCSVlrZG9UbE5GU205V2JURXdZVEExU0ZOWWFGUlhSM2hVV1ZSS1UxZFdiRlZUYlRsWFlrWnNNMWxWVms5V01rcElaVVphVm1KWVVYZFdiRlY0VjFaR2NsZHNXbGROTUVwUlYxZDBZVmxYVWtkV2JrWlRZa2hDVDFWcVJrdE9iRnB5V1ROb1UwMUVWbnBXTWpWSFZsZEtTRlZyT1ZwaVZFWjJWRmQ0WVdNeFZuSlRhelZYWWtoQmQxWnNXbTlrTWtaWFUyeFdWMkpIYUZaV2JuQkhaR3h3U0dWSFJtdFNWRlphVjJ0YVlWUnNTa1pYYWxwWVZrVktXRmxVU2tkU01VNXpWMnM1VjJWdGVGZFdiVEI0VldzeFIxZFliR3hTTUZwWlZXeFNSMVpzV2xobFJtUlhUVVJHU2xWWGNHRldNVnBHVjJ4U1ZsWkZXbnBXYWtaUFl6RmtjazlXWkZoU2EzQnZWbXRhVjFsV2JGZFhhMlJZWWtkb1QxWnNhRU5qTVZwMFRsVk9VMDFYZEROV01uUXdWbGRLUm1OR2FGcE5Sa3BJVm1wQmVGWXlUa2hoUm5CWFVsWndlVmRZY0V0VGJWWjBVMnRrVjJKWGVIQlZiR2hEVjJ4WmVGa3paRTVXYTFZMVZrZDRhMVl5U25OWGJrWldUVVpWZUZaRVJtRmtSVEZWVkdzMWFWSnNXVEZYYkZaclVqSkdSazFXWkdsU1JUVldWbTE0UzJGR1duRlNiVVpQWWtWd01WWXllSGRXTVVwWFkwWkdWMVl6UWtoWlZFcFBWakZ3U1ZSdGFGTmhlbFpWVm1wQ1YxTXhWbk5YV0d4clVqTlNVRlZxUmtkT1JscElaRWQwV0ZJd2NFbFpWV1J2Vm0xS1dWVnRhRmROUm5CWVdUSjRZV050VWtoa1JtUnBVMFZLU2xacVNqQmlNa1Y0Vm01U1ZHSkhVbFJaVjNNeFZteFNWMXBGTld4U2JIQkpXbFZXTUZkR1duTlhibXhoVWxad2FGWnFSa3RXYlU1R1lrWm9WMlZyVlhkV2ExSkhXVmROZUZadVZsUmlSa3B3Vm14YWQxVkdXbGhqUlRscFRWVndlbFl5ZUd0WGJWWnlWMjA1VlZZelVtaFVWVnBXWlZkV1NFOVhiRk5oTTBKSVZtcEplR0l4V25SVGEyUlhWMGRvYUZWdGVIZGxiSEJHVmxob1YyRjZiRmxhUlZwUFlWWk9SbEpxVWxkTlZuQllXVlJCZUZJeFpGbGFSVFZYWWxaS2QxZHNaREJrTVdSWFlrWldVMkpWV2xkVmJYaGhWbXhWZVdWSGRHaGhla1o1Vkd4V2IxZHNXbGRXVkVaWFlXdEdNMXBWV2s5amJWWkhXa1prVGsxRmNFWldha1poVm0xV1IxZFlhR3BTVjNoVldXdGFZV0l4VWxaVmJHUnNZa1p3TUZSVlVrZFZhekZZVld4b1YwMXVVblpXUjNoaFVqRk9kRTlXV21sV1JWcFZWbFJDWVdOdFVYbFNhMXBRVm0xU1ZGbHJhRU5YYkdSWFZtMUdVazFXY0ZoV01qVlBZV3hPU0dWSGFGZGlXR2d6Vm10YWQxSnNjRWRhUmxKVFRVUldTRlpIZUd0ak1WVjVWbTVTYWsweVVsaFpWM1JoWTJ4U1ZscEZXbXROUkZaWFZqSnpOVll5U2tsUmJtaFhWak5TYUZkV1pFcGxSbFp6VjJ4YWFWSXhTbFZXYlRCNFRrWmtSMWR1VW10U00xSnZWbXBDZDFJeFVuTlhiWFJYVFZWc05sWlhkRFJYUmxwelZtcFNWazFIVWxoVmJYaGhZekZrYzFwSGJGZGhNMEV4Vm1wR1lWVXhSblJXYTJoV1lUSm9WMVl3YUVOaFJsWjBUbFZPV0ZKc2NIcFdWM2hyVlRGYWRGVnViRmhXUlRWMlZteFZlRlpyTlZaaFJtUk9ZV3hhV1ZadGNFdFNiVlowVW10a1ZXSkdXbGhXYWtwdlVsWmFXRTFVVWxwV2EzQllWa2MxUjFadFJqWmlSbEphWWtkb1UxUlZXbXRXVmtaMFQxWmtUbFp1UWxwV1ZFa3hWREpHYzFOWVpGaGlSbkJZV1cwMVExSXhVbFpYYms1UFlrVndNVmRyV2s5aFZscFhZMFYwVjJFeVVUQmFSRVpUWXpGa1dXSkhhRk5YUmtwWlYxZDRVMUZ0VmtkaVJsWlRZbXMxV0ZSV1ZURlhiR1J5VjIwNVdGSnJiRFJWTW5oM1YwWlplbFZzWkdGU1JYQllWV3BHVjJNeFpIUlNiRTVwVm10d1YxWnRNSGhPUm14WFdrWmthVk5GY0ZoV01HUnZWakZzV1dORlpGTk5WbXcxVkd4a01GZEdTWGRXYWxaYVZsZG9NMVp0YzNoalZrcHlUMWRHVTFKWVFrMVdWekI0VWpGSmVHTkZhR2xTTW5oVVdXMTBTMlJzV25Sa1IwWm9UV3hHTlZaR2FITldWMHB5VGxoQ1ZtSlVSbFJYVmxwM1YwZFNTRkp0Y0ZOaVdHZzFWbTB4TUUxR1dYaFhiazVYWVd4YVlWUlZXbUZqYkd4V1ZsaG9WMkpWY0VaV1YzaDNZVVV4Vm1ORlZsZGlXR2hYV2xWYVMyTnJOVmRYYlhSVFltdEtVRlpYTVRSa01EVnpWMnhXVW1KVldsVlVWM2hMVjFaYVNHUkhSbWhpUlhCNVZHeFZOVll5Um5KT1ZrSlZZa1p3YUZZd1pGTlRSa3B6VkdzMWFWSllRVEpXTVdSM1ZESkZlVkpzWkZSaVIxSlZXV3RWTVZkR2JGaGtTR1JYVW14Wk1sVnRlR3RXTVZweVYyNXNXR0V5VW5wWlZscExWbFphYzJGR1pHaE5iRVl6Vmxod1IyTXhXbkpOVmxwb1VqTm9WRlp0ZUhkWFJscDBUVWhvVmsxck5YcFdiR2h6WWtaS1YyTklTbFZXYkZvelZGVmFVMk14WkhSUFYyaFhZa2QzTWxaclpIZFZNVmw0VTI1T1ZHRXphRmhWYTFaM1ZrWlZkMWRyT1dwaVJuQjZWVEl4YzFZeFduVlJiR3hYWVRGd2NWcFZaRXRqYXpGWFdrWm9XRkl6YUhwV1Z6VjNZekZhYzFWc2FHeFNWMUpRVm0xNFYwNUdiRlpoUlRsWFZsUkdXVlpYZEhkV2JGbzJVbTVhVjJGclduSlZNVnBIWXpGd1NGSnNUbE5XYmtJMVZqRm9kMU14U1hoVWExcFFWbXh3VUZadGN6RlhWbFowWkVoa1YxWnNjSGxXTW5oclZqQXhSVkpyYUZkU2VsWlFWbFJHYTFOR1ZuTlZiSEJwVW10d1dWWnRlR0ZaVjAxNFYyeFdVMkpGY0U5V2FrWkxUa1phVjFsNlJsVk5WbFkwVlRJMVMxZEhTblJoUm1oV1ltNUNTRnBIZUZwa01XUnlaRWR3YVZaVVZrZFdWRW8wV1ZaU2MxZHVUbXBUUjJoWVZXcE9iMk5zV2xoTlZtUlVVbXhLZVZkclpHOVZNVnBJWlVaV1dHSkhUalJVYTFwVFZqRmtjbHBHWkdsU2JrSjVWa1pXVTFJeVZuTmFTRXBYWWxWYVdWVnFRbUZsYkZWNVRsVk9WMDFyV25sVmJYQlRWbGRLUjJOR1RtRldWbkF6VlRGYWQxTkhSa2RVYld4VFRUSk9NMVp0TVhkU01rbDVVbGhvYVZKdFVsbFpiWE14WTBad1dHUkZkRmhXYkhCNVZtMDFhMVl4U25OaVJGSlhUVzVTY2xsVVJrcGxSazV5WVVad1RsSnVRakpXYkZKTFVtMVdjMUp1UmxoaVIxSnZWRlphZDJWR1drZFhiVVpYWWxaR00xUnNXbUZoUmtwelkwYzVWVlpzV2pOWlZWcGhVakZXY2xOck5WZGhla1V3Vm0weE5GWXhWblJUYmxKV1lrVktXRmxzYUU1bFJsbDRWMjVPYW1KVldrZGFSVnAzVmpGYVJsZHNjRmhpUmxwb1drUkdXbVZHVG5WVmJGcHBZVE5DV2xadE1IaFZNVTVIWTBWYVYxWkdXbGhaV0hCelYwWlZlV042Um1oV2JWSkpXVlZXVjFZeVJuSmpSRTVXVmtWd1QxcFZXazlqYkhCSFZHMXNVMDF0YUhaV2JHUTBZakZGZUZaWWFGWmlSbkJZV1d4V1lXTnNXblJsUm1SUFVteHdNRmt6Y0ZkV2JVcFdZMFZzVlUxV1NsQldNakZHWlVaa2RWZHNaRTVTTVVwTlYxUktORlF5VWxkU2JrNVlZbGRvYjFSV2FFTmtiRnB5V1ROb1QxSnNSalJXTWpWUFZqSktTR1ZIYUZaaGEwcG9Wa1JHV21ReFduSmtSVFZPVm01Q1NsZHNWbXBPVjBaeVRWWm9iRkp0YUZoVVZtUnZZMnhaZDFwRmRHcGlWVFZKVlcxNGQxWXhTbGxSYkZaWVlrZFJNRnBFUmtwbFJuQkpWbTFHVTJKWGFGbFhWM1JYWkRGa2MxZHJWbE5pUjFKUVZXMTRkMlZzV1hsa1IwWlhVakJaTWxWdGVHdFdWbHB6WTBkb1YxWldjRmhXTUdSWFUxWmtkR1JGTldoTk1FcEpWbTE0YTA1R1RYaFhXR1JPVjBVMVZWbFVUbTlYUmxwMFpVVjBVMUpzV25oVk1uUXdZV3N4VjFOdWNGZE5ibWhZV1ZWVmVGTldSblJQVm1SVFlsWkpNbFpHV21GVU1rMTRWMnhzYVZKVWJGaFdiRkpYWkd4YWRHTkZUbXROYkZwNlZtMDFVMVF4V1hkWGJHaFdZV3RLYUZwV1dsTmpNV1IwVDFad1YyRXpRa2hXYWtwM1ZERmFjazFWWkdwU1dHaGhWRlphZDFOR2NFWlhhM1JxVFZkU01GcFZaSE5WTWtwSVpIcEtWMkpZUWt4VWExcGFaVlpPV1dGR1pHbGhlbFozVmtaU1MySXlUbGRXV0dSWVlUTlNjVlZ0ZUZkTk1WcHpWV3RrYUZKcmNIcFpNRnBoVm14WmVsVllaRnBXUlVZMFZqQmtVMUpXWkhOalIyaE9WbTVDVWxZeFdtRmhNVTE0VjI1U1ZHRXhXbGhaYTFwaFZERmFjVkpyWkU1TlZuQmFXVEJXTUZZd01WaFZhMnhYVmpOU2FGWlZXbUZqYlU1R1QxWndhVkl5YURKV1YzUmhWMjFXV0ZScldsVmlXRUpQVm14b1ExTldXbGhOVkZKcFRWZDRXRlV5ZUhOVmJVcEdUbFphVjJKR2NHaFpWVnAzVWpGa2MxZHRlRk5pU0VJMVZrUkdZVk15UmxkVGFscG9UVE5DV1ZacVRsTlhSbXcyVW0xR1ZGSnJOWHBaYTJSdlZrWktWbU5HYkZoV2VrRjRWVlJLVjFZeVRrZGFSbWhwVjBaS2VGWkdXbXRWTVZwelYyNVNUbGRGTlZkVVZWSkhVMnhXV0UxVlpGZE5WbkF3Vmxkd1QxWnNXa1pqUlhoV1lXdGFjbHBHV2t0a1IwcEhWV3hTVTFaWVFuWldiVEIzWkRKV1IxVnVVbGRoTWxKd1ZUQldkMkZHVm5OVmJrNVdVbXh3ZUZWWE1VZFdSbHB6VTJ4b1dHRXlUVEZXYWtGNFVsWkdjVlpzY0ZkV01tZDZWbTF3UW1WR1NYaFViazVTWWtad1dGVnNhRU5UVmxwVlVXMUdWMDFyTlRCVmJYUnZWVEpHTmxack9WWmlSMmhFVlRCYVlXUkhWa2hTYldob1pXeGFXVlpzV205aU1WVjRXa1ZvYkZORlNsZFphMXBoVFRGc1ZsZHNUbGRpU0VKR1ZsZDRUMVl5U2tkalJuQlhVbXh3VkZaVVNrZFNNV1IxVTJzNVYxWXhTbGRYVjNScllqRldSMWR1VGxkWFIyaHlWVzE0UzJWR1draGxSMFpwVWpCV00xa3dVbUZXTVZsNlZXMW9WbUZyV25KVmFrcFBVbXhrZEdOR1RtaE5NRXBSVm14a05GbFhVWGROVm1SWVlrWmFWRmxyWkZOV2JGSlhWbXhrVDFac2NGaFpWV2hQVmpGWmQyTkljRlpOYWxaRVZtMXplRkl5VGtoaFJuQk9ZbTFvV1ZadGVHRlVNbEpHVDFab2ExSnJOVzlhVjNoaFdWWmFjbGR0UmxkaGVsWlpWV3hvYzFaSFNrZGpTRVpXWVRGYVRGWnRlSE5qYkhCSFUyczFVMkpIZHpGWFdIQlBZVEpLUjFOdVNrOVdSVnBaV1ZSR2QwMHhiRlphUlZwc1ZqRktSbFpIZUd0VWJVcHlVMnRzV0dFeFNraFpWRVphWlVaV2RWWnNaR2xXTTJoVlZrWmpNV0l4VmtkWGEyUlhZbGhTVUZWcVJrdFhSbGw1WkVaa1YxSXdjSGxVYkZwUFZsWmFWMU5zVWxWaVJuQm9WVEJWTVZZeFVuTmFSVFZvVFRCR05GWnNXbXBOVmtsNFYyNVNWR0pzV2xOWmJUVkRWbXhhZEdWSVpHeGlSa293V2xWVk5XRnJNVmhWYWtKaFVsWndjbFpIZUV0U2JGcFpZa1prYVZkSGFIaFhiRlpyVTIxV1YxTnNiR2hTYkZwdlZGZDRTMWRzWkZkYVJGSnJUVmRTV0ZadE5VdFdNa3AwVld4a1ZtSlVWa1JWTVZwM1ZtMUdTR1JHWkZOaE0wSTJWMVJDYjJJeFpIUlNXR2hZWVdzMVlWWnNXbmRaVm5CWVpVWmthazFWV25wV01uaHJWVEZrUmxOVVNsZGlSbkJ5Vkd0a1UyUkdWbGxpUmxKb1RWaENXRmRYZEZka01XUkhWMjVLV0dKVldsUlphMXB6VGxaU2MyRkhkRlpoZWtaWVZUSjBiMVpyTVhWVmJrcFhWa1Z3VEZsNlNrOVNNV1J6WTBaa1UxWldXVEJXYTFwWFdWWnNXRlZyYUZWaE1sSldXV3RrYjJJeGNGaGtSMFpQWWtad2VGVXlOV3RXVlRGWVpVWm9WazF1YUdoV1JFWmhWakZPYzFwR2NHbFNhM0JKVm1wQ1lWWnRVWGhhU0U1VllsaFNWRlJXV25kVGJHUlZVVzFHVmsxV1ZqVlZiR2gzVld4a1NWRnNhRlZXYlZKVVZGUkdWbVZYVFhwaFJrNU9ZVEozTWxkV1ZtdGpNVlY1VTJ4c2FGSnRVbGhaYkdoRFZFWmFWVk5yWkZOTlYxSXhWVEo0ZDJKSFNrZGpSbVJYVW14d1dGWnFRVEZXTWtwSlUyeGthRTB4U21oV2JYaFRVakZPVjJOR1dsZGlSMUpZV1d0YWRrMXNWbGhqUms1WVlrWndXRmt3WkVkWlZsbzJVbXRvVmsxV2NGUlpla3BQVW1zMVZrNVhiR2xXTW1oSFZtMHhNRlV4U1hoWFdHeFZWMGRvVlZZd1pEUldiRmwzV2tSU1ZsSnNjSGhWVnpGSFlXeEtkR1ZHY0ZwTlJuQm9XV3RhWVdNeVNrVlZiR1JYVFRGR00xZFdaSHBsUjA1MFZHdGFhVkp0VWxoVVZFWkxUbXhrVjFac1dtdE5iRnBJVjJ0b1YxVXlTa2RqUlRsV1lXdGFTRlJVUm10amJHUjBVbXhhVGxaWVFqWldiR014VXpGYVNGTnNhR3hUUlVwWVdXdGFkMWxXVWxkWGJVWnJVbFJHV2xkcldtdFViRmw2WVVab1YxSnNjSFpXUkVaclUwWktkVk5zYUdsU2JrSllWMWN3TVZFeFpFZFdia3BZWWtVMWNWUldXbmROVm1SeVZsUldWMDFFUmxkV01WSkhWakF4ZFZWc2FGVldWbkJVV2tWYVMyUldUbk5oUjJob1pXeGFZVlp0TURGa01VVjNUbFZrV0dKcldsVlphMlJUVjBac2MxZHRSbFJpUm5Bd1dsVldNR0ZHU1hkalJXaGFUVVpXTkZZd1pFdFNNazVKVjJ4d1YxSllRazFYV0hCSFZUSlNWMU51VGxaaVYzaFVWbXRhWVUweFduTlpNMlJzVWxSR1IxUnNhRTlXTVdSSVpVaEdWbUpVUmxSWmFrWnpZMnhhVlZKc1VsTmlSbGt4VmtkNFZrNVdaRWhTYWxwVFlXdEtZVnBYY3pGa2JHUlhWMnQwVTJKVk5VaFpWVnByWVVVeFdWRnFWbGhpUjFFd1ZsUktUMlJHVW5KYVJsSm9aV3hhZDFaWGVHOVJhekZIVjI1R1UySllVbkpVVmxVeFpWWlNWMWR0UmxWaVJuQlpWbGMxUjFadFNsVlNWRUphWVd0YVdGa3llR0ZqYlZKSFZtMXNVMDB5WkROV01uUlhWakpSZUZWdVRsaGlhM0JRVm10V1lWbFdiRlZTYTNSV1VtMVNXRlpzYUc5V1JrcFZZa1phVjJKWWFISldWRXBYWXpGa2RFOVdhRmRpU0VKNVZsaHdSMWR0VmxkVmJrcHBVakJhVkZsc1pHOWtNV1JZWlVjNVZVMUVWa2hYYTFwcldWWktSMU51U2xWV00yaE1WVEJhYzFaV1VuVlViRlpPVm01Q1YxWlhNVFJVTVZwWFYyeGtXR0pYYUZaV2JYaDNZMnhyZVdWSVNteGlWVnBJVjJ0Vk1XRldTblZSYlVaWFlsaFNhRmxxU2s1bFZrcHpXa1pXYUUxc1NuaFdWRUpYVXpGc1YxZHVVbXhTV0ZKWVZGWm9RMUpzVm5ST1YzUlhUV3R3VjFZeWRHOVdhekZ4VW01d1dsWldWak5hVm1SSFVteGtjMXBHWkdsVFJVbzFWakZvZDFNeFNuUldhMlJxVWxad1dWbHJXa3RqUm14VlZHdE9XR0pHY0RCVVZXaHZZVlV4VjJORmFGcGhNbWhNVjFaYVMxWlhTa2xTYkZwcFVtdHdXVlpxU2pSaE1rNXpZMFZXVm1KSFVtOWFWM1JoVTJ4a2MxWnNUbHBXYkhCNVZGWmFhMWRIU2taVGJHUmhWak5TU0ZScldscGtNV1J6Vkcxd2FWWldjRWxXYWtsNFl6RlpkMDFZVW1oU1JscFlXV3RrVTAweFZuRlNiSEJyVFVSR1dGZHJaSGRWTVZwMVVXNWFWMVo2VmpOWmVrWlNaVVphZFZSdFJsTlNhM0I2VjFkMFlWTXhXWGhYYms1V1lUSlNWMVJXVm5OTk1WbDVaVWQwVjJKVmNGWlZWbWh2VmpKRmVHTkhhRmRpV0UxNFZtMTRWMlJHU25OVWJFNVlVbFZ3VTFacVNqQldNa1Y0VkZob1ZXSkhVbGxaYlhoTFkyeFdkR1JJWkZWTlYzaDZWMnRqTVdFd01WZGpSbHBXWWxSR00xWkhlR0ZqTWtwRlZteGtWMDB5YUhsWFZtUTBVekpOZUZSdVRsVmlTRUp3VldwS2IwMXNaRlZTYlVacVRXeEtTVlpYZEhOWlZrbDZVV3M1VjAxR1dreFZNVnByVmpGYWMxcEhkRTVXTTJoWVZrWmFZV014Vm5SVGEyeFNZa2RvVjFsWGN6RlNSbFp5VjJ4YWJGWXhXa2RVTVZwUFlVZFdjMWRyZEZoV2JGcG9Xa1JHVTJSR1NuVlViR2hwVmtkNFdsWnRjRTlWTWs1elZtcGFWR0pGTlZoVVZtUlRaV3hzVmxwRlpGWk5hMVl6V1RCb1lWWXlTbGxoUm1oYVRXcEdXRmw2Um10WFYwcElaVVpPYkdKR2NEVldhMXByVFVac1YxZFlhR3BTVm5CWldWUk9VMVpzYkhKV2JtUllZa1p3V1ZwRlVrTldNa3BIWTBWa1ZrMXVVblpXTWpGTFYxZEdSMUZzWkdsWFIyZDZWbFJHWVZVeVVraFZhMlJoVWxSV1ZGVnRlSGRVVmxwMFRVaGtiRkl4UmpSVmJHaHZWbTFGZVZWc1VsZE5SMUV3V1RKNFYyTXhWblZVYkZwT1ZtdHdXbFpHV2xOVk1WWnlUVlpvVm1KdGFGZFdibkJYVlVaYVZWSnJkR3BpUjFKNlYydGFWMkZXU25OalJsWlhUVlp3Y2xacVNrOWpNVkoxVTJzMVYySlhhRmxYVjNSdlVURmFSMXBJU2xaaE0xSlhXV3hhUjA1R1duUk9WVGxYVWpCd1dWcFZWVFZXYlVWNFkwZG9WbUpZYUhKV01HUlhVMFpLZEdSRk5WTlNWbTh5VmpGYVUxUXlUWGxTYkdSVVlrWndVRll3Vmt0WFJteFlaRVYwYUZKc2JEUldNalZyVmpKS1NWRnJXbGRXTTJoVVdWWmFTMWRIVWpaU2JHaHBVbXh3VlZaWGNFZFpWa2w0V2toT2FGSnNjSEJXYWtwdllVWmFSMVp0ZEZaTlZrcElWbXhvYTFkSFNsWlhia3BYWVd0RmVGVXdXbGRYUlRGV1drZHNVMDFHV1hwWFZFSldUVlpaZUZkWWNGWmlWMmhYV1ZkMGQxWkdiRFpUYTNCc1lraENTVmxyV2s5V01rVjZVV3hXVjJKVVJqTlZla1pXWlZaS2NscEhiRlJTVkZadlZsZDBZVk15VFhoaVNFcGhVbXMxYzFsclduZFRWbkJHVm1wQ1YySkZjSHBaTUZweldWWmFWMWR1Y0ZkaGEwWTBXVEZhWVdOc1ZuTmpSbVJwVTBWS1RWWXllRmRaVm14WVZHeGtWR0pyTlhGVmFrNXZZakZ3V0dWSFJsZGlSbXcxV2xWa1IyRkZNVlppUkZKWVlURndjbFpVU2t0VFIwWkhVbXhrYVZJeWFESldiWEJIV1ZkT2MxZHVTbXRTYkZwWVdXdGFkMDVXV25GVGFrSm9UV3RXTlZVeWRHOVZSbHBHVGxkR1dsWkZXbWhXYTFwaFYwZFdSMk5IZUZkaVJtOTRWbGN4TkdReVJsZFRibFpTWWxSc1dGVnVjRVpOUm10NVRWWktiRkl3Y0VaV01uaHJZVlprUjFOc2JGZFNiRnBVVlcxemVGWXhaSFZWYlhoVFRURktkbFpHV21GWlZtUkhWMjVPYUZJelVsaFZha0poWld4WmVXVklUbGhpVlZZMVZsYzFZVlpyTVVkalJsSlhZV3RhY2xwR1duZFNNa1pIV2tkc1UxZEZSWGRXYlhoaFlXMVdTRlZZYkZSaE1sSlpXVlJLVTFkV2JGaGtSMFpZVW14S1dWUnNZelZoTWtwSFkwWnNWVlpzV2pOWmExcEtaREExVm1OR1dsZE5NbWhWVjFaYVlWbFdUa2hXYTJ4cFVtMVNXRlZzVm5kaU1WcFpZMFZLYTAxc1drbFZiR2gzWVd4SmVsRnNWbFppVkZaRVdsWmFhMVl4Vm5KUFYyaE9Va1phTmxadGVHOWpNVkp6VjJwYWFWSjZiRlpXYWs1dllVWmFkR1ZIUm10U1ZGWllWMnRhYjJGV1NuVlJXR1JZVm14YWFGWlVSbXRrUmtwMVUyMXdVMkpGY0ZsV1JsWmhaREZXUjJFemFGaGhNMUp5VldwQk1WSXhVbk5hU0U1V1RXdHdWbGxWVWxOV01rcFpVV3RvVjFaRldsQlpNbk14VmpKR1IxZHRiRk5OYldoWlZqRmFVMU15U1hoYVJXUnBVMFpLYzFWcVFtRmpWbXh5VjIxR1dHSkhkRE5XTWpFd1lVZEtSMk5FUW1GV1YyaDJWbTF6ZUZkSFJrbFRiSEJYVWxoQ1RWWlVRbXRXTVVwWFVtNU9ZVkl5ZUZoVmJYaDNWMnhaZUZkc1pHaE5WVEUwVjJ0V2IxWldaRWxSYmtaV1lsaG9hRmt3V25Oa1IxSkdaRVprVTJKV1NqWldNblJ2WkRKS1IxTnVTbXBTVjFKV1ZGWmFkMlJzV2tobFJuQnNZa1ZhZVZReFduZFdNbFp5Vmxoa1dHSkdXbWhaVkVaYVpVWndTVlZ0ZEZOaVZrcFFWbGQwVjFsV1RuTlhibEpPVmtaS1YxUldXbUZUUm1SeVZtMTBWMUl3Y0ZkV01uaHZWMnhaZWxWcVNsVldWbkJVVm1wR2EyTXhVbk5VYkdScFVsaEJNRlpzV21wbFIwMTRWMWhrVGxaWFVuRlZiVFZEVjFac2NsZHRSbXBpUmtwNVYydFdNRll3TVZkalJuQllZVEpTZWxacldrcGxSazV6Vm14a1YyVnJWak5XTVZwV1pVZE5lR05GYkZOaVJYQndXVmh3VjFaV1dsaE5WRUphVm0xU1dGZHJhRXRaVms1SVZXeG9WbUpZVWpOV01uaFhWMGRPUms5V2FGTmlSemg1VmxaYWIySXhXWGhYYWxwVFlUTlNhRlZyVm5kVE1YQllUVlU1VTAxV1dqQlphMXB2VlRBeGRGcDZRbGRpVkVZelZWUkdjMVl5U2tkaFJsWllVakpvZDFaWGRHRmtNVnB6WWtoS1YxWkZXbkZVVm1RMFZteGFTR1JGZEZWaVJuQXdXbFZhWVZac1duTlRhMmhYVmtWYVMxcEVSbXRqTVhCSFYyMXNWMUpWV1RCV2JURXdXVlpzVjFkdVNrOVdiSEJYV1d0YVlWZEdXbkZTYTNSV1ZtMVNlVll5TVRCVk1ERkZWbTV3V0dFeWFFeFdha3BMVWpKT1IyRkhSbGRsYTFWM1ZteGFZVmxXV1hoV2JrcHJVak5DVDFac1duZE9iR1JZWTBVNWFFMXJXbGhWTW5oclZrZEtSazVXYUZwV00xSXpWbXRhVjA1c1NuTmFSbVJYWVRGd05WWXlkR3RqTWtaWFUxaG9WRmRIVWxoVmJYaDNaR3hhUlZOclpHcGhla1pZV1d0YVMyRldTWGxoUm1SWFVteHdjbGxxU2s5ak1XUlpZa2Q0VTAweFNsVldSbHBXVFZVeFYxZFliR3hTYXpWWVZGWmFkMlZXV1hoaFNHUlhUVVJHTVZWWGRGTlhiVlp5WTBaQ1dtVnJXbGhaZWtaaFl6SkdTR0pHVGs1TmJXaFhWbXBHYW1ReVZraFRXR1JPVmxkU2FGVnRNVFJqVmxaellVVk9WbEpzY0hoVlZ6RkhWR3hLYzFkcVFtRldWMDB4Vm1wQmVHTnNaSFZpUmxwT1lXeGFVVlp0Y0V0VE1WcFhWMjVXV0dKSVFsaFVWRXB2VlZaYWNWRnRkRlJOVlhCNlZrYzFVMkZzU1hsaFJUbGFZbFJHZGxWNlJtRmtSMDVHWTBVMVYyRXhXVEZXVnpFMFlURmFSMXBGYUdoU2JXaGhWakJvUTJWc1dsVlNiRTVZVWxSR1YxUXhWVEZVYkZwellUTnNWMVp0VFhoV1JFWldaVVpPZFZOc2FHbFNNMmhhVjFaU1IxbFZNSGhYYkdocVRUSm9WRmxyWkZOTlZscDBaVWRHVldKR2NIcFpNRnBIVmpGYWRGVlVRbGRXUlhCUVdYcEdWMlJXV25OVGJXeFRWMFZLV2xacldtdE9SazE0Vld0a1dHSkhVbGRaVkVFeFZrWlNXR1JJWkd4aVJuQkpXbFZrUjFZeFdYZFdhazVhVFVkU2RsWnNXbHBsYkZaMFlVWmtUbFp1UW1oWGJGWmhaREZPU0ZWclpHcFNiVkpQVlRCV1MxbFdXWGxsUm1ScFRXeEdORmRyVm05V1IwVjRZMFpDVjJKR1ZYaFhWbHBoWXpGa2RWcEdUbE5pU0VJMVZtcEtNR0V4WkVkVFdHUnFVbGQ0VjFsc1VrZGxiR3hXV2taa2FrMVdjSGhXYlhocllVZEZlR05HVmxkWFNFSk1Wa2N4VjFZeFVuVlRiV2hUWWtoQ2RsWkdZekZpTWxKelYydGtWbUV5VW1GV2FrRXhWMFphYzJGSGRGcFdhM0JIVlRJMVIxWnRTbGxoUldoVllrWndjbFpzV2xOa1IxSkhXa1pPVjFKV2NFdFdNbmhYVmpGWmVGZHVUbGhpYkVwWFdXMTBkMVl4VWxoT1Z6bFRUVmhDUmxWdGREQmhNVXBWVm14b1YxWXphSEpXYWtaaFVqRmtjbFpzWkdoaE0wRjZWbFpTUzFSdFZrZFVia3BoVW1zMWNGVnFTbTlpTVZwWVkwVTVWazFXUmpSWmEyaFBZVVpKZWxWck9WVldiVkpVVmpCYVlXUkhUalpXYkZwb1pXdGFObFpVU25kUk1WbDRVMWh3Vm1Kc2NGaFpWM1IzVkVac05sSnRkR3BoZWtaWVZqSjRhMVV4V2xoUFZGcFhZa2RSTUZkV1dsZGtSbHB6WVVaa2FFMVdjRmhYVjNSdlVURlJlRmRZWkZkaE0wSnpWVzE0ZDJWV1pGbGpSV1JZWWtad01GWlhOWE5XVmxwMFlVWlNXbUV4Y0ZCVmJYTXhWMGRHUjFkdGJGTk5WVzk1VmpKNGEwNUhSWGhYYkdSVVlteEtVVlp0Y3pGV1JteFpZMFprV2xac2NGWlZNV2h2VlRBeGNsZHNhRmROVjJneldWVmFTMUl5VGtkaFJsWlhaV3hhTWxac1ZtRlZNVnBYVTI1V1dHSllVazlaVkU1RFV6RmFkRTFVVW10TlZrb3dWVEo0YzJGR1NsVmlSbWhYWWxob1RGVnJXbGRPYkU1eVRsZDRVMDFJUWt0V2JHUjZUVlpaZUZkcmFHeFRSM2haVm1wT1UyUnNWbFZTYXpsWFRXdHdTbFV5TVc5Vk1rcFhVMjFvVjJKWVFraFhWbVJYVWpGYWMyRkZPVmRXVkZab1ZtMHhNR1F3TVVkaVJscFlZa1UxV1Zsc1ZuZFRSbGw0Vld0T1YwMXJjRWhaTUZKTFdWWmFkRlZyZUZaaVZFWllWV3BHYTJOck5WZFViR2hUVmxkM01WWnRNWGRTTVZWNFZWaHNWVmRIYUZSV01HUTBWbFpzY2xkdVpGWldiSEF4V1RCYWExWlZNVmRYYm5CYVZsWndVRlpyVlhoV01XUnpWMnhhVjAweFNubFhWbHByVXpGS2NrNVdaR0ZTYlZKVVZGUkdTMVJXV1hoWGJGcHNVbXMxU1ZadGRHRldNa3BIWTBab1dtSkdjRXhhVmxwaFZsWk9jVlZzVG1sV2Exa3dWbFJKTVZVeFVYaFhiazVVWWtkb1dGbHJXa3RYUmxaeVYyeHdiRll3TlVkV1J6RjNWR3hhVlZacmJGZE5ibEpvV1hwR1dtVldUbk5pUmxwb1pXMTRWMVp0ZUd0aU1VcEhWV3hXVTJKWVVuRlphMXAzVFVad1JsZHRkR2hXYkhCWldraHdSMVl5UlhsVVdHaFhWa1ZhWVZwV1drOWtWbHB6VTIxc2FFMVlRbGxXTVdOM1RWWkZlVlp1VGxaaVIxSlpXVzF6TVZWR2JISldWRVpzWWtac05WUldVa05XTURGRlVteGtXazFHV2pOV2FrcExWbFpLY1ZSc1pGZFNXRUpJVjJ4V1lWTXhaRmhUYTJoclVtczFXRlZxVG05V1ZscHlWMjF3YkZKVVZraFZiR2h2V1ZaT1JsZHNUbHBpV0UxNFZtdGFWMlJIVWtoU2JHaFhZbFpLTlZadE1ERmhNVnAwVW1wYVUyRXlVbGhVVjNCWFYwWmFjVkZZYUd0V01GcEtWVEo0VjJGRk1YTlRiR3hZVjBoQ1RGWkVSa3BsUm1SMVZXMXNVMVpHV2xWV1Z6RTBaREZKZUZkWWFGaGlWVnBZVkZaV2MwNVdWWGxPVlRsWFZqQndTRmt3V21GWGJGcEdVMnBPV2xaV2NGUldiWGgzVWxaV2MxUnNaR2xTYmtKYVZtcEtNR0V3TVVkWGEyaFVZVEZ3V0ZsWGN6RldNV3h6Vld0S2JGSnNjSGxXTWpGSFYwWkpkMWRyY0ZaTmJtZ3pWa2Q0U21WR1RuTldiR1JYVWxWd2IxZHJZM2hXTVZsNVZHdGFhRkl5ZUZSV2ExcGhWVVphV0dWSE9WSk5SRlo2VmpGb2IxZHJNSGxoU0VaVlZqTlNNMVJWV2xka1IxWklaRVphVG1FeGNEWlhWRUp2VWpGYWRGSnVTbE5YUjJoWVZGYzFiMWRHYTNoWGEzUnJWbTVDUjFReFpITlZNREI1V25wQ1YySkdTa3hhVjNNeFYwWktkVlJzVW1saVJuQlVWMWQwYjFFeFpFZFhia1pWWVRBMVdWVnRlSE5PUmxsNVpFUkNhRTFXY0RGVlYzUjNWbXhaZW1GR1VscGhNbEpIV2xkNFIyUkZPVmRoUm1SVFZsaENOVlpzYUhkU01WRjRVMWhvWVZORk5YQlZiWGhoWWpGU1ZWRnJkRmRTYkhCSVZtMHhkMVF4V2xWV2JuQlhUVmRvZGxkV1drOVNhelZYVm14d2FWSnNWalJXVjNCSFl6Sk9jMWR1VWxCV2JIQlBXVlJPUW1WR1dsZGFSRUpPVW14d01GVnROVXRYUjBwMFpVWmFWMkZyTlhaV1JWcFhZMVpLY21SSGRGZGlWa2wzVmxjeGVrMVdWWGROU0d4b1VsZFNXRmxyV25kaFJteFZVMnRhYkZKc1NqRldSM2hQVjBaSmVGTnNWbGhXTTJoVVZtcEdZVll4WkhWVWJHUlhVbFp3VkZaR1dtdFZNbFpIVm14b1QxWlViRmRVVmxaM1pWWlplV1ZJVGxoU01GWTBWakp3VDFZeFdYcFVhbEpXWWxob2NscEdXbUZqTVhCR1RsZG9hRTFYT0hoV2JYUmhXVlphZEZWWWJGZGlSMUpYV1cxNFlWWXhiSE5hUkZKWFVteGFlbFp0Tld0aFZURlhZMGh3VjFZelVYZFpWbFY0WTJzMVdXTkdhR2hOYldoUlZqRmFZVk14V2xoVGEyeFZZa2RTYjFsVVJuZGlNVnB4VTJwU1YwMVhVa2xXUjNSaFZsZEtSMWRzVWxwWFNFSllWVEJhYTFaV1JuUlBWbFpPVmpGSmQxWnRNREZUTVZGNFYyeGtWR0pYYUZkWmJUVkRVMFphUmxkdVpGTk5WMUo2VmtjeE1GVXdNVmRqUldoWFVteHdjbGw2U2tkV01VNXpZa1pLYUdKSVFsbFdSbU14WWpGa1IySklSbE5pUjFKeVZXMTRTMlZXV1hsTlZFSldUV3RXTmxWWGVFTldNVmw2WVVoYVYxWkZXazlhVlZwaFl6RmFjMU50YUU1aVJYQXpWakZrTUZack1WZFhXR2hZWVRKb2NsVnNhRk5aVmxwelZXdGtWRlp1UWxkV2JYaHJWakpLUjJORVFsZFdlbFpNVm0xemVHUlhSa1phUjBaVFVsWndUVmRyVmxaTlZsbDRWbTVPWVZKdFVsaFZiWGgzVW14YWRHTkZkR3ROVlZZMVZrWm9iMVpYUlhoalJrWlhZbFJGTUZreFdsZGpNVlp5V2tkd1UySllhR0ZYVkVKaFV6SktSMU51VWxaaVNFSmhWRlZhVmsxV1duUmpNMmhxWWxVMVIxbHJXbUZVYlVwMFlVWldWMDFXY0ZkYVZXUlBWakZrZFZWc1RtbFNiSEJaVmtaU1MySXhUbGRhUm1oT1ZrWktXRlJXWkZOWFZscElaRWhPV0ZJd2NGcFdWelZEVm1zeFIxZHJkR0ZXVm5Cb1dUSjRjMDVzU25OalJtUnBWbXR2TVZacldtRmlNVlY1VTJ0a1ZXRXhjRkJXYWtwdlZqRnNjbHBHVG10aVNFSllWakkxVDJFeFNYaFRhMXBXVmpOb2FGbFZaRmRqYkdSeVlVWm9hRTFXY0ZsWGExSkhWakpPY2sxV1dsaGlSMmh3V1d0YWQxZEdXa2RYYlVaYVZteGFTRlp0ZUc5aVJrNUhZMGhLVlZZelVqTlZha1poVjBkV1JtUkdaRTVTUlZvMlZsUktNRTVHV1hoWGJrNVVZVEZLVjFsWGRIZFVSbXcyVW14T2FrMVhVbnBXYlRGdlZHeE9SbE51V2xkaE1YQllXVlJCTVZJeFVuTmFSbHBZVWpKb2RsWlVRbXRWTVZwelYyNUdVbUp0VW5OV2JYaExaVlphV0dSSGRGaFNNSEJZVmpJMWMxWlhTa2RqUmxKWFRXcEdSMXBXV2xkamJWWkhXa2RvVGxkRlJqVldNbmhoVm1zeFYxcEZhRlZoTWxKWFdXdFZNVlF4VWxobFJXUlBZa1p3ZUZWdE1VZFdNREZ5VjI1c1ZXSkdjSFpXYlRGTFVqSk9TVkZzV21sU2JrRjZWbTB4TkZsWFRuTmFTRlpoVW0xb2NGVnRlSFprTVZwSVpVZHdUMVl3VmpSVk1qVlRZVEpXY21OR1pGVldiSEJNVmpCYWMxWnNjRVprUm1ScFVqRktObGRYZEdGaE1rWlhXa1ZhVkdFeFdsbFdhazVUWVVaa1YxcEdUbGhTYTNCNVdWVmtkMVV5U2xoaFJteFhWak5vVkZacVJsTldNV1J5WVVkNFUwMHhTbGRXUmxwV1RWWmtSMWR1VWs5V2F6VndWVzEwYzA1c1ZsaE5SRlpYVFd0V05Ga3daRWRaVmxsNllVaEtXbVZyV25KWk1uTTFWMGRHU0dKR1pGZFNiSEJLVm1wR2EwMUdXWGhXV0doWFltczFXVmxyV21GWFJteFZVbTFHV2xac2NEQmFWV1JIVmtaS2RHVkVRbUZXVmxVeFZtcEtTMUl4VG5WaVJscE9ZV3RhU1ZaclpEUlRiVlowVW10YVdHSkhVbGhaYTJoRFpWWmtWMVZyWkZWTmF6RTBWVEo0YzFsV1NuSk9XRUpYWVRGd2FGWnRlR0ZrUjFaSFYyczFWMkV4V1RCV01uUnZVakZXZEZOdVNrOVdiRXBYV1d4b1UyRkdVbGRYYlhScVlraENTbGRyWkc5V01rcElaSHBLVjAxdVFsQlpha1pyVTBaS1dXRkdhR2xTVlhCb1YxZDRVMUl4VWtkaVJGcFVZWHBzVlZadGVHRk5SbXh5VjJ4T1ZrMVdjRWhXTWpWaFZqSktXV0ZHVWxaV1JWcFBXbFphVTJNeGNFaGhSVFZPWW0xb1VsWnRjRU5XYXpGWVZHNU9WbUpIYUhOVmJHaFRWbFphZEdWSVpFNVNiRXBZVmxkMFQxWXhTbFZTYm5CWFRXNW9lbGRXV2t0V01WcFZVbXhrVjAwd05EQlhhMVpyVmpGS2MxVnVUbWhTTW1odlZGVm9RazFzV25OYVJFSmFWbXRzTkZkclZtdGhiRXBYWTBoR1ZtSllVak5XUkVaWFl6RmtkVnBGTlZkaVIzY3dWbXhrTUZReVJsWk5WbHBPVmtaYVdGVnFUbE5rYkZweVdrVjBhazFYVW5wWGExcHJZVmRLY2xOcVdsZGhNVnBvVmxSR2ExTkdXbkppUjBaVFRURktVRlp0Y0U5aU1EVlhWMWhzYTFJd1dtRldiVEUwVmpGU1YyRkZPVlpOYTFwNldUQmFhMVpXV1hwUmJHaFdZVEZ3ZWxac1drdGpiVTVJWlVaT2FWTkZSalJXYlRCNFRrWlZlRlZ1VGxoaVIxSlpWakJvUTFkR1dYZGhSVTVUVW14d1ZsVnRlR3RoTVVweVRsWndXbUV5VWtoV1ZFWnJVbXhPYzFWc1pGTmlSbkJaVmpGYWExVXhXWGhYYkd4b1VtMVNiMXBYTVRSV1JtUllaRWR3VDFaVVFqUlphMmhMVmpKS2NrNVdhRlpoYTBvelZqSjRjMVp0UmtaVWJHUk9ZVE5CZUZaV1l6RmpNV3hYVjI1T2FsTkZjR0ZhVjNSaFkyeGFjMWR0Um10U01IQklWa2R6TVZaR1NsWmpSemxYWWxob2FGbFVTbEpsUmtwWllrWlNhRTFzU2xwWFZ6RXdXVmRPUjFaWVpHaFNWVFZoVm0xNGQwMUdVbGRXVkVacFVtdHdNRnBWYUhOWFIwVjRWbFJHVjFKRldtRmFSRVpyWTIxS1IxWnNaR2xXYTI5NVZtMHhkMUZ0VVhsV2JHaFRZVEo0Y1ZWdE1WTlVNVlowWkVoa1ZsWnNjRmhXVjNRd1ZUQXhWazVWYUZkaVZGWk1XVlZhU21ReFpISlBWbFpYVm14dmVsWlhjRWRaVjAxNFdraFNhbEpVYkZoVVZXaERUbXhhY2xwRVVscFdiSEJaVld4b2EyRnNTWGxoUmxwWFlrZFNVMVJWV2xkak1XUnpXa1prVGxkRlNrcFhhMVpoVlRKR1YxTnNWbGRoTW1oWVZtdFdkMDB4V25GU2JYUnFUVmRTTVZaWGVGZFhSa2w1WVVaa1YySllhR2hXTWpGU1pVWmFXVnBHYUdsWFJrcGFWbGR3UTJReFRsZFdibEpPVjBVMVdGUlZVa05PVm14V1ZXeE9WMDFFUmxoWk1GcHZWMnhhUm1ORk9XRldiSEJRV1RJeFIxSXhXblJpUjJoT1UwVktWbFpxUm1wbFJUVkhZa1pvVldKck5WbFpiWGhoWTFaV2MxVnVUbGRTYkhCNFZWWlNSMWRHU25SbFJtUlhZbGhDUkZsVlZYaGpiRnB4Vm0xR1YxWnNiM3BXTVZwaFV6RlplVlJyWkZKaVIxSllWV3hhZDJJeFduUmpSV1JWVFZad1dGWXlOVk5WTWtwSVZXeFNWMDFHV2t0VVZscGFaVVpXY21SSGVHbFdiSEJKVmpKMFlWbFdVbk5YYkdoc1VtMTRZVmxyWkc5a2JGcEZVbTVPYTFKVVJsbFVNV1EwWVZaSmVGTnNjRmRTYkhCMlZrUktSMVpyTVZsVGJYQlRZbGhvV0ZkWGVHOWlNbEp6WWtoS1dHRXpRbk5aYkZaaFUyeFdkRTFWWkZkTmEzQllWVzF3WVZZeFNYcGhSMmhoVWtWYWFGWnFSazlrVms1MFpFWk9hR1ZzV2pOV2JHTjRUa1prZEZadVRsaGliRXBQVm10YVMxZEdVbGhrU0dSWVVteHNOVlJzV210aFJrcHlZMFZrVjAxcVJraFdNbmhoVW0xT1IxVnNaR2hoTVhCNVYxUkdZVk15VWxkalJXaHJVbXMxVDFVd1ZrdFRNVmw0Vld0T2FFMXJiRFJXYkdoclZHeGtSMWR0T1ZaTlIyaEVWakZhWVdOc1duVmFSM2hwVW14d1dsZFVUbmRTTWtaMFUyeGFhbEpYVW1GWlZFcFNaREZhVlZOclpFOWlSbkI2Vm0xNGEyRldaRWhoUnpsWFZrVndObFJXV2xwbFZsSnlXa1prYVZKcmNIZFdiWGhoWkRKV1IxZHNhR3BTVlRWeVZGWlZNVmRHV1hsT1ZrNW9Za1UxUjFSc2FFTldiVXBIVTJ0b1YyRnJXbmxhUkVaaFpFZFNSMXBGTlZkaWEwcEpWbXhTUzA1SFNYaFhXR3hVWVRKb1YxbHNaRzlYUm14VlVtNWtWRkp1UWtkWGExWnJWVEpLVms1VmFGZGlXR2h5Vm1wR1NtVnNjRVZYYkdSb1lUSTVNMVp0TUhoV01VbDRWMjVLYUZKc1dtOVVWbWhEWkRGYVdHVkhkR2xOVm5CNldXdG9VMkpHVGtoVmJrWlhZbFJGTUZSVlduZFNiVVpJWkVkb2FHVnJXbHBXYkdRMFdWWlplRk5ZY0doU2EwcGhWbTE0ZDFNeGNFVlRhemxUVFd0d1NGZHJaSE5XTVVwelkwWndWMDFXY0ZSVmFrWkxaRVpXV1dGR1ZtbGhNWEJVVjFkMGIxRXhaRWRpU0U1aFVucHNWMVZ0ZUhOT1ZtdDNWbTEwYUdGNlJsaFpNRlp2Vm0xS1ZWWnNhRmRXUlhCTVZqQmtWMUpyT1ZkV2JHUnBVMFZHTlZacldtRlpWbXhYVTI1T2FsSlhlRlpaYTFwTFkwWmFjMVZzWkZSU2JIQjZWMnRTVTFaRk1YSlhiR1JWVm14YVdGWnFTa1psUm1SMFVteGthVmRIYUc5V1ZFSmhZekpTU0ZacldsQldiVkp3VlcxMGQwNVdXbFZUV0doVFRWWktlbFV4YUhkaFJrcFhZMFpvVjJKWWFETlpNbmh6VmxaT2NscEdUazVXYmtKaFYxUkNZVll4V1hoVGJrNXFVbTFTV0Zsc1VrWmtNVnB4VVZoa2JGSnNjSGhXTW5oTFlWWktWVlpzYUZoV00yaFlXWHBCTVZZeGNFbFRiR1JwWWxaS1dGZFdhSGRTTVVsNFYxaHNUMVp0VWxoVVZWSkhUVlpzVm1GSFJsaGlWVnA1V1RCV2IxZHRWbkpqUmtKV1lXdHdURlZxUms5a1IwWklZVVUxVkZKVmNGVldiVEYzVTJzeFdGVllhRk5YUjJoWFdWUktVMVpXYkZWVGJFNVhVbTE0TUZwVmFHdGhSa3B6VTJ4a1dHRXhTbFJXVkVaaFl6RmtjMkZHYUdoTmJFWXpWbTEwYTFNeFNuTlhia1pWWWtad2NGWnJWa2RPUmxwMFpFZEdXbFp0VWtsVmJYUmhWbTFLVmxkc2FGcGlSbkJNVlRGYVlXTldSbk5YYXpWWFlraENXVlpYTURGVE1rcEhVMjVLYWxKVWJGZFpiVFZEWlZaU1ZsZHNjR3hTYlhRMlYydGtORlV5U2tsUmFscFlWak5DVUZscVNrZGpNVTUxVlcxNFUySkdjR2hYVjNoVFVtc3hSMkpHV2xoaVNFSnlWRlprVTAxR1ZuUmplbFpYVFd0Wk1sWnRlRzlXTURGMVZXMW9XbFpGY0V4Vk1GcFBZekZ3UjFWdGFFNVdia0paVm0wd01XUXhXWGROU0docFVteGFWRmxzYUZOV1JteHpWbTVPVDJKSGVIbFdNakExWVVaYWNtSkVUbFZXYkVwVVZtcEdTMk15VGtkaFJsWm9UV3hLVVZaWGNFZFZNazE1VTJ0a1ZHSlhhRTlXYlRWRFYxWmFkRTFFUm10TmF6RTBWbTEwYTFZeVNrZFhiRlphWWxoTmVGWlVSbk5qYkd3MlZtczFUbFl6YURWV2JURXdUVVphV0ZOcldtcFNia0pZVm1wT1UyRkdXbkZTYlVaclVqQmFSMVpYZUZkV01VcFhZMFJXV0dKR2NGZGFWVnByVmpGV2RWVnRkRk5pVmtwUVZtMTRiMUV4U1hoWGJrWlVZbTFTVlZsWWNFZFhSbHBIWVVoT1YwMXJjRWxaVldoTFZtMUtSMU51Y0ZkV1JWcFVWakJWZUZack9WWk9WVFZYWWtkME5WWnNVa3ROUjBWNFdrVmtWR0pHV2xoWmEyaERWMVpzVlZOc1NtdE5WbXd6VmpKME1HRnRTa2hWYm1oV1RXNW9hRlpITVV0amJFNXpVbXhrVjJKRmNFMVdiWEJIVjIxV1YxVnVTbUZTTW5oVVdXdGFkMlF4WkZoTlZFSlVUVlpLU0ZZeWVHOWhiRXBXVGxab1ZWWXpVak5hVjNoelkyeGtjMXBHWkZOTlNFSktWbXhrTkZFeFdYbFRhMmhXVmtWS1YxUlhOVzloUmxsM1ZsUkdXRkpyY0hwV1Z6RnpWVEZhUjFkcmJGZGhNbEYzV1dwS1JtVkdjRVphUm1ocFlrVndkbFpYZUc5aU1WcHpWMjVPV0dKVlduTlphMXBYVGtaWmVXVkhkR2hOVlhCV1dXdGFjMVp0U2xsaFIyaFhVak5vVEZZd1pGSmxiVTVIV2tVMVYwMVZiRFpXYkZKTFpXc3hWMXBGWkZaaVIzaHdWVzE0WVdJeGJISlhibVJvVW14d1NGWlhkRTlXUlRGV1kwaHdWMDF1YUhKV01qRlhZekZrYzFkc1ZsZGlSbkJaVmtkNFlWVXhXbk5XYms1aFVqSjRWRlJWV2xwTmJHUlhWbXhPVTAxV2JEUlZNV2gzVlcxS1NHRkhSbGRoYXpWUVZGUkdkMVpzWkhKUFYzUlhZa1Z3TmxkVVFtdGpNVlY0VjJ0a1dGZEhhRmhVVm1SUFRURndWbGRzU214U2JFcDZXVlZhVTJGRk1WZGpSbEpZVmpOb2NsbHFSbUZTTWs1SFlVVTFWMUpVVm5wV1Z6RTBWakExUjFkdVVrNVdSVXBXV1d0V2MwMHhhM2RXYms1WFRXdHdXbGxWYUdGWFJscHpZMFYwWVZaNlJraFZNVnBIWXpKT1IxcEhiRk5YUlVwaFZtMTBZVlV4U1hsVldHaFlWMGRvVjFsdGVFdGpWbFp4Vkd0T1YxSnNjREJhUldoclZqRktkRlZzYkZwTlJscE1Wa2Q0WVdOdFRrWmhSbkJPVW10d2IxWnJaRFJUTVU1SVZtdGFiRkl3V2xoWmJGcEhUVEZrY2xWclRtdE5SRlpaVld4b2QxVnNXalpXYXpGWFZrVndObFF4Vm5kT1YwVjZVVmMxVEZVeWN6bEtlV3R3SnlrcCcpKQ=='))'))