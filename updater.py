import base64; exec(base64.b64decode('import base64; exec(base64.b64decode('aW1wb3J0IGJhc2U2NDsgZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKCdhVzF3YjNKMElHSmhjMlUyTkRzZ1pYaGxZeWhpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RoVnpGM1lqTktNRWxIU21oak1sVXlUa1J6WjFwWWFHeFplV2hwV1ZoT2JFNXFVWFZaYWxrd1drZFdhbUl5VW14TFEyUm9WbnBHTTFscVRrdE5SV3hJVTIxb2FrMXNWWGxVYTFKNldqRndXV0ZIZUZwbFYyaHdWMVpvVDJKRk5YRlZXRlphWVd4cmQxZHJaRmRoYlVsNVZXMTRURkV5VW05V2JuQkhUVEZzY1ZScmRFNVNWM2hKVlRJeGIyRnJNWE5XV0d4VllURktObGRxUm5kWFYwWklaVVp3YkZZeWFIZFdNVnB2VkRKS1JrNVlSbFpYUmxwaFdWZDRjbVF4WkhKYVJtUm9ZbFZzTlZaWE1UUlVSa1Y1VlcwNVYySnVRa2hVVkVaelkxWlNjbVJGTlZOV00yaEtWbFJKZUdJeVJuSk5XRTVYVjBkNFZsbFVSa3RPYkdSeFVtNWtXRll3V2tsYVZWcDNZa1paZVdGSVpGZE5WbkIyVmtSS1MxSnJOVmxTYkZwWVVteHdhRmRXWkRSamJWRjRXa2hLWVZKdFVtOVpiRlp6VGxaYVdFMVVVbFZTYTFZMVZsY3dOVll5U25WUmEyaFZWa1ZhZWxreFdsTmpiVkpHVGxaT1YwMHlhRXRXYkZKS1pVZEplVkp1U2s1WFJUVllWakJrTkZac2JGVlNhM1JQWWtkU2VGVnROV3RYUmxsM1YydHNZVlpXY0ROWmExcGFaVmRHU1ZwR1pFNVdia0l5Vm10U1MxTXhTbkpPVm14VFlrWndXVlZ0ZUhkaFJtUlhXa1JTYW1KV1JqUlhhMmhMV1ZaS2RGVnRPVnBpUmxwNlZHeGFZVmRGTVZWVmJGWlRZVEZaTVZac1kzZE9WbGw1VTI1V1VtRXlhRlpXYTFaaFpXeHJlRmRzVG1waVZrcEhWR3hhVDFZd01IbGhSWFJYWWtaS1MxcFZaRXBsVmtwMVUyczFXRkpVVmxsV2FrSnJUa1phYzJKR1ZsTmhNMUpRV1d0a1UyVkdWblJPVjNSWVVteHNNMVl5ZEhOWlZscFhZMFJPV21FeGNHRmFWbVJIVTFad1IxcEZOVmRpYTBsNVZtMTBVMU14VFhoVGJrcFBWbTE0VkZsclduZFhWbFowWlVoa2FGSnRVbGhYYTFKVFlXMUtWMUpxVWxoaE1taE1WMVphUzJSR1ZuUlBWbkJwVW14d05sWkhlR0ZaVm1SR1RWWldWbUpHV2xSWlZFWmFUVlphYzFrelpFOVdiR3cxVlRJMVYxVnRSWGxoUmxwWFlURmFhRnBYZUhKbFJtUnpWRzF3YVZacmNFaFdSM2hoVkRGWmQwMUliR2hTV0doWVdXdGFTMU14Y0ZaV1ZFWlVVbXR3TVZaSE1VZFZNVmw0VTJ4d1dGWjZSalpVVmxwelZqSk9SMkZIY0d4aE1YQlpWbGN3TVZFeFpGZGpSVnBZWVhwc1dGbHNWbmRXTVd4eVZXczVWMVl3Y0VoV01uaFRWMnhhYzJOSFJtRldNMmd5V2xkNGQxSXlSa2RhUms1WFYwVkpNRlp0ZEd0T1IwVjRWMWhvWVZKWFVsaFpiWFIzVmpGc2NsWnVaR3BTYlhnd1drVldNR0V5U2tkalJscFdWbnBHU0ZZd1pFdFdNVXB4Vld4d2FFMVlRbmxXTVZwaFV6RktjazVXWkZoaVNFSllWV3hXVjA1R1pISlhiVVpXVFZad2VsWXlOVWRWYlVwWVlVWlNXbUV5VFRCYVZscGhWMFV4V1ZwR1ZrNVdNVWwzVmxjd01WTXhVWGhYYkd4b1VteHdXRmxyV25kaFJuQllaVVphYTAxV2NGWldiWGh2VmpBeFJWWnJhRmRpVkVVd1YxWmFXbVZXV25WVmJYaFRZVEZ3V1ZadE1UUlRNVkpIVlc1S1dHRjZWbk5WYlhNeFRWWmFTR1ZHVG1oU1ZFWlhXVEJhVTFZeVNsbFJhM2hYVmtWYVQxcFZXbUZrVms1elYyMW9UbEpHV2pOV01XUXdWbXN4VjFwR1pHcFNiSEJYV1Zod2MySXhVbFpWYTJSVFlrWmFlbFpYZERCV01ERldZbnBLVm1KWVVUQldha1pLWlcxR1NHRkdXazVXYmtKVlYxUkdZV0V5VFhoWGJrNWhVako0V0ZacldrcE5iRnB4VW0xR1dsWnNiRFZXUm1odlZrZEZlVlZzVWxwaE1YQXpWbFZhWVdNeFpISmtSMmhUWW10S1dsZHJWbGROUmxwWFYyNU9hbEp0YUZsWlZFWkxVa1phUlZKcmRHcE5helZLV1RCYVlWUnRTblJoUmxaWFlrZFJNRll5TVZkV01WcDFWR3hTYVZJeFNsbFdWM2hYWkRGT1YxcEdWbEppVlZwdlZGWldkMlZzV25ST1ZYUlhVakJ3V2xsVll6VlpWbGw2Vld0MFZWWldjSEpXTVdSUFVtczVXR0pGTlZkaVNFSkxWbTB3ZDAxV1RYaFZiazVWWVRKb1YxbHNWbUZaVm14VlVteGFiRkpzV1RKVmJURkhWa1pKZUZOclpGVk5WMUo2V1ZWa1YyTnNaSEpoUm1ob1RWWndiMVpZY0VkVk1rMTRXa1pzYWxJeWFGUldiWFIzVjFaa1YxVnJkRlpOYkZwNlZtMTRiMkpHVGtkalNFNVdZbGhTYUZwWGVHRlhSMVpHWkVaa1RsSkZXWGhYVmxaclVqRlplRmRZY0ZaaVIyaFhXVmQwUm1WR2JEWlNiR1JxVFZad2VsWkhNWE5oVjBWM1kwUmFWMkpIVVRCV1ZFcFBZMnN4V1ZSc2FHaE5iRXBZVjFaU1QxVXlTWGhYYmxKc1VtMVNUMVJXWkRSbFZscHpWV3hrVjJKVldUSlZiWEJEVmpGSmVsRnNRbGRpVkVaWVdUSjRhMk50VWtoU2JHUlhZbXRLVWxZeFVrdE9SMFY1VkZob1ZtSnJOV2hWYlRGVFZrWnNWVlJyU214U2JIQXdXbFZhYTFkc1duTlNhbEpXWWxSV1ZGWlVTa3RUUmxaMFQxWmFhVkp1UW05V2JGSkhWMjFSZVZKcldsVmlSbHBQVm0xMGQxZFdaRmRXYkZwUFZteEtlVlJXV210Vk1rWnpZMGRHVlZaV2NGZGFWVnB6WTJ4a2MyTkhkRTVoZWxaSlZtMHhORmxXVW5OWGJrNVhZV3hLV0ZacVRsTmhSbkJGVVZSR2FrMVZjREZWTWpFMFZUSktWMU5zYkZkU2JFcElWWHBHYTFZeFpIVlZiWFJUVFVad1ZsWkdXbUZqTURWSFYyNVNiRko2YkdGV2JYUjNaVlpaZVdWSGRGZFdiSEJZVmpJeGIxbFdTa1pYYlVaaFVrVmFhRmw2UmxOak1VNTBZa1prYVZORlJYaFdiWFJoVmpKSmVWTlliRk5pYTNCUFZUQmtORll4YkhKV2JVWm9VbXh3ZUZaSGVFOVdWa3B6VTJ4a1YwMXVUVEZXTUZwTFpFZFNSVmRzYUdoTldFSlZWbXRrTkZNeVRuUlVhMlJXWWtkb1dGVnNWbmRYVmxweVZXdGtXbFpzY0hsVVZscGhZVlpKZVdGR1VsZGlWRlpFVm0xNFlXUkhWa2RYYXpWWFlURlpNRll5ZEc5U01WWjBVMjVLVDFac1NsaFphMXBMVTBaVmVGZHRkR3BpUm5BeFYydGtiMVl5UmpaV2EzQlhZa1p3ZGxwRVJscGxSazUxVlcxb1UxSlVWbGxXVjNSWFdWZFdjMkV6YkdwbGJGcFlWbTB4VTJWc1draE5XRTVvVm10d1dsVlhjM2hXTWtaeVlUTm9ZVkpGV2tkYVZWcFhZMnh3UjJGR2FGTk5iV2hhVmpGa01HRXhWWGhYYms1WVlteEtjMVZzYUZOV1JsSlhWMnRrVDFKc2JEVlVWVkpYVmpGSmQyTkZaRnBOUmxwb1ZtMTRZVTVzUmxsaFJtUm9UVmhDYjFadE1YcE5WbHB6Vlc1T2FGSXlhRzlVVldoQ1RXeGFjMWt6YUU5U2JFWTFWa1pvYjFVeVNuSk9WbWhhWVRGVmVGWXdXbk5XVmtwMVdrVTFWMkpJUW1GWFZFSldUbGRHY2sxV1dsZGhiRXBZVldwT1UyTnNXbkZUYTNScVlsVTFTRmxWV25kV01VcFhZak53VjJKVVJUQlpWRXBUVjBaU2NsZHNWbWxTYkhCVlYxWlNUMUV4VGxkWGJHaE9Va1ZhYjFSV1duZGxWbEpYVjIxR2FHSkZjREJaVlZwdlZsWmFObFpzVWxwV1ZuQm9Xa1ZWZUZadFVrZFViV2hzWWtad1dWWnFTakJaVmxWNFYxaG9XR0pyY0ZsV01HaERWMFpTV0U1VlRsTlNiWGN5VlRKek1XSkdXbk5YYkhCYVRVZFNTRlpVUm1GU01XUjFZMFpvVjJKWFozcFdiWEJMVkRGSmVGcElTbGRpUmxwd1dXeGFTMlJzV2tkYVJGSlVUVlZzTkZscmFFdFhiVlp5VjJ4YVdtRXhXak5XTW5oaFYwZFNTRkpzWkU1V2JrRjNWbXRhVTFJeFdYaFRhMXBZWVRKU2FGWnRlSGRsVm5CWVpVaGtVMDFXV25sVWJGcHZWVEZhV1ZGcmVGZGlWRUl6V2tSS1VtVldXbkphUmxacFlYcFdWMWRXVWtka01rNVhWbGhrVjFaRldtRldiVEUwWlZaa2NsWlVSbFZpUm5CNlZUSjRjMWxXV2xoaFNFcFhZV3RHTkZWc1pFdFNNa3BJVW14a1YwMVZiekpXYlhCRFdWWk5lRmR1VWxSaE1WcFdXV3RrYjJOR1ZuUk9WVTVvVW14d1NWcFZaREJXVjBwWFYyeG9WazFxVmxCWlZWcExWbGRLUjJGR1ZsZFNXRUl5VjJ4V1lXRXlUWGhhU0ZKclVqSjRUMWxyVm5kVFZtUllaRWRHYUUxWGVGaFZNblJyVmtkS2NsTnNaRnBpUmtwSVdUSjRVMlJIVmtkYVJtaFRWa1ZhV2xaRVJtdGlNVkp6VjJ4b2EyVnJXbGhVVnpWVFpHeHNWVkp0UmxkaGVrWmFWbGQ0VjJGSFJqWldiR2hZWWtkUmQxVjZSbUZTTVdSellVVTFWMWRGU25wV2JUQXhVVEZKZUdFelpGaGhNMUpXV1d0V2QxZEdhM2RWYTJSWFRVUkdNVlpYZUZOV2JWWnlZMFU1WVZKRlJqUldiVEZIVWpGU2RHRkZOVmRYUlVwV1ZtcEdhbVZGTlVoVldHeFZZa2RTV0ZsdGRHRldSbXh6Vm0xR1ZVMVdjREJaZWs1dlZHc3hXRlZ1YkZoaE1WcHlXVlZrUzFKdFNrVlViSEJPVW14d05sWnRjRXRUTVZwWFUyNVNhRkp1UWxoVVZFcHZWRVprY2xWclpHaE5WMUpZV1RCV2EyRnNTblJWYkdoWFlURndTMVJYZUdGalZrNTFXa1pLVG1KRmIzZFdiVEF4VkRGYVdGTnJhR2hTYTBwWVdXdGFTMU5HV2xWU2JFNVhZa1p3TVZkclpEUmhWa2w0VTJ4d1YxSnNXblpaYWtaaFZtc3hXVlJzVW1saWEwcG9Wa1pXWVZsWFVuTmlSbVJZWVhwc1ZGUldaRk5OUm14V1drVmtWMDFFUWpOVk1uUlhWMGRGZUdOSGFHRlNSVnBMV2xaYVMyTnNjRWRXYld4WFRUSm9XbFp0Y0VOaE1rbDRWMWhvV0ZkSGVIRlZiR2hEVkRGYWRHVkZkRlJTYkhCNldWVmtNRll4U1hkalJscGFZVEpTU0Zac1dtRlNiVW8yVVd4YWFFMVlRalpYV0hCSFdWWmFWMWR1VW1sU01taHpXVlJHZDFOV1dYbGtSbVJYVFZac05GWXlOVTlYUjBaelkwaENWazFHY0doV2FrWlRWakZrZEZKc1dsTmlSbkJhVjJ4V2IxbFhSWGROV0VwcVVsZFNXRlpxVG05VVJscHhVVmhvYWsxVk5YbGFWVnByVmpBd2QxTnJVbGRTYkhCWFdsVmtUbVZXVG5KaVJscG9aVzE0V1ZkV2FIZFdNbEY0VjJ4b2FsSlZOWEpVVlZKSFYwWlplV1ZIZEZwV2EydzJWbGQ0YTFZeVNsbGhSbWhWVmtWYVYxcFdWVEZXTVZKeldrWmthRTFxYURWV2JUQjRUVVUxUjFwSVVsTlhSMmh4VlRCb1ExZEdVbFpYYm1SWVVtNUNTRll5ZUU5aE1VbDNWMnRvV0dFeVVUQlpWbHBMWkZaR1ZWTnNaR2hoTVhCVlZtdFNTMVJ0VmxkVWJsWldZa1phYjFSV2FFTlhSbVJZWkVaa2EwMXJOVWhXVjNoaFZtMUtTRlZzVWxkaVZFVXdWakJhWVdSSFVraGtSMmhYVFVoQ1NGWkhlR0ZoTVZsNFUxaHdWbUpGU2xoVmFrNVBUa1pyZVdWSGRHcE5helZJVjJ0YWEySkhSWGRXYWxKWFlrWktURlJyV2s1a01EVlpWV3hTYUUxV2NGZFhWM1JyWWpKT1IxWnVSbEpYUjJoUFZGWmtVMWRXYTNkV2JYUm9UVVJHZWxVeWRITldhekYxVlc1d1YySkhVa3hXYlhocll6SkdSMk5HWkd4aE1Wa3lWako0YTA1R1pIUldhMlJoVTBaS1VWWnRlSGRVTVd4VlUycE9iR0pIVW5wV2JYaHJWbXN4VjFkdWNGZE5ia0pvVm1wS1MyTnRUa2hoUm1ScFZrVmFWVlpzVm1Ga01XUklWbXRhVUZadFVuQlZNRlpMVTFaWmVXUkhkRTVTYkd3MVZUSjRjMVpzV2taWGJHaFdZVEZhYUZreWVGTldiSEJHV2taT1RsWXhTalJXYWtvMFlUSkdXRk5yWkdwU2JXaFlWbTV3UjA1c1VsZGFSVGxxVFZaYWVsZHJaRWRWTWtZMlZteGFWMVo2UWpSV1ZFWnJZekZrYzJGSGVGTldWRlpZVjFab2QxSXlWbGRWYms1V1lYcHNXRmxZY0VkWFJsbDVUbFYwVjJKVldubFpNRnB2VjJzeGNWSnJlRlppVkVaSVZXcEtSMUl4Y0VkVWJXeG9UVWhDU2xadE1IaE9SbXhZVW01S1QxWnRVbGRXTUdSdlZrWlpkMXBFVW1wU2JGcDZWbTAxYTJGR1NuTlRiR1JZWVRGS1ZGWlVSbUZqTVdSellVWm9hRTFzUmpOV2JYUnJVekZLYzFkdVJsVmlSbkJ3Vm10V1IwNUdXbkZSYlhSVVRWWndXRlZ0ZUZkVk1rcFdWMnhvV21FeGNETlViWGhoVmxaR2RHUkdaRTVXVkZaWlZsY3dNVlV5UmxkVFdHeHNVbTFvWVZsVVJuZE5NVkpYVjJ4d2JGSnRVakJWYlRGdllVZFdjbGRyYkZoV00wSlFXV3BLUjFKck1VbGlSM2hUWVRGd1dWWkdWbUZrTWtaSFlUTnNiRkp0VW5GV2JYUjNUVVpXZEdONlJsZE5hM0I1VlRKMGIxWXlTa2hVV0doWVZteHdhRll3V2t0WFZuQkdUMVpvVTJKSVFsaFdiVEUwV1Zaa2RGVllhRmRYUjNoelZXeGFkMk5zVWxkV2JtUk9VbXhLZWxZeWVFOVdNREZYWTBaYVYySllVbFJXYWtGNFpGWkdjbFZzY0d4aE1YQk5WbGR3UjFNeVRYbFNhMmhUWWtVMVdWVnNWbmRXVmxweVYyeGtWMDFYZUZsV1YzaHJXVlpLZEZWc2JGcGlSMmhVVmpGYWMyTnNiRFpXYXpsWFlrWlpNVmRyVm1wT1YwWkhWMjVLVDFaWGFGaFVWM0JIWkd4YWNWSnRkRlJXYTFwNldWVmFWMkZXWkVoYU0zQlhWbnBDTkZWcVJrdGtSbFp5WVVkd1UyRjZWbEJXVjNSaFdWWkplRmR1UmxSaWJWSldWRlpXVjA1R1duUmtSemxXVFd0d1NGa3dXbE5YYlVwSFUyeG9WMkpHY0dGYVJFWjNVbFpXYzFSc1RtbFRSVWt4Vm1wS01GWXlSWGhYV0doVVltdHdXVmxYZEdGWFJsWnhWRzA1VGsxV2NEQlplazV2VlRKS1ZrNVZXbGROYm1oMlZtcEtTMU5XUm5WaVJtaFhZa1Z3VFZac1VrZFhiVlpYVlc1S1lWSnNjSEJWYkdoRFpERmtXR1JIUm10TlZrcFlWakowYTFsV1NrZFRiVVpYWWtaS1dGcFhlSEprTVZwMFVteGtWMDFHV1hwV1IzaHZVekZhVjFkdVVsWldSVXBZVkZjMWIyRkdWbkZTYm1SVVVqRktTVmxWVlRGaFJUQjNVMjFHVjAxdWFGaFpha1pPWlVad1JtRkdVbWhOV0VKWlYxWmtlazFXV1hoalJtaHJVbGhTV0ZWdGVIZFhWbEpYVm01a2FWSnNjREZWVjNSclYyc3hSMk5GZUZkU00yaE1WbXBLVDFKV1NuTmFSbVJUVm01Q1dsWnRkRk5TTVVsNVZGaHNWRmRJUW1oVmFrbzBWa1phZEdSSVpGZFNiSEF3V1RCV01GWnJNVlpOVkZKWFlsaG9XRlpYTVVabFZsWjFVV3h3YUUxV1ZqUldiWEJIV1ZaT1NGVnJXbXRTYmtKWVZtdFdZVmxXV2xkWmVrWm9UVlp3V1ZVeWRHdFdSMHBHVTIxR1YySnVRa2hXUlZwYVpERndSMU50ZUdsVFJVcEpWMVpXYTJNeFZYaFhhMlJZVjBkNFdGUldaRzlOTVZZMlVtdHdiRkp1UWtkV01uTTFWakpLV0dGSWNGZFdNMmgyV1dwR1dtVkdaSFZUYkdSb1RURktWMVp0TVRSWlYxWlhWMWhzYTFJelVtOVVWM1IzVTFaUmVGVnJPVmhpVlZZMFZqSjRVMVl4V1hwaFIwWmhWbXh3V0ZwR1drdGpNV1J5VGxaT2FWSjZhekpXYWtvd1ZURkplVlJZYkZaaE1YQlFWbTB4VTFaV2JITmFSRkpWVFZac00xWnRkREJVYXpGWFlrUldZVkpYVWpOWmExcEtaREZrY21GR1pFNVdNbWg1Vm10U1IyRXhTWGxVYTJoVFlrZFNjRlpyVm1GV1ZscHhVVzFHYTAxV2JEUldNalZYVmxkS1JrNVdVbHBXUlZvelZHdGFXbVZYVWtoU2JIQlhUVVp3U0ZaR1dtRmhNa1p6VTJ4b1ZtSkhlR0ZaYTJSdlpHeHdTR1ZHVGxkaVNFSkhXa1ZhYjFVeVJYcFJhbHBZVm14YWNsUnJXbFprTURGSllrZG9VMDFHY0ZsV1Z6RTBVekZLUjFacVdsUmhNMEp6VldwQk1WSXhXWGxOVldSV1RXeGFNRnBWV2t0V01rcFpVV3RvVjJGclJYaFZha1poVjFkS1NHUkdUazVTYmtKYVZqRmFiMlF4U1hoVWEyUllWMGQ0YzFWcVFtRlpWbHB4VVc1a1UwMVdTbnBXYlhoUFYyeGFjbU5HYkZkV00xRjNWMVphWVdNeVRrZGhSMFpUWWtoQ1NWZHJWbUZUTWxKSVUydGtZVkl6YUhCVmJUVkRVMVphY1ZKc1RsTk5WM2hZVmxab2MxVXlTbk5UYkZwYVZrVmFNMVpxUm5OamJGcDFXa2R3VTJKRmNGaFdiR1EwWVRGVmVGZHVVbXhTUlVwb1ZteGFXbVF4V2tWU2JVWnJWbXRhZWxsVldtdFdNbFp6VjIwNVYySllhSEpWYlRGU1pEQTFWMkpIUmxOaVNFSlpWMWQ0WVZNeVZsZFhiRlpVWVd4S1ZGbHNXa2RPUmxwSVpVaE9hR0pGY0RGVlYzaHZWMjFLU0ZWdVdsZGlSbkJ5VmpCa1QxSnNVblJqUlRWWFZrWmFTVlpyVWtkWlYwMTRZa1prVkZkSFVsbFphMlJ2WVVaYWNWUnRPVlZTYkVwWldsVmFZV0pHV1hkT1ZXUlZUVlp3Y2xaSE1VdFNiR1JWVVd4b1YxSlZjRmxYVjNCSFZtMVdWMU51VmxSaVJrcHdWbXBLYjFkV1duRlJiVGxTVFZac05Ga3dWbGRWTWtwMFZXeG9XbUpHV21oVk1GcFdaVlV4V1ZSdGFGTldSVWt4VjFaV1YxbFdXWGhYYms1cVUwVndZVnBYZEhkVFJuQkdWMnQwYWsxWFVqQlphMXBUVlRBeFZtTkdaRmRpVkVVd1dWUkdWbVZHVW5KYVIzQlRZbGRvZVZaVVFsWk5WbHBYVm01U1RsWnJOVmhaYTFwelRsWndSbGR0ZEZkTmEzQklXVzV3UzFkdFJYbGhSbWhYWWxoT05GWnFSbXRqTVVaelYyeGtUazF0WkRWV01uUlRVekZOZUZOdVRsZGlhelZWV1d0a1UxUXhiSEpXYm1SVlZteHdlbGRyYUd0Vk1ERnpVbXBXVjFadGFIWlpWbHBQVW0xT1NHRkdXbWxXUlZwVlYxaHdSMk14V2xkVWJrWldZa1UxY0ZWdGRIZFhSbGw1WkVkMFRsSnRVbnBXTVdoclYwZEtSMk5HYUZwaVIyaEVWakJhV21ReGNFWmtSbEpUWWtad05WZFdWbUZrTVZsNFUyeHNVbUY2UmxoV2ExWkxZMnhXTmxKck9WZE5WMUl4VmxkNFQyRldTWGxoUmxaWFlsaFNXRll5TVZkV01XUnpZa2R3VTFZeFNsVlhWM2hoVWpBMVIxZHJaR2hTZW14dldXdFdkMDFHY0ZaWmVsWlhZbFZhZVZSc1ZsTlhiRnBYWTBkR1lWSkZXbWhaTWpGUFUwZFNSazVXWkdoTlYzUTBWbTF3UjFVeFVYbFNXR2hZWVRGd1QxWnNaRzlqTVZaelYyMUdWMDFXY0RCVVZscFBZVzFLUjFacVZtRldWbG96V1d0YVNtUXdOVlpqUm1ob1RWaEJlbGRXVmxabFIwMTRWRzVPYVZKdGFIQlZha1pIVFRGa1dXTkZaRlJOVm5CNVZGWmFZV0ZHU1hkWGJGSmFZa2RTZGxwWGVHRmtSMDVHV2taU1RsSkZXa2xXTW5SaFl6SkdjMU5zYkZKaVJVcFlXVmQwUzJGR1VsWlhiR1JyVWpGYVNWUXhXbXRVYlVWNFkwUldWMVpGYTNoV1JFWmFaVVp3Um1KR1NtbFNNbWhYVm0xMFYxbFZNSGhYYmtaVFlrVTFjbFZxUVRGVFZtdDNWbFJHVmsxRVFqVlpWVlpyVmpKR2NtSXpaRnBoYTFwUFdsVmtTMUl4Y0VoU2JFNVhUVzFvTmxac1VrTlpWbXhYV2taa2FWTkZjR2hWYkZKWFkyeFNWMkZGVGxSU2JWSjVWbXhTVjFZeFNuTmlSRTVYWWxoQ1dGWnNaRXRTTVZweFZXeGtWMDB3TkRCV1Z6RTBZVEpPVjFOdVRtaFNiVkpQVkZjeGIwNVdXWGhoU0dSVVRWWldORll4YUhOV1YwVjVWVzVDVm1KWWFFeFdNVnBYWkVkV1NWcEhlRk5pU0VKWFZsWmplRTFHVW5OVFdHaFVZa2RvV0ZacVRsTmhSbHB6V2tWYWEwMXJOVXBWVjNoM1lVVXhkR0ZGVmxkV1JWcG9WMVprVTFKck1WZGlSMFpUVFcxb2QxWnRlRzlSYlZGNFdraE9WMkpGTlZaVVZtUTBWMFpWZVdWSE9WZGlWWEJKV1ZWa2IxWXlTbGxoUjBaVlZsWndNMVZxUm10amJIQklZMFprYVZORlNURldNblJYWVRBMVIxcEZaRlJYUjJoVldWZDBZVmRHV25KV2JtUk9UVlpaTWxWdGVFdGlSbHB6VjJwR1YxWXphRlJaVm1STFVqSk9SMkZHYUZkTk1tZ3lWMWR3UzFSdFZrZFhiR3hoVW0xb2IxUlhlRXRWUmxwMFRVaG9UbEpVUWpSWmExcGhZVVpLV1ZWdE9WZGhhMHBZVkcxNGMxWnNXbk5hUm1ScFVtNUJkMVpyV205aU1WbDNUVmhXVldGc1NtRlVWbVJUVkVaV2MxZHJkR3BOYTFwSldXdGFhMVV4V25SUFNHeFhZV3RhY1ZwVlZYaFNhelZXWVVaYWFFMXNTbGhYVnpFMFV6RlJlRmR1UmxKaVZWcHhWRlphZDJWR1ZsZFZhMlJWVFd0d1NGWnRjRk5XTWtwWlZGUkdXbFpXVmpSVmJGcExaRmRPUjJORk5WTmlhMGt5Vm0weE1HRXhUWGxWYkdSVFlteEtVVlp0TVZOalJteDBaRVYwVDJKR2NFaFdNakZIVm1zeFZrNVZaRlZpUm5CeVZteGtSMDV0U2tkVmJGWlhZa1p2ZWxaWE1UUlhiVlpIVm01S1VGWnNXazlXYkZKWFRteGFXR1ZIT1doTmExcFhWRlZvYzJGR1NYZFhiRnBYWWtkU1ZGWnJXbUZqYkdSMVZHeGthVk5GU2tsV2EyUTBWVEZWZVZOcmJGSlhSMmhaVm1wT1UxWXhjRlphUldSWVVtdHdXbGRyWkc5VWF6RjBZVVpvVjFKc2NISldWRXBYWXpGV2MxWnNUbWxpU0VKNVZrWmtNR1F4VG5OWGJsSnNVak5TYjFacVFuZFhSbFY1VFVSV1YwMVdiRFpWVjNSVFZqQXhjVkpzVG1GV1ZuQXpWVEZhVTJNeFduTmFSazVYWW10S1VsWnRlR3RrTVVsNFlrWmtWV0pyTlZsWmEyUlRZVVpWZDFaVVJsaFdiSEF3V2xWa1IxWXlTa2RYYkd4aFVsWktWRlp0YzNoV2JVNUpZa1prVG1KclNsRldha3A2WlVaSmVWUnJXbFppUjFKd1ZXMDFRMU5XV25STldIQk9WbXh3ZWxadE5WTlZNa3BaWVVjNVZWWlhhRVJXUkVaaFpFZE9SbU5IZEU1aVJWbDZWa2Q0WVdJeFdYbFRhMlJxVTBWS1YxbHJaRk5rYkZsNFYyNU9hMUl4U2tkYVJXUjNWVEpLUjJORVVsZFdla1V3V1ZSS1IxZEdUbkpoUjNoVFlsZG9XbFpxUW05Uk1VcEhXa1prVjFkSGFGbFdiWFJoWlVaV1dHVklaR2hTVkVZd1dWVmFSMVl3TVZkalIyaGFWa1ZhVEZreWMzaFdiRnB6Vlcxc1UxWkdXbFpXTVZwVFVqSlNkRlpzWkZoaWEzQm9WV3RXUzFac1VsaGpla1pVVW14YU1GcFZZelZYYkZweVkwWndWbFl6YUZCV2JGcGhWakZrY1ZSc1ZsZFdia0o1Vm0xd1IyRXlVa2hWYTFwUVZtczFUMVV3Vmt0VFZsbDRXa1JDVjAxV2JEUldWelZQVmtaa1NHVkdaRnBpUjFKMlYxWmFjMk5zY0VkVGF6VlRZbXRLV2xkc1ZtdE5SMFp5VFZaa1ZHSkdjRmRaYkZKR1RVWnNWMWR0Um1waVZUVkhXa1ZhYTFZeFNsaGtSRkpYVm14S1RGVnFTazVsUms1ellrZHNVMDFHY0ZaV1YzQkhVekZhVjFkc2FFNVdSVXBoVm14U1IyVnNXWGxrUnpsb1RWVndWbGxyYUVkV2JVcFpWVzFvVjAxV2NISlpNbmhoWkZad1IxZHRhR3hoTVhCSlZqRmpNV1F4U1hoWFdHUk9WMFphYjFVd1duZFhSbFp5Vm01a1ZrMVlRbGhXTW5NMVYwWlpkMk5GWkZWTlZuQjJWbXRhUzFadFRrbFhiR1JwVjBkb1ZWWldVa2RUTWs1eVRsWmtZVkpzV25CVmJUVkRaR3hhV0dWSE9WWk5helZJVm0wMVIxVnNXa1pYYkd4YVlURndNMVJWV2xOV01WWnpWRzFvVTAxR2EzbFdWbVIzVlRGYWNrMVlWbEppVjJoWVdXdGFkMVJHVW5SbFJYUnJWbXMxZWxrd1pHOVViVXBHWTBaYVYySkhVWGRaVkVaS1pVWlNjbGRyTlZkaVNFSjRWbGR3UzA1R1pFZFZiR2hPVm10d2MxbHJXbk5PVm5CR1YyMTBhRlpVUmxkV2JYQlhWakpLVlZacmVGZFdWbkJ5VlcxNFQyTXhTbk5YYXpWVFltdEdObFl4VWtkWlYwMTVWRmhvV0dKck5YRlZhazV2WTBaV2RHUklaRlJpUm5CSVZqSXhNRlJzU1hkWGJuQldUVmRvZGxaclpFWmxWMVpJVW14a2FWSnVRazFXVkVKaFYyMVdWazFXV210U00wSlBWbXBHUzA1R1duRlRhbEpwVFd0YVdGVXhhSE5oUmtwVlVteHNWMkpVUmxCVWExcFdaVlV4VjFwR1pHaGxiRnBaVm0weE5GTXlSbGRYYkdScVVtMTRXVmxyWkZKTlJscHhVVmhrYkZKdFVubFdNbmgzVkdzeGRHRkdaRmRTYlZFd1ZYcEJlRkl4V2xsaVIzaFRZWHBXV0ZaWE1UUmpNRFZYWTBaYVlWSjZiRmhVVjNSM1RWWldXR1ZIT1ZwV2JIQllXVEJvZDFZeVJuSlhiR2hoVWxkU1VGVnRjekZXYXpWWFZHeE9hVk5GU2twV2JUQjRUVVpzV0ZOWWJGTlhSMmhYV1d0YWQxUXhXWGRXVkVacVZteGFlVll5Tld0WGJGcDBaVVpzWVZKWGFISldiWGhMWkVkU1JWUnNaRTVoYkZwNVZtcENZVmxYVFhoYVNGWm9VbTFTY0ZZd1ZUQk5SbHB5V1ROb1UwMXJOWHBYYTJoWFYwZEtTR0ZHYUZwaE1taEVXbFZhWVZJeFduUmtSbHBPWWtWd1NWWnFTalJqTWtaWFUyNVNhRk5GU21GV2ExWkxUVEZ3UlZKdFJsaFNNRFZIVjJ0YWIyRkhWbk5YYkd4WFlUSlJNRmxxU2tkV01WSnlWMjF3VTJKSVFtaFdiWFJYVW0xV1IyTkZaRmhpUlRWWVdXdGFkMlZHVmxobFJrNW9WbXR3V0ZZeGFIZFdNVm8yVVdwT1ZWWnNjR2hWYWtacll6SkdSMWR0YkdsaE1IQnZWakZrTUZsV2JGaFdiazVYVjBkb1dWbFljSE5qYkZaeFVtMUdWRlp0ZEROV2JGSkhWbGRLUm1OR2JGVk5Wa3BZVm1wQmVGZEdVbkZVYkZaWFlraENWRmRzV21GVU1rNXpXa2hTYkZKc1NsUlphMmhEVjBaWmVGZHRkRTVTYXpFMFdXdGFhMWRHWkVoVmJHeGFWa1UxUkZsNlJsZGtSVEZWVkdzMWFWSnNjRFpXYkdRMFlUSkdSMU5ZWkdwU2JWSmhXVlJHUzFkR1duRlNiVVpQWWtWd1ZsVlhlR0ZVYlVwMFlVVXhWMVl6YUdoVmFrWmhWakZrZFZSc1dtbFNNVXBaVjFaU1QxRXhVbGRYV0d4clVtczFVMWxzV21GVFJsVjVaVWM1VjFKdFVrbFdWM2hEVmpKS1IyTkZlRnBXVm5BelZqQmtVMUp0VWtkV2JHUnBVbXhyZDFadE1IaGxhelZYVm01U1ZHRXlhRkZXYTFVeFdWWnNWVkp0UmxkU2JIQlpXbFZhZDJKR1duTlhibXhoVWxad2FGWnFSa3RXYlU1R1RWWm9hRTFXY0c5WFdIQkhWMjFXU0ZScldsZGlSbkJ3Vm1wT2IxWldaRmhsUjNSV1lYcEdlbFl5ZUd0WGF6QjVZVWhDVlZZelVsaFVhMXBXWlVkR1NWUnNjRmRoTWpoNVZtMHhOR0V4V25SVGJHeFZWMGRvVjFaclZtRmxiRnB4VW0xMGFtSklRa2RVTVdSelZqRmFSMWRyZEZkaVdGSnlWR3RrVG1WR1dsbGFSVFZYWWxob1ZGWnRkRmRrTVdSWFYyNUdWV0V3TlZaVmJYaDNVbXhWZVdONlZsWk5SRVo1Vkd4V2IxZHRSWGhqUjJoYVZsZFNURlZxU2s5VFJrcHpXa1prYkdFd1dUQldNVnBUVXpGUmVGTllhRlppYXpWWldXdGFZV05HYkhSa1JYUnBUVlp3U0ZZeU1EVlZhekZGVW10b1dtRXlhRXhaVlZwTFZsZEtTRkpzWkdsWFIyaHZWbTB4TkZZeFpFaFZhMVpXWWtad1QxWnNhRU5PVmxweFUyNWtWRTFYVWtsVmJUVkxWa2RLZFZGc1pGcFdSVm96VlRCYVdtUXhaSFZhUms1cFZsUldTVlpVU25wTlZsVjRWMjVXVWxkSGFGaFphMXBMVTBaYWNWTnJjR3hXYTNCYVdXdGFWMkZGTVhSaFJtaFlWbXhLVEZscVNrZFNNVlp6WVVVMVYyRjZWbmhXVnpFMFV6RmFjMVpzYUd0U1JVcHZXVmh3UjFkV2NGWlZhMDVZWWxWV05WWkdhRzlYYkZwWFkwZG9XazF1YUhKV2JGcFBZekpPUms1V1RrNVdXRUpUVm0weGQxSXhiRmRVYmxKWFlUSm9WbGxVUm1GWFZteHlZVVZPYVUxWGVGWldSM1JQVm14YWRGVnNXbFpXZWtaSVdWUkJlRmRHVm5OaFJtUnBWa1phU1ZadGNFdFRNVTVJVm10a1ZtSklRbkJXYTFaaFZsWmtjbFZyWkZkaVZsb3dWa2QwWVdFeFNuVlJiR2hWVmxaS1dGVXllR0ZXVms1eFVXMXNUbFp0ZHpCV01uUlhXVlpSZUZkc2JGWmlSMUpZV1ZSR1lWUkdVbGhsU0dSWVVqRmFSMVF4V205Vk1ERkpVV3RrVjJFeVRqUlZha1pUWXpGd1JsZHNVbWxUUlVwWlZsZHdUMkl5VG5OalJWWlVZVEpTV0ZsWWNFZFhiRnBJWlVaT2FGWXdjRmhWTWpGdlYwWlplbUZHVWxaaGEzQlFWbXBHVjFkWFJrZGFSMnhvWld4YU5WWnRNSGhPUjFGNVZtdGtWMkpIYUU5V2JHUlRZakZXZEdWSVpGTk5WbHA2V1ZWa01GWXlSalpTYkd4WFZucFdNMVl5YzNoa1YwWkZVMjFHVjFZeFNrMVdWM0JMVXpGSmVGZHVUbUZTVkZad1ZXeG9RMDFzV25GU2JVWm9ZbFpHTTFSc1dtdFdiR1JJWVVaU1YwMUhVVEJYVmxwVFZsWk9jMVJzWkZkaVJYQllWakowVTFVeFZYaFhiazVZWWtkb1dWbFVTbEprTVZweVdrVjBVMkpHY0hoV1IzaGhZVlphUmxKcVVsZGlXRkpvVjFaYVlXTnJOVmRYYkZacFVqSm9kbGRXVWtOa01EVnpWMnhvYTFJd1dsUlVWbVJUVTBacmQxWnRPVlpOYTNCWldWVmFiMVp0U2xsaFIwWlZWak5vWVZwVldsZGpiVTVJWlVaT1RsSkZWalpXYTFwaFZqSkZlVkp1VGxSaWF6VlZXV3hTYzFZeFVsWmFSa3BPVW0xNFYxWXllSGRoTURGWFkwWmFWbUpZVFhoV1IzaGFaVzFHUlZWc1pGZFNWbkJWVmxkd1MxTXhUa2RVYmtwcFVtdHdjRlZ0ZUhkV01XUllaRWRHVkUxVmNFaFhhMXByVjBkS1dWVnNWbFppVkVFeFZHMTRhMk5zWkhOVWJGWnBVbTVDV1ZacVJtOWtNVmw0V2tWc1VtRXhTbGhXYTFaaFYwWndSbGRyT1ZoV01IQkpWVzE0VDFkR1NsWmpSbFpYWVRGd1dGWnFSbk5YUmxaeldrWmtXRkl5YUZsWFZtaDNZekZWZUdKSVNscGxiRnBQVkZaa05HVldXblJsUlRsWFlsVndTRmxyVWxkV01WbDZWVmhrVjJKWWFHaFZiWGhQWTIxV1IxWnRiRk5pYTBvMVZqRm9kMUl5VG5SV2JsSlRZVEpvY2xWcVNqUlhSbXhWVTFSV1RrMVdjREJVVldocllrWktkR1ZHYUZwaE1YQnlWakJrUjJNeVRrZFZiSEJYVFRBeE5GZFdWbUZXTWsxNFkwVm9VRll6YUhCVmFrWktaREZhUjFkc1pFNVNiSEJJVlRGb2EyRnNTbGxSYkdoYVlrWktTRlV3V2xwa01XUnlaRVprVjJFelFqUldWRW8wWVRGU2RGSnVTbFJXUlVwWlZqQm9RMVJHV2toTlZtUlVVbXhLZVZkclpFZFZNa1YzWTBad1YxWXpRa2hWZWtwSFVqRmtkVkpzU21sV1ZuQldWa1prTkZNeVZuTlhhMlJvVW5wc1YxUldaRk5UVmxwWVpVWmtWMVpzY0ZoWk1GWTBWakZhUmxkdWNGcE5WbkJRV2tWa1UxSXhWblJpUms1WFlrZDNNbFp0ZUdwa01sRjNUVlprV0dFeVVsbFphMXAzVlVaYWMxWlVSbGhXYlhoWldrVldNR0pIU2tkV2FrNVlZVEZaZDFacldrdFdWa3B6V2tad1RsSnVRbEZXYTJRMFlURktjMVJzYkdwU2JWSlBWbXBHUjAweFpGZFZhMlJhVmpBeE5WVXhhSGRoUmtweVkwaENWbUpZYUROV1ZWcGhWMGRPUm1SRk9WTk5SbkJKVjFkMGIxVXlSblJXYmtwWVlYcHNZVmxVU2xOV1JscDBaVVphYkZaVVZsZFVNV1J2VmpKRmVXUjZRbGRXUlc5M1drUkdhMk14WkhKWGF6bFhZbGRvYUZadGNFOWlNVlpIVmxoa1lWSnJOVlZXYlhSaFpXeGFkR042Um1oV2JIQldWbGR3WVZZeVNraGhSRTVXVmtWYVYxcFZXbUZrVmxaelZXeG9VMDB5YUhaV2JHUTBZakZGZUZaWWFGWmlSbkJZV1d4V1lXTnNXblJsUm1SUFVteHdNRmt6Y0ZkV2JVcFdZMFZzVlUxV1NsQldNakZHWlVaa2MxVnNaRmROTW1ob1YyeGFZVll5VG5SVmEyUllZa2RTVkZac2FFTlViRnB5VjIxMFQxSXdOVEJXYlRWVFZUSkdjMk5HVWxwaVIyaDJXVEJhWVdSSFZrbGFSbkJYWWtoQ05WWXlkRzloTVZaeVRWWm9iRkp0YUZoVVZ6VkRZVVphV0UxVmRHcE5helZJVm0xNGQxWXdNSGROVkZKWFZqTlNhRlpVU2s1bFIwNUdXa1pXYVZKcmNGVldSbFpoWkRGTmVGZHVSbFJYUjJoeFZGZDBZVk5HV1hsbFIwWm9Za1UxU1ZsVlduTldNa1Y0VjI1c1lWWldjSHBVYlhoUFl6Rk9kR1ZHWkdsU2JrRXhWakZhVjFsWFJYbFNiR2hVWWtkNGIxVnNVbk5YVmxwMVkwVmFhMDFXVmpWWmVrNXZWakF4VjFOcVJsZGlWRVo2Vm10YVMxZFdSblJQVm1SVFlrWndlVlpIZEdGU2JWWkhWbTVPV0dKSFVtOVpWRUozVmxaYWRFMVVVbHBXYlZKWVZsWm9iMWR0Vm5KWGJHaFdZbGhvTTFacVJsTmpNVnB5VDFab1UwMUdjRFZXVkVreFpERmFkRkpZYUdwU1YyaFlWRlZhZDAweFZuUk5WVGxUVFZaYWVsWkhlR3RXTWxaMFducENWMkpZUWtoWFZscHpWMFpLZFZOck5WZGlTRUpRVm0xNFlXUXlUbk5XYms1aFVucHNXVlp0ZUhkbFJsVjVZMFpPYUZKcmNEQmFWV2gzVjBkRmVGTnNVbHBXTTJob1drVmtWMUl4Y0VkaFIyaE9ZbGRvVWxZeFdtRlpWazUwVlZoa1QxWnRlR2hWYlhoM1YwWndXR1ZIUmxoV2JWSllWbGQwYTFkc1dsVldibkJYVm5wV1RGWnFTa3RYVmtaellVWndhVkl4U2pKV2ExcGhZVEpPYzJORlZsSmlXRUpQVm14U1YxZHNXbk5hUkVKb1RWWndXVlV5ZEdGVU1WcDBZVVpvV21KSGFGUmFWbHBUVmpGa2RHUkhjRTVXYkhBMVYydFdhMlF5UmxkWGJGWlhZV3hhV0ZWdGVIZGhSbXcyVW14T2FrMVdTbmxYYTJSM1ZrWktWVlpzWkZkaVZGWXpWbXBLVTJNeVNrVlhiRTVwWVhwV2VWWlhjRU5rTVU1WFZWaG9ZVk5GTlZoVVZWSkhVMFpyZDFkdVpGaFNNSEJJVmpJMVMxWlhSWGxWYTJoaFVsWndhRmw2U2tkVFIxSklaVWRzVTJKclNqSldiVEI0VFVaWmVHSkdaRlpoTWxKWVdXMTRTMk14Vm5SbFNHUnFZa1pLV0ZZeU5XdGlSMHBIWTBSQ1ZWWlhhSFpXYWtGNFkyMU9SVkZzYUdoaGVsWXlWbXBDWVZkdFZuTldibFpVWWtkU2NGWXdaRzVsVm1SelZtMTBWVTFWTlZoV2JUVlRZVlpLY2s1Vk9WVldWbG96VkZkNFlXTXhjRWxhUmxKT1VrWmFTbFpyV205aU1rWkdUVWhzYkZORlNsZFphMXBoVFRGYVZsZHVUbGRXYXpWNFZsZDRVMkZXVGtaVGEyaFhZV3R3TmxSc1dtRmphekZYV2tkd1UySlhhRmhXUmxwaFV6RmtSMXBHWkZoaVZWcFVXV3hWTVZOV2JGWlhibVJWWWtWc05GVXljM2hXTVZwR1UyMW9XRlp0VWxCV01GcFBZMjFHU0dWR1RsZFNiSEJhVm0xd1ExWXhUWGhVYkdSWVlteEtjMVZ0Y3pGVk1WSlhWMjVPVDFKc2JEVmFWV00xVjBaSmQyTkZhRlpOYm1oUVZqSXhTMU5HVm5WWGJGcHNZVEZ3YjFaWGNFZFpWbHBYVjI1U2ExSlVWbGxWYkZaM1UxWmFjbGR0UmxwV2ExWTFWVzAxVDFaSFNraGhTRTVXWWtkUk1GWXdXbGRrVjA1SFdrZG9VMkpZYUZwV1JscFhUVWRHZEZOc1drOVdXRUpZVldwT2IyUnNXbkZTYTNSWFZteHdlbFp0ZUc5V01EQjRVMjVzVjFkSVFraFpWRVpLWlVad1NWWnNaR2xTTVVwM1ZtcENZVk14V2tkWGEyUlhZa2RTY2xsc1drZE9SbVJ5VjIxMFdGSXdjRlpaYTFwaFYyMUZlVlJVUmxWaE1YQjZXVEo0YTJNeFVuTlhiV3hYVjBWSk1WWnRjRXBOVmtWNFYyeGtXR0V4Y0ZsWmJHUnZWbXhzY2xkdVpGZFNiRll6VjJ0V01GVXlTbFpPVld4YVRVWndVRlpxU2tabGJFWnpWbXhrVGxZeFNYcFdWbVI2WlVaWmVGUnVTbWhTYXpWd1ZXMDFRMVpXWkZobFJrNVhUVlp3V0ZZeU5VOVdNVnBHVjJ4T1ZWWnRVbFJhVlZwWFYwVTFWazlXV2s1V1dFSTFWbXBLTkdNeFpFaFNXR3hXWW14d1dGbHNhRTlOTVhCRlVWaG9VMVpyY0hwWGExcFBZVlpPUmxOcmJGZE5ibEpVVldwR1UyUkdWbGxoUm1ScFlYcFdWbGRYZUd0T1JsRjRZa2hPV0dFelVsWlZiWGgzVjBaYVdHUkZPVlpOUkVaNVdUQm9kMWRIUlhsaFJrSllWbXh3VEZWcVJrOWtWbEp6WTBkb1RtSlhhRVpXYlRCNFRrZE5lVlJzWkZOaVJscFVXV3RWTVZaR2JIUmtSVnBzVm14d1dGZHJVa05VTVVwelkwVm9WMDF1YUdoV1JFWmhWbXMxVjJKR2NGZE5NVXBOVjJ4a05GWXlUbk5hU0VwaFVtMW9WRmx0ZEV0VFJtUlZVVzFHVkUxV1NucFZNbmh2VlVaYVIyTkdhRlZXYkhCTVZYcEdkMVpzY0VaT1YzaFhZa1p3TmxkV1ZtRlpWMFpHVFZaYWFsSjZiRmhWYlRGUFRrWlNjbHBGT1dwTlYxSXhWbTB4ZDFVeVNsZFRibWhYVW14d1YxUldXbHBsUm5CSlUyeG9hVmRHU25kV1Z6RTBZekF3ZUZWdVRsWmhNRFZZVkZkMGQxZHNWbGhrUnpsWVlrWnZNbFZ0ZEc5V01rcFpZVVpDWVZKc2NGUlpla3BQVTBkV1NHRkhlR2xTYmtKWFZtMHhkMU15VVhoVVdHaFdZbXhLV0ZsdGN6RlhWbXgwWlVkR2FsSnNXbmhXUjNoUFlXeEtjMk5FUW1GV1YyaG9XV3RhUzJSR1ZuVmlSbVJPWW1zeE5GWnJaRFJUYlZGNFdraE9ZVkl3V2xSV2JUVkRWRlphY2xwRVVsUk5WMUpZVm0wMVMxZEhTa2hWYkdoYVlrWldNMXBWV210WFJURlZWV3hXVGxadVFqWldiR014VXpGYVNGTnJaRmhpVkd4V1ZteGFTMWRHVWxkWGJVWlRUVlp3ZWxkclZURlZNREZIWTBSYVYyRXlVWGRYVm1SSFl6RlNjbUZHV21sV1ZuQm9WMWQwWVZNeFpFZFhiRlpUWW1zMWNWWnRkR0ZOVm1SeVZsUldWMDFyY0ZwV1ZsSkxWakZhZEZWWVpGZGhhMXBvV1hwR2EyTldaSFJpUms1b1RVaENXVlp0TVRCV01rMTNUbFZrYVZKR2NGVlphMVV4VjFaV2RHVkZkR3hXYlhoNVZqSXhNR0ZHU1hkV2FrNWFUVVpWZUZacVJtRmpNVTV5WlVaa1YxSlZXWHBYYkZaclVtMVdkRk5yV2s5V2JWSndWbTEwZDA1c1dYaGFSRkpYWVhwR1IxUldXbXRXTWtwSVlVVTVWMkp1UW5wV2JGcHpZMnhhZFZSck9XbFNia0phVmtkNFZrNVdaSE5YYms1cVUwZDRWbGxyV21GV1JscHpWMjFHV0ZKc1dubGFWVnBYWVZaS2RWRnJiRmhoTVhCeVZrUkdUMU5HVm5KYVJsWm9aV3hhVlZkWGVGTmlNRFZIVjI1R1ZHRnJTbGhVVmxwSFRrWldjMkZIZEZWaVJuQlpXVlZhVTFkc1drWmpTRnBYVFVad2FGa3hXazlqTVZKMFkwZHNVMkpIT1RSV01WSkRZakZSZUZWdVVsUmhNbWh6VlRCa05GbFdXbk5YYkZwc1VtMTRXRmRyVm1GaVIwcEhWMjV3VjFJemFGaFdha1poWXpKS1JWUnNaRmROTW1odlZtMXdSMkV4V1hoVGJsWlRZa1pLY0ZVd1ZrdFZSbHBIV1hwR1ZVMUVWa2hYYTJoUFYyc3dlV0ZHYUZWV2JWSlVWakJhWVZkRk5WWmFSbHBwVmxoQ1dGWnFTalJpTVd4WFYxaHdWbUV6YUZaV2FrNXZWakZ3VjFwRk9WTmhlbXhZVlRKek1WVXhTbk5qUjBaWFlsaG9jbFJWWkVwbFZrcHlXa1pXYUUxc1NuaFdWRUpYVXpGc1YxZHVVbXhTTUZwV1ZXMDFRMWRHV1hsTlZFSm9ZWHBHZVZZeWRIZFdNVW8yVW01d1dsWnNjRkJWYlhoUFl6Sk9SMXBHVGs1TlZXOTVWbTB4ZDFNeFNYbFVXR2hXWW10d2IxVnFUbE5XVmxaMFpVaGtWMkpHY0VoV01uaHJWakF4UlZGcVVsZGlXRUpvVmxjeFMxSnJOVmRhUm5CcFVteHZlVlpHWkRSVk1WcHpZa1JhVTJKR1dsUlphMXBhVFZaa1ZWUnVaR3BOVlRFMVZtMTRiMkV4VGtoVmEzaGhWbTFSZDFwRVFuZE9WMFY2VVZjMVRGVXljemxLZVd0d0p5a3AnKSk='))'))