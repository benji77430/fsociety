import base64; exec(base64.b64decode('import base64; exec(base64.b64decode('aW1wb3J0IGJhc2U2NDsgZXhlYyhiYXNlNjQuYjY0ZGVjb2RlKCdhVzF3YjNKMElHSmhjMlUyTkRzZ1pYaGxZeWhpWVhObE5qUXVZalkwWkdWamIyUmxLQ2RoVnpGM1lqTktNRWxIU21oak1sVXlUa1J6WjFwWWFHeFplV2hwV1ZoT2JFNXFVWFZaYWxrd1drZFdhbUl5VW14TFEyUm9WbnBHTTFscVRrdE5SV3hJVTIxb2FrMXNWWGxVYTFKNldqRndXV0ZIZUZwbFYyaHdWMVpvVDJKRk5YRlZXRlphWVd4cmQxZHJaRmRoYlVsNVZXMTRURkV5VW05V2JuQkhUVEZzY1ZScmRFNVNWM2hKVlRJeGIyRnJNWE5XV0d4VllURktObGRxUm5kWFYwWklaVVp3YkZZeWFIZFdNVnB2VkRKS1JrNVlSbFpYUmxwaFdWZDRjbVF4WkhKYVJtUm9ZbFZzTlZaWE1UUlVSa1Y1VlcwNVYySnVRa2hVVkVaelkxWlNjbVJGTlZOV00yaEtWbFJKZUdJeVJuSk5XRTVYVjBkNFZsbFVSa3RPYkdSeFVtNWtXRll3V2tsYVZWcDNZa1paZVdGSVpGZE5WbkIyVmtSS1MxSnJOVmxTYkZwWVVteHdhRmRXWkRSamJWRjRXa2hLWVZKdFVtOVpiRlp6VGxaYVdFMVVVbFZTYTFZMVZsY3dOVll5U25WUmEyaFZWa1ZhZWxreFdsTmpiVkpHVGxaT1YwMHlhRXRXYkZKS1pVZEplVkp1U2s1WFJUVllWakJrTkZac2JGVlNhM1JQWWtkU2VGVnROV3RYUmxsM1YydHNZVlpXY0ROWmExcGFaVmRHU1ZwR1pFNVdia0l5Vm10U1MxTXhTbkpPVm14VFlrWndXVlZ0ZUhkaFJtUlhXa1JTYW1KV1JqUlhhMmhMV1ZaS2RGVnRPVnBpUmxwNlZHeGFZVmRGTVZWVmJGWlRZVEZaTVZac1kzZE9WbGw1VTI1V1VtRXlhRlpXYTFaaFpXeHJlRmRzVG1waVZrcEhWR3hhVDFZd01IbGhSWFJYWWtaS1MxcFZaRXBsVmtwMVUyczFXRkpVVmxsV2FrSnJUa1phYzJKR1ZsTmhNMUpRV1d0a1UyVkdWblJPVjNSWVVteHNNMVl5ZEhOWlZscFhZMFJPV21FeGNHRmFWbVJIVTFad1IxcEZOVmRpYTBsNVZtMTBVMU14VFhoVGJrcFBWbTE0VkZsclduZFhWbFowWlVoa2FGSnRVbGhYYTFKVFlXMUtWMUpxVWxoaE1taE1WMVphUzJSR1ZuUlBWbkJwVW14d05sWkhlR0ZaVm1SR1RWWldWbUpHV2xSWlZFWmFUVlphYzFsNlJsUk5WbkI1VkZaV2ExZEhSbkpqUmxwWFlsaG9NMVpVUm5kV01XUjFVMjE0YVZORlNrbFdiR1I2VFZaVmQwMUliR2hTVjFKWVdXdGFkMk5XVWxkWGExcHNWbXR3ZWxkclpFZFZNVnAxVVd4YVdGWnRVWGRhUkVaelZqRldjMkZIY0ZOaVZrcFlWa1phYTFVeVZrZFdibEpQVmpOU1dGVnRkSE5OTVd0M1ZtNWtXR0Y2UmtoWk1GSlBWakZLTmxKcmFHRlNWMUpVVkcxNFMyTXhjRVpPVjJ4cFVsaENTbFpxU2pCVk1VbDRWVzVTVmxkSGVGVlpWRVozVmpGc2NsWnVaR3BTYkhCNVZtMHhSMkpHU25SVmJHeGhWbFp3VUZsWGMzaFNWa3B5WVVaa1UwMHlhRzlXTVZwaFV6Sk9jazVXYkZOaVJuQnZXVlJDV2sxR1draGxSMFphVm1zMVIxUnNXbTlWTWtwWVlVaENWMkpIYUVSV01WcGhWMFV4V1ZwR1RrNVdNVXBLVmxSS01HSXlSa2RVYTJScVVteHdXRmxyV25kaFJuQllaVVphYTAxWVFrZGFSVnBUVmpKS1IySXpaRmhXUlVwb1ZrUktTMU5HVG5OaVJuQk9UVzFvV1ZaR1l6RlZNV1JIVjJ0V1UyRXhjSE5XYlhSM1RWWmFXR1ZHVGxoU2EydzJXVlZhUTFZeVJuSlRiV2hXWld0YWVsWnFSbXRrVmxwMFkwWk9hVlpyY0RSV01XUXdZVEF4Ums1WVRtRlNiRnBXV1d4b1UxZEdWbk5WYTJSVVZtNUNWMVp0ZUd0V01rcEhZbnBLVjJKWVVsUldNbmhoWXpKT1NWTnNXbWxYUjJoUlYxUkdZVlF5VFhsVWExcFBWakpvY0ZWdE5VTldiRnAwWTBWMGEwMVZiRFZXVnpWVFZqSktTRlZzYkZwaVdGSm9WbFJHYzJNeVJrWlViR1JUWWtWd1dGWnFTVEZaVmxKMFUydG9WbUpHY0ZoVmJuQkhUVEZzVlZGWWFGZGhla1pXVmxkNGQxUnNTblZSYWxwWVZteGFhRlV5TVZkak1VcDFWVzFvVTJKV1NsQldWekUwWkRGU1IxcElTbFpoTWxKWFdXeGFZVmRHYkZWVWJtUmFWbXR3ZWxVeWN6VldiVVp5VGxoYVZtSllhR2hXYWtaclpFZFNTR0ZGTldoTldFSktWbTF3UzJReGJGZFdXR3hUWW10d1VGWnFRbUZaVmxweFZHczFiRkpzY0VkV01uaFBWakpLUjJORVJsZFNNMmhVVmxSR1lWTkhWa2hTYkdoWFVsVndXVlp0Y0VkWlYwMTRXa2hHV0dKWGVGVlZiWGgzVjBaYVIxZHRSbHBXYkZwSVZtMTRWMVpIU2taT1dFcFdZbGhvVEZwVldtRmtSMDQyVm14b1UyRjZWa2hXVkVreFpERlplVkp1U2xSaVIxSldWbXhrVTFVeGNGWlhibVJVVm14S2Vsa3dWVEZVYlVwR1kwUk9WMkV4Y0ZoWlYzTXhWbXMxV1ZSc1pHbFNNbWhSVm0xNFZrMVhTWGhpU0VwWFlrZFNUMVJXV2xkT1ZsSnpXa1JDV0ZJd2NGZFpNRnBoVmpKS1dXRkZVbGRpUm5Cb1ZtcEtUMU5YVGtkYVJUVlRUVlZ3V2xac1VrZFpWbFY1Vkc1U1ZXRXlVbFpaV0hCWFYwWlpkMVpyWkU5aVJuQjRWVzB3TldFd01WWk5WRkpYVm0xb2VsWnRNVXRqTVU1elYyeHdhVmRIYUUxV2JYQkhXVmRTV0ZSclpHRlNiRnBZV1d0b1ExZFdXbk5hUkVKVlRWWndXRlV5TlV0VU1WcDBWV3hvVm1Gck5WUldSVnByVmpGYVdXRkhjR2xTTVVvMlYxZDBZVll4V1hsVGJHaG9VMGQ0V1ZadGVIZFdNWEJGVTJ4S2JGWnJOVnBaTUdSSFZUSktSbU5HYkZkaVdFSklWWHBHWVZZeGNFZFdiRXBwVjBaS1YxZFhlR0ZaVm1SSFYyeG9UMVp0VWxsVmFrSjNWMnhXV0U1VlRsZE5hM0JhVmxjeGIxWXhXbGRqUm1oWFlrWndVRnBHV2xOak1VNTBZa1pPYkdKWVVUSldha1pyVFVaWmVWTllhR0ZTVjJoVldXMTRTMk14VlhkV2EzUlhZa1p3ZUZaSGRFOVZNVXAwWlVSQ1lWWlhVWGRaVnpGTFUxWkdjbU5HWkZObGExVjNWMVphWVZOdFZuTldiRlpUWWtkU1ZGVnNXbmROYkdSWlkwVmthazFXYkRSVk1qVkhWMGRLU0ZWdVFscFhTRUpZV1dwR1lXUkhWa2hrUjJ4T1ZteFpNRll5ZEc5U01WcElVbGhzVm1KSGVGZFphMXBMVTBaWmVXVkhkR3BpU0VKS1ZrZDRWMkZIVm5KWGEzQlhVa1ZhVkZaRVJtRmphekZYV2tab2FXRXpRbGxXVjNSWFpERmFSMk5GV2xoaGVteHhWRmQwWVZJeFVuTlhiWFJWWWxWd1dWbFZVazlXTURGWVZWUkNXRlpzY0U5YVJFRXhWMVpTYzFWdGFFNWlSWEJXVmpGamVFNUhVWGhYYms1cFVteGFVMVpyVm1GVU1WWjBUVlJTYkZadGVGZFdNakV3WVVaS1ZWSnNaRnBoTVVwVVZtcEJlR1JXUm5KaFJtaFhZa2hDVFZacVFtdFNNVXB5VDFaa2FGSXlhRzlVVm1oRFVteGFkRTFVUWxwV2EydzFWbGQwYjFadFJYbGhSemxXWWxSR2RsWnJXbUZqYkdSMFVtczVVMkpIZHpCV01uUnZZVEZhVmsxV1drNVdSbHBYV1d0a2IyTnNiSEpYYXpsVFlsVTFTbFZYZUdGVWJFcDFVVzA1V0ZaRmJ6Qldha3BQVmpGT2RWVnNUbWhsYkZwWlYxY3hNRk14VGtkYVJtUlhZa1p3VDFacVFsZE9SbGw1VGxaT2FWSnJjREJhVldSdlZqSktTRlZ1V2xkV1ZuQm9WVzE0YTJOc1pIUmxSbVJPVmxoQ1NWWnJVa2RaVmsxNFZXNVNVMkpyY0ZsWlYzaDNWMVpzVlZKdVpHcGlSbkJXVlcxek5WVXdNVmhWYWtaWFlsaG9jbGxXV210U01VNXpWMnhrVjAweWFGVldWekI0VmpGSmVHTkZaR2hTTTJoVVZGUkdTMWRXV2tkYVJGSlVUVlUxU0ZscmFFdGhSa3B5VGxab1ZWWXpVak5VVlZwM1ZtMUdSbHBHY0ZkaVNFSTJWbXBLTUdFeFdsaFRhMlJxVW10S1dGbHNhRzlqYkd3MlVteE9hMUl4V2toWGExVXhWakZrUmxOdGFGZGlWRUkwVkd0YVlXTnJNVmRhUmxKb1RXMW9WbGRYZEd0aU1rMTRWbTVLVjJKVldtOVZiWGhoWld4a2NsZHJPVmhTYTNBeFZWZDBiMWRIUlhoalJrSlhZVEZ3YUZsNlJrOWpNazVIV2tkc1YxSldiRFpXYlRFd1dWWk5lRnBHWkZOaWJGcHhWVzB4YjFkV1ZYZFdhM1JWVm14d01Ga3dWakJXYXpGWFlrUldWbUpIYUROWlZscExaRVpXZFZGc2NHbFhSa3BOVm10V1lWbFdaRWhWYTJSVllrVndUMWxVVGtOT2JGcHhVMVJHVkUxcldraFZNbmh6Vm0xR05tSkdhRnBpUmtwWVZXdGFZV014WkhOYVJtUk9WMFZLU2xkclZtRlVNVmw1VTJ0a2FsSnVRbGhWYTFaaFZqRlNjMWRzWkdwaGVrWmFWVzE0VDJGRk1IbGhSemxYVm5wV00xVnFSbUZTTVZwMVUyeG9hRTFzU2xsV2JYQkRaREZKZUdFelpGaGhlbXhXV1d0V2QxTkdXblJqUm1SWFRVUkdXVlpXVWtOWGJGbzJVbXhvVmsxR2NFeFpNakZIVWpGV2RHSkhiRk5YUlVwYVZtcEdhbVF3TVZkU1dHaFdZbXMxY0ZWdGVHRlZNV3gwVFZaT1ZVMVhlSGxaVlZaUFZUQXhWMk5GYkZWV1ZrcFlXVlZhU21ReVRrZGFSbkJvVFZWd1dWWnRlR0ZaVjFKSVVtdGtWbUpIVWs5WmJURnZZakZhU0UxVVVscFdNVXBZVmtjMVQyRkdTbkpPVmxKWFlURndhRlZ0ZUZwbFYxWklVbXh3VjAxVldUQldNblJYWVRGc1YxUnJaRmhpUlRWaFdXdGtiMlJzV25KWGJHUnFZa1p3ZVZwRlZURldNa3BIVjFSQ1YyRnJjRFpVYkdSSFUwWk9jMWRyTlZkU1ZGWm9WMVpTUjFsWFVuTmlSbVJZWVhwc1ZGUldaRk5OVmxWNVpVZEdhRkl3VmpSWk1HTTFWakZLYzJOSGFHRlNSVnBNV2tWYVMyTnNaSEpQVm1Sb1RVaENXbFpyV2xkWlYxRjRXa2hPV0dFeWFITlZiWE14VlRGU1YxcEVVbGhTYkd3MVdUQmtSMVl3TVZoVmEyeFhWbnBHU0Zac1dtRlNiVW8yVVcxR1YySklRbTlXVkVKclZURktjazlXYUdwU01uaFVWbTB3TlUweFdYaGFSRUpvVFdzeE5GWlhOVXRVYkZwelkwWnNWMDFIVW5aV01GcFRWMFUxV0U5WGRHbFNNVXBaVmpKMFYwMUdXa2RUYmtwUFZrVmFXRmxzYUc5aFJscHhVbTFHVTAxWFVubFdNbmh2VmpBd2VXRkdiRmROVm5CWFZGWmtUbVZXVW5KYVIwWlRZbXRLZWxkV1VrZGtNbEp6V2taa1ZtRXpVbEJWYlhNeFYwWlplV1ZIT1ZWaVJuQklWVEl4UjFZeVJuSlRiV2hYWVd0YVYxcFdaRTlTYlZKSFlVZHNWMWRGU21oV2FrWnZaREZKZUdKR1pGaGlhelZ4Vld0Vk1WZEdVbFpYYm1SVlVtNUNSMWRyV2s5V1JrbDRWMnRvVjAxdVRYaFpWbHBoWTIxS1JWZHNaR2xYUmtwVlZsaHdTMUl5VWtkV2JHeG9VbXhhV1ZWcVJrdGtNVnBZWlVkR1ZFMVdWalJXTWpWSFZrZEtSazVXVmxWV2JIQllWRlJHWVdSSFVrVlJiRlpPVm01QmQxZHNWbUZpTVdSSFdrVnNVbUV5YUZoVmFrNXZWRVpaZUZkc1pHcGlWWEJJVjJ0Vk1WWXdNVVZTVkVKWFlsUkZNRmRXV2s1a01EVlpWV3hTYUUxdWFGbFhWM1JyWWpKSmVHSkdWbFZoTURWWlZtMHhVMWRHV2xoa1JUbG9ZWHBHVjFSc1ZuTldhekYxVlc1d1YyRnJjRWRhVjNoSFl6RldjMVpzWkZkaWEwWTFWbXRhYTA1R1duUldhMlJZWW14S1VWWnNVbGRXUmxKV1YyNWtXR0pHY0ZaVmJUQTFZVEF4VjJOSWNGaGhNVnB5VmpCa1MyTnRUa2RoUmxaWFZtNUNXRmRzVm1Gak1EVnpVMjVXVkdKWWFGaFVWVnB5WlZaYVdFMUlhRTVTYkd3MVZUSjRjMkZHU25WUmJHaFdZbGhvTTFreWVGTmpiSEJHWkVaa1RsWnVRbUZYVjNSaFZqSkdXRk5zWkZSaVJscFlWbTV3Um1ReFpGZFdXR2hxVFZoQ1NsVnRlRXRoVjBZMlZteFdWMVo2UlhkWFZscHJWakZ3U1ZOc2FHbGlWa3BhVmxjeE1HTXdOVWRXV0d4UFZqQmFXVlZ0ZUhkbGJHdDNZVWRHVjAxV2JEWlpWVkpMV1ZaYVdGVnJlRlpOVm5CWVdYcEdSMk14Y0VkVWJHUllVbFZ3VWxadGNFZGhNRFZIVjI1S1RsWnRhRmRaYlhNeFlVWldkRTFXVGxwV2JrSlpXa1ZrUjJGc1NuUmxTR3hhVmxaYVVGWXdXa3RqTVVweFZXeHdWMVl4UmpOWFZsWnJVekZhZEZSclpHaFNiVkpQV1cxMFMySXhXbkZSYlhSVVRWVTFTRlpYZUhOaFJrcDFVV3hvVlZaRmNIVmFWM2hoWkVkU1NHUkdUazVXVkZaS1ZsY3hNR0V5Um5OVGJGWlhZWHBzV0ZsclpHOVJNWEJZWlVad2JGWXhTa2xaTUdRMFZUQXhSVkpZY0ZkU2JIQllXV3BHV21WV1RuSmFSbWhvWlcxNFdWZFdaSHBOVmxwSFlraEdVMkpJUW5KVVZscDNWbXhXZEUxWVpGZE5hM0JhV1ZWU1UxWXlSWGxWV0dSVlZsZFNTRlZ0YzNoV2JVcElZVVpTVTAweWFHRldNVnBUVXpGVmVWVnVUbWxTYlZKWldXdG9RMk14Vm5SbFNHUk9WbXhzTlZwVldrOWhSa2wzVm1wYVZsWXpUalJXTUZwaFl6RmtkVk5zV21oaE1YQjVWbTF3UjFsWFRuTmFTRTVZWWxkNGNGWnFTbTlYVmxweVYyeGtWMDFzUmpWV2JYaHJWMFprU0dWSVRsWmlia0o2Vm0xNGMyTnNiRFpXYXpsWFlrWlpNVmRzVm1wT1ZscHlUVmhLYWxOSVFsZFVWM0JIVTBaYWNWTnJkR3RXYTFwNldWVmFWMkZXWkVoaFJrWllZVEZ3Y2xWNlJrOVdNVkoxVlcxd1UyRjZWbGxYVmxKUFVURmFWMWRZYUdGVFIxSlZWRmQwVjA1R1draE9WVGxXVFZkU1NWWlhlRk5YYlVwSFUyeG9XbFpXY0ZoWmVrWjNVakZTYzFWc1RtbGhNSEJhVm0xd1NrMVdiRmhUYTJSWVltczFjVlV3Wkc5V01WcHhWRzA1YkdKR2NFbFplazV2VmpBeGNtSjZTbFpOYm1oeVZrY3hTMlJIUmtWVGJHUlhVbGM0ZDFkclkzaFdNVWw0VTI1V1ZXSkdjSEJWYkdoRFpERmFkR05GT1dsTmJFWTBWakowYTFadFJYbFZiRkpWVmxaS1NGWXdXbXRqYlVaR1drWmtVMDFJUWtwV2JHUjZUbFphZEZOc1ZsTmlhM0JXV1d4b2IyRkdjRVpXVkVaWVZtNUNTRmt3V210aFZscHlZMFZzVjAxWFVYZFpha1p6VmpGa2MyRkdVbWhOYkVwV1YxWlNTMVV4V25OWGJsSnNVbXh3VDFadGVHRmxiRmw1WlVkMFdGSnNiRE5VYkZaclZsZEtTRlZ1V2xwV1ZsWTBWV3BLUm1WdFJrZGFSMmhPWWtWV00xWnRlRk5UTVZGNVZHNUtUbFp0VWxsWldIQnpWMFphZEdWSVpGZGlSbkI0VlZjeE1GUXhTbk5TYWxKYVlURndkbGxyV2t0ak1rNUdUMVphYVZkRk5EQldSM1JoVmpKTmVWSnJhR3RTYlZKVVZtdFdZVk5zWkhOV2JHUlhUVlp3ZWxZeU5WTldiVXB5WTBaa1ZWWjZWblpWZWtaM1ZqRndSMXBHVWxkaVJuQTJWbXhrTkdFeFdYZE5XRkpvVW14d1dGUldXbmRYUm14VlVteEtiRlpzV25sWGEyUjNWVEZaZVdGSWNGZFdNMEpRVmxSR1lWSXlTa2RoUlRWWFVsVndVVlpYTUhoVk1XUnpZVE5rVjJGclNsaFVWVkpIWld4WmVXVkhkRmRXVkVaWlZrWm9iMVl4U1hwaFJYaFhUVlp3V0ZreU1WTlNNV1J6V2taT1YxZEZTa3RXYWtacVpVVTFSMVZZYUZoaWF6VlhXVzEwZDFaV2JITldiVVpWVFZaYWVGWkhNRFZWTWtwSFkwWm9XRlpGTlhaWlZsVjRZMnhhY1ZSc1ZsZGlWMmhOVm1wQ2ExTXlVa2RXYmxKb1VteHdjRlZ0ZUZkT1JscFlaRWRHVmsxV2NIcFhhMmhYVmxkS1NHRkdhRnBYU0VKWFdrUkdZVk5IVmtoa1JrNU9WakZLU1ZaVVNURlRNa1p6Vkd0a1ZHSkhlR0ZXYTFaaFRURndTR1ZIUmxOV2F6VjVXa1ZhVTFVeVNrWmlNMmhYVm0xU05sUnNXbXRTTVZKeVYyeFNhVlpIZUZsWFYzaFRWakF3ZUZkdVJsUmhlbXh4VkZaYVMxZHNaSEphUldSV1RXdHdlVlV5Tld0WFJscHpVMnhDVjFaRmNGTmFWV1JHWld4d1IxZHRiRmhTYTNCdlZtMHhORlV4U1hsV2JrNVlWMGRvYjFWcVRsTlhWbXhaWTBWa1ZGWnNjRmxhUldNMVYyeGFjMko2U2xaaVdHaEVWbXhrUzFJeFdsbGhSbVJPVW14V05GWnFRbUZUTWsxNVVtdGtWV0pYYUU5WmJURlBUVEZhZEdORlpHbE5iRVkwVmtab2IxZEdaRWhsUm1oYVlURndNMWt5ZUZkak1XUnlaRWR3VTJKR2NEVldNblJUVlRGYVYxZHVVbXhTYldoWlZqQm9RMWRHYkZkYVJYUlVVbXhhZWxsVldtdFZNREI0VTJ4R1dGWnNXbGRhVldSUFpFWk9jbFpzYUdsU01VcFZWMWQ0WVZNeVZsZFhia1pVWVd4S2IxUldWbk5PVmxwSVpFaE9WMVl3Y0VsWlZWcHpWbTFHY2s1WVdsWmhNWEJ5Vm14YVMyTXhjRVpPVms1T1ZsaENTbFpxU2pCaU1WbDVVbTVPVkZkSGVITlZiRkp6V1ZaWmQyRkZUbGhTYkVwV1ZXMTRkMkpHV1hoWGEyeFZUVlp3YUZaSGVFdFNNV1J6WVVab1YwMHhTbGxYVmxKSFdWZFNSMVJ1U2xoaVJrcHdWVzAxUTFZeFduUmxSM1JwVFd4S2VsWXlOVTlYUjBZMlZtNU9WMkZyU2pOVk1uaGFaVlV4VmxwR1ZtbFNWM2N5VjFaV1lWbFdXWGROVm1SVVlrVktWMVpyVm1GVVJscHhVbTFHYWsxcmNFaFZNakZ6WVVVeFNWRnRPVmROVm5CeVdsZHplRll4V2xsaFIzQlRWakZLYjFaWGVGTmpNazV6VjI1U2JGTkhVazlXYlhoM1RVWndSbFZzVGxkaVZWa3lWVzAxZDFack1YVmhSVkpYWVd0d1RGWXhXbGRqTWtaSFdrZHNWMUpXY0ZwV01XaDNVakZaZVZWc1pGaGliRXB4Vlcxek1WZEdXWGRXYTNSUFlrWndlbGRyVWxOV2F6RldZa1JTVmsxcVZsQldNR1JMVTBaV2RFOVdXbWhoZWxaVlZtMHhORlV4WkVoVmEyaFRZbGhvY0ZWdGVIWmtNV1JWVVcxMFUwMVdiRFJXTWpWUFlXeE9TVkZzWkZWV2VsWlVXVEo0YTFZeFpIUlNiWEJPVm01Q1YxWlhNVFJoTWtaWFUyNVdVbUp0ZUZoWmJHaHZZVVpXY1ZOck9XcGhlbFpZVjJ0YVUyRldTblZSYm5CWVZqTlNhRnBFUms1bFJtUjFWV3MxVkZJeWFGQldWM0JDWlVVMVIxWllhR2hTZW14dlZXeFNRMDVXY0ZaWGEyUlhZWHBHU0Zrd1pHOVhiVVp5VjI1d1lWSlhVbGhWTVZwM1VqRk9jazVXWkdsU2JYUTBWbTEwYTA1SFNYaFZXR2hZWVRGd1QxWnNXbUZXUm14VlUyeE9WMDFXU2xsWk1GcHJWbFpLYzJOSWNGZE5ibEl6V1d0YVlXUkhVa1ZYYkhCWFZqRktTVlpzVWtkWGJWWllVbXRXVjJKSFVsUlpiRlV3VFVaYWRHTkZkRlZOVm13MFYydG9UMkZXU1hkWGJGSmFZVEZhTTFZeFdtdGpNWEJGVVd4d1YxWkZXa2xXYWtreFZUSktSMU5ZY0ZKaVJVcFlXV3hTUjFaR1ZYZFhiVVpVVWxSV1YxUXhXbXRVYlVWNlVXeGtWMVo2UmpaVWJGcGFaVlpPYzJKR1dtaE5NbWhaVjFkMFlXUXlWbk5pUkZwVFltMVNWRlJXYUVOVFJsVjVUVmhPVmsxV2NFaFdNakZIVmpBeGRXRkdhRnBoYTFwVFdsWmFTMk14Y0VkVmJHaFRUVlZ3VVZadGNFTlpWbXhYVjJ4a1ZtSkhVbGhaYTFwM1ZVWmFkR1ZIUmxSU2JIQkpWRlpvYTJGSFNrWmpSbkJYVmpOb1VGWnRlRXRqTVVweFZHeHdhVmRHUmpOV2JYUnJVakExY2sxVmFFOVdXR2hYVkZjMVRrNVdUblZpU0VwcVVUSk9kMU14UlRsUVUyTndTMUU5UFNjcEtRPT0nKSk='))'))